
DW100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed8  080033f4  080033f4  000043f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042cc  080042cc  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  080042cc  080042cc  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042cc  080042cc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042cc  080042cc  000052cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042d0  080042d0  000052d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080042d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000068  0800433c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  0800433c  000062a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005fa5  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000173c  00000000  00000000  0000c036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000d778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000520  00000000  00000000  0000de70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179b9  00000000  00000000  0000e390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000080b7  00000000  00000000  00025d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083b47  00000000  00000000  0002de00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1947  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000227c  00000000  00000000  000b198c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000037  00000000  00000000  000b3c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080033dc 	.word	0x080033dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080033dc 	.word	0x080033dc

0800014c <DW_ReadReg>:
  * @param  data: Pointer to data buffer
  * @param  length: Number of bytes to read
  * @retval HAL_OK on success, HAL_ERROR on failure
  */
uint32_t DW_ReadReg(uint8_t reg_addr, uint8_t* data, uint8_t length)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
    uint8_t header = reg_addr & 0x3F; // Bit 7=0 (read), Bit 6=0 (no sub-index)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000162:	b2db      	uxtb	r3, r3
 8000164:	73bb      	strb	r3, [r7, #14]

    if (!data || !DW_ValidateRegisterAccess(reg_addr, length)) {
 8000166:	683b      	ldr	r3, [r7, #0]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d00b      	beq.n	8000184 <DW_ReadReg+0x38>
 800016c:	79ba      	ldrb	r2, [r7, #6]
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	4611      	mov	r1, r2
 8000172:	4618      	mov	r0, r3
 8000174:	f000 f8a8 	bl	80002c8 <DW_ValidateRegisterAccess>
 8000178:	4603      	mov	r3, r0
 800017a:	f083 0301 	eor.w	r3, r3, #1
 800017e:	b2db      	uxtb	r3, r3
 8000180:	2b00      	cmp	r3, #0
 8000182:	d001      	beq.n	8000188 <DW_ReadReg+0x3c>
        return HAL_ERROR;
 8000184:	2301      	movs	r3, #1
 8000186:	e026      	b.n	80001d6 <DW_ReadReg+0x8a>
    }

    HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	2110      	movs	r1, #16
 800018c:	4814      	ldr	r0, [pc, #80]	@ (80001e0 <DW_ReadReg+0x94>)
 800018e:	f001 f821 	bl	80011d4 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi1, &header, 1, HAL_MAX_DELAY);
 8000192:	f107 010e 	add.w	r1, r7, #14
 8000196:	f04f 33ff 	mov.w	r3, #4294967295
 800019a:	2201      	movs	r2, #1
 800019c:	4811      	ldr	r0, [pc, #68]	@ (80001e4 <DW_ReadReg+0x98>)
 800019e:	f001 fc95 	bl	8001acc <HAL_SPI_Transmit>
 80001a2:	4603      	mov	r3, r0
 80001a4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 80001a6:	7bfb      	ldrb	r3, [r7, #15]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d109      	bne.n	80001c0 <DW_ReadReg+0x74>
        status = HAL_SPI_Receive(&hspi1, data, length, HAL_MAX_DELAY);
 80001ac:	79bb      	ldrb	r3, [r7, #6]
 80001ae:	b29a      	uxth	r2, r3
 80001b0:	f04f 33ff 	mov.w	r3, #4294967295
 80001b4:	6839      	ldr	r1, [r7, #0]
 80001b6:	480b      	ldr	r0, [pc, #44]	@ (80001e4 <DW_ReadReg+0x98>)
 80001b8:	f001 fdcc 	bl	8001d54 <HAL_SPI_Receive>
 80001bc:	4603      	mov	r3, r0
 80001be:	73fb      	strb	r3, [r7, #15]
    }
    HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_SET);
 80001c0:	2201      	movs	r2, #1
 80001c2:	2110      	movs	r1, #16
 80001c4:	4806      	ldr	r0, [pc, #24]	@ (80001e0 <DW_ReadReg+0x94>)
 80001c6:	f001 f805 	bl	80011d4 <HAL_GPIO_WritePin>
    
    return (status == HAL_OK) ? HAL_OK : HAL_ERROR;
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	bf14      	ite	ne
 80001d0:	2301      	movne	r3, #1
 80001d2:	2300      	moveq	r3, #0
 80001d4:	b2db      	uxtb	r3, r3
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3710      	adds	r7, #16
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	40010800 	.word	0x40010800
 80001e4:	20000084 	.word	0x20000084

080001e8 <DW_WriteReg>:
  * @param  data: Pointer to data buffer
  * @param  length: Number of bytes to write
  * @retval HAL_OK on success, HAL_ERROR on failure
  */
uint32_t DW_WriteReg(uint8_t reg_addr, uint8_t* data, uint8_t length)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
 80001f4:	4613      	mov	r3, r2
 80001f6:	71bb      	strb	r3, [r7, #6]
    uint8_t header = (reg_addr & 0x3F) | 0x80; // Bit 7=1 (write)
 80001f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000200:	b25b      	sxtb	r3, r3
 8000202:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000206:	b25b      	sxtb	r3, r3
 8000208:	b2db      	uxtb	r3, r3
 800020a:	73bb      	strb	r3, [r7, #14]

    if (!data || !DW_ValidateRegisterAccess(reg_addr, length)) {
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d00b      	beq.n	800022a <DW_WriteReg+0x42>
 8000212:	79ba      	ldrb	r2, [r7, #6]
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	4611      	mov	r1, r2
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f855 	bl	80002c8 <DW_ValidateRegisterAccess>
 800021e:	4603      	mov	r3, r0
 8000220:	f083 0301 	eor.w	r3, r3, #1
 8000224:	b2db      	uxtb	r3, r3
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <DW_WriteReg+0x46>
        return HAL_ERROR;
 800022a:	2301      	movs	r3, #1
 800022c:	e026      	b.n	800027c <DW_WriteReg+0x94>
    }

    HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2110      	movs	r1, #16
 8000232:	4814      	ldr	r0, [pc, #80]	@ (8000284 <DW_WriteReg+0x9c>)
 8000234:	f000 ffce 	bl	80011d4 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi1, &header, 1, HAL_MAX_DELAY);
 8000238:	f107 010e 	add.w	r1, r7, #14
 800023c:	f04f 33ff 	mov.w	r3, #4294967295
 8000240:	2201      	movs	r2, #1
 8000242:	4811      	ldr	r0, [pc, #68]	@ (8000288 <DW_WriteReg+0xa0>)
 8000244:	f001 fc42 	bl	8001acc <HAL_SPI_Transmit>
 8000248:	4603      	mov	r3, r0
 800024a:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d109      	bne.n	8000266 <DW_WriteReg+0x7e>
        status = HAL_SPI_Transmit(&hspi1, data, length, HAL_MAX_DELAY);
 8000252:	79bb      	ldrb	r3, [r7, #6]
 8000254:	b29a      	uxth	r2, r3
 8000256:	f04f 33ff 	mov.w	r3, #4294967295
 800025a:	6839      	ldr	r1, [r7, #0]
 800025c:	480a      	ldr	r0, [pc, #40]	@ (8000288 <DW_WriteReg+0xa0>)
 800025e:	f001 fc35 	bl	8001acc <HAL_SPI_Transmit>
 8000262:	4603      	mov	r3, r0
 8000264:	73fb      	strb	r3, [r7, #15]
    }
    HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_SET);
 8000266:	2201      	movs	r2, #1
 8000268:	2110      	movs	r1, #16
 800026a:	4806      	ldr	r0, [pc, #24]	@ (8000284 <DW_WriteReg+0x9c>)
 800026c:	f000 ffb2 	bl	80011d4 <HAL_GPIO_WritePin>

    return (status == HAL_OK) ? HAL_OK : HAL_ERROR;
 8000270:	7bfb      	ldrb	r3, [r7, #15]
 8000272:	2b00      	cmp	r3, #0
 8000274:	bf14      	ite	ne
 8000276:	2301      	movne	r3, #1
 8000278:	2300      	moveq	r3, #0
 800027a:	b2db      	uxtb	r3, r3
}
 800027c:	4618      	mov	r0, r3
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	40010800 	.word	0x40010800
 8000288:	20000084 	.word	0x20000084

0800028c <DW_ReadDevID>:
/**
  * @brief  Reads the 32-bit Device ID (register 0x00)
  * @retval Device ID or 0xFFFFFFFF on error
  */
uint32_t DW_ReadDevID(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
    uint8_t data[4];
    if (DW_ReadReg(DW_REG_DEV_ID, data, sizeof(data)) != HAL_OK) {
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2204      	movs	r2, #4
 8000296:	4619      	mov	r1, r3
 8000298:	2000      	movs	r0, #0
 800029a:	f7ff ff57 	bl	800014c <DW_ReadReg>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d002      	beq.n	80002aa <DW_ReadDevID+0x1e>
        return 0xFFFFFFFF;
 80002a4:	f04f 33ff 	mov.w	r3, #4294967295
 80002a8:	e009      	b.n	80002be <DW_ReadDevID+0x32>
    }
    return (uint32_t)data[3] << 24 | 
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	061a      	lsls	r2, r3, #24
           (uint32_t)data[2] << 16 | 
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	041b      	lsls	r3, r3, #16
    return (uint32_t)data[3] << 24 | 
 80002b2:	431a      	orrs	r2, r3
           (uint32_t)data[1] << 8  | 
 80002b4:	797b      	ldrb	r3, [r7, #5]
 80002b6:	021b      	lsls	r3, r3, #8
           (uint32_t)data[2] << 16 | 
 80002b8:	4313      	orrs	r3, r2
           data[0];
 80002ba:	793a      	ldrb	r2, [r7, #4]
           (uint32_t)data[1] << 8  | 
 80002bc:	4313      	orrs	r3, r2
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <DW_ValidateRegisterAccess>:
  * @param  reg_addr: Register address to validate
  * @param  length: Requested data length
  * @retval true if valid, false otherwise
  */
static bool DW_ValidateRegisterAccess(uint8_t reg_addr, uint8_t length)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	460a      	mov	r2, r1
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	4613      	mov	r3, r2
 80002d6:	71bb      	strb	r3, [r7, #6]
    // Check if register exists in predefined map
    for (uint8_t i = 0; i < sizeof(DW_Registers)/sizeof(DW_RegisterDef); i++) {
 80002d8:	2300      	movs	r3, #0
 80002da:	73fb      	strb	r3, [r7, #15]
 80002dc:	e01d      	b.n	800031a <DW_ValidateRegisterAccess+0x52>
        if (DW_Registers[i].address == reg_addr) {
 80002de:	7bfa      	ldrb	r2, [r7, #15]
 80002e0:	4912      	ldr	r1, [pc, #72]	@ (800032c <DW_ValidateRegisterAccess+0x64>)
 80002e2:	4613      	mov	r3, r2
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	4413      	add	r3, r2
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	440b      	add	r3, r1
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	79fa      	ldrb	r2, [r7, #7]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d10f      	bne.n	8000314 <DW_ValidateRegisterAccess+0x4c>
            // Validate length and access type
            if (length > DW_Registers[i].length) {
 80002f4:	7bfa      	ldrb	r2, [r7, #15]
 80002f6:	490d      	ldr	r1, [pc, #52]	@ (800032c <DW_ValidateRegisterAccess+0x64>)
 80002f8:	4613      	mov	r3, r2
 80002fa:	005b      	lsls	r3, r3, #1
 80002fc:	4413      	add	r3, r2
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	440b      	add	r3, r1
 8000302:	3301      	adds	r3, #1
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	79ba      	ldrb	r2, [r7, #6]
 8000308:	429a      	cmp	r2, r3
 800030a:	d901      	bls.n	8000310 <DW_ValidateRegisterAccess+0x48>
                return false;
 800030c:	2300      	movs	r3, #0
 800030e:	e008      	b.n	8000322 <DW_ValidateRegisterAccess+0x5a>
            }
            return true;
 8000310:	2301      	movs	r3, #1
 8000312:	e006      	b.n	8000322 <DW_ValidateRegisterAccess+0x5a>
    for (uint8_t i = 0; i < sizeof(DW_Registers)/sizeof(DW_RegisterDef); i++) {
 8000314:	7bfb      	ldrb	r3, [r7, #15]
 8000316:	3301      	adds	r3, #1
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	7bfb      	ldrb	r3, [r7, #15]
 800031c:	2b26      	cmp	r3, #38	@ 0x26
 800031e:	d9de      	bls.n	80002de <DW_ValidateRegisterAccess+0x16>
        }
    }
    return false;
 8000320:	2300      	movs	r3, #0
}
 8000322:	4618      	mov	r0, r3
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	080040a0 	.word	0x080040a0

08000330 <DW_ReadAllRegisters>:
  * @brief  Reads all DW1000 registers into a structure
  * @param  regs: Pointer to register structure
  * @retval HAL_OK on success, HAL_ERROR on failure
  */
HAL_StatusTypeDef DW_ReadAllRegisters(DW1000_Registers_t *regs)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
    if (!regs) return HAL_ERROR;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d101      	bne.n	8000342 <DW_ReadAllRegisters+0x12>
 800033e:	2301      	movs	r3, #1
 8000340:	e09b      	b.n	800047a <DW_ReadAllRegisters+0x14a>

    /* Device Identification */
    if (DW_ReadReg(DW_REG_DEV_ID, (uint8_t*)&regs->DEV_ID, 4) != HAL_OK) return HAL_ERROR;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2204      	movs	r2, #4
 8000346:	4619      	mov	r1, r3
 8000348:	2000      	movs	r0, #0
 800034a:	f7ff feff 	bl	800014c <DW_ReadReg>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <DW_ReadAllRegisters+0x28>
 8000354:	2301      	movs	r3, #1
 8000356:	e090      	b.n	800047a <DW_ReadAllRegisters+0x14a>
    if (DW_ReadReg(DW_REG_EUI, regs->EUI, 8) != HAL_OK) return HAL_ERROR;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3304      	adds	r3, #4
 800035c:	2208      	movs	r2, #8
 800035e:	4619      	mov	r1, r3
 8000360:	2001      	movs	r0, #1
 8000362:	f7ff fef3 	bl	800014c <DW_ReadReg>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <DW_ReadAllRegisters+0x40>
 800036c:	2301      	movs	r3, #1
 800036e:	e084      	b.n	800047a <DW_ReadAllRegisters+0x14a>

    /* Network Configuration */
    if (DW_ReadReg(DW_REG_PANADR, regs->PANADR, 4) != HAL_OK) return HAL_ERROR;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	330c      	adds	r3, #12
 8000374:	2204      	movs	r2, #4
 8000376:	4619      	mov	r1, r3
 8000378:	2003      	movs	r0, #3
 800037a:	f7ff fee7 	bl	800014c <DW_ReadReg>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <DW_ReadAllRegisters+0x58>
 8000384:	2301      	movs	r3, #1
 8000386:	e078      	b.n	800047a <DW_ReadAllRegisters+0x14a>
    if (DW_ReadReg(DW_REG_SYS_CFG, (uint8_t*)&regs->SYS_CFG, 4) != HAL_OK) return HAL_ERROR;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3310      	adds	r3, #16
 800038c:	2204      	movs	r2, #4
 800038e:	4619      	mov	r1, r3
 8000390:	2004      	movs	r0, #4
 8000392:	f7ff fedb 	bl	800014c <DW_ReadReg>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <DW_ReadAllRegisters+0x70>
 800039c:	2301      	movs	r3, #1
 800039e:	e06c      	b.n	800047a <DW_ReadAllRegisters+0x14a>

    /* Time Management */
    if (DW_ReadReg(DW_REG_SYS_TIME, regs->SYS_TIME, 5) != HAL_OK) return HAL_ERROR;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	3314      	adds	r3, #20
 80003a4:	2205      	movs	r2, #5
 80003a6:	4619      	mov	r1, r3
 80003a8:	2006      	movs	r0, #6
 80003aa:	f7ff fecf 	bl	800014c <DW_ReadReg>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <DW_ReadAllRegisters+0x88>
 80003b4:	2301      	movs	r3, #1
 80003b6:	e060      	b.n	800047a <DW_ReadAllRegisters+0x14a>
    if (DW_ReadReg(DW_REG_DX_TIME, regs->DX_TIME, 5) != HAL_OK) return HAL_ERROR;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3319      	adds	r3, #25
 80003bc:	2205      	movs	r2, #5
 80003be:	4619      	mov	r1, r3
 80003c0:	200a      	movs	r0, #10
 80003c2:	f7ff fec3 	bl	800014c <DW_ReadReg>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <DW_ReadAllRegisters+0xa0>
 80003cc:	2301      	movs	r3, #1
 80003ce:	e054      	b.n	800047a <DW_ReadAllRegisters+0x14a>
    if (DW_ReadReg(DW_REG_RX_FWTO, (uint8_t*)&regs->RX_FWTO, 2) != HAL_OK) return HAL_ERROR;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	331e      	adds	r3, #30
 80003d4:	2202      	movs	r2, #2
 80003d6:	4619      	mov	r1, r3
 80003d8:	200c      	movs	r0, #12
 80003da:	f7ff feb7 	bl	800014c <DW_ReadReg>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <DW_ReadAllRegisters+0xb8>
 80003e4:	2301      	movs	r3, #1
 80003e6:	e048      	b.n	800047a <DW_ReadAllRegisters+0x14a>

    /* System Control */
    if (DW_ReadReg(DW_REG_SYS_CTRL, (uint8_t*)&regs->SYS_CTRL, 4) != HAL_OK) return HAL_ERROR;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	3320      	adds	r3, #32
 80003ec:	2204      	movs	r2, #4
 80003ee:	4619      	mov	r1, r3
 80003f0:	200d      	movs	r0, #13
 80003f2:	f7ff feab 	bl	800014c <DW_ReadReg>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <DW_ReadAllRegisters+0xd0>
 80003fc:	2301      	movs	r3, #1
 80003fe:	e03c      	b.n	800047a <DW_ReadAllRegisters+0x14a>
    if (DW_ReadReg(DW_REG_SYS_MASK, (uint8_t*)&regs->SYS_MASK, 4) != HAL_OK) return HAL_ERROR;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3324      	adds	r3, #36	@ 0x24
 8000404:	2204      	movs	r2, #4
 8000406:	4619      	mov	r1, r3
 8000408:	200e      	movs	r0, #14
 800040a:	f7ff fe9f 	bl	800014c <DW_ReadReg>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <DW_ReadAllRegisters+0xe8>
 8000414:	2301      	movs	r3, #1
 8000416:	e030      	b.n	800047a <DW_ReadAllRegisters+0x14a>
    if (DW_ReadReg(DW_REG_SYS_STATUS, regs->SYS_STATUS, 5) != HAL_OK) return HAL_ERROR;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3328      	adds	r3, #40	@ 0x28
 800041c:	2205      	movs	r2, #5
 800041e:	4619      	mov	r1, r3
 8000420:	200f      	movs	r0, #15
 8000422:	f7ff fe93 	bl	800014c <DW_ReadReg>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <DW_ReadAllRegisters+0x100>
 800042c:	2301      	movs	r3, #1
 800042e:	e024      	b.n	800047a <DW_ReadAllRegisters+0x14a>

    /* Channel Control */
    if (DW_ReadReg(DW_REG_TX_POWER, regs->TX_POWER, 4) != HAL_OK) return HAL_ERROR;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	332d      	adds	r3, #45	@ 0x2d
 8000434:	2204      	movs	r2, #4
 8000436:	4619      	mov	r1, r3
 8000438:	201e      	movs	r0, #30
 800043a:	f7ff fe87 	bl	800014c <DW_ReadReg>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <DW_ReadAllRegisters+0x118>
 8000444:	2301      	movs	r3, #1
 8000446:	e018      	b.n	800047a <DW_ReadAllRegisters+0x14a>
    if (DW_ReadReg(DW_REG_CHAN_CTRL, (uint8_t*)&regs->CHAN_CTRL, 4) != HAL_OK) return HAL_ERROR;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3334      	adds	r3, #52	@ 0x34
 800044c:	2204      	movs	r2, #4
 800044e:	4619      	mov	r1, r3
 8000450:	201f      	movs	r0, #31
 8000452:	f7ff fe7b 	bl	800014c <DW_ReadReg>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <DW_ReadAllRegisters+0x130>
 800045c:	2301      	movs	r3, #1
 800045e:	e00c      	b.n	800047a <DW_ReadAllRegisters+0x14a>

    /* Power Management */
    if (DW_ReadReg(DW_REG_PMSC, regs->PMSC, 48) != HAL_OK) return HAL_ERROR;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	3338      	adds	r3, #56	@ 0x38
 8000464:	2230      	movs	r2, #48	@ 0x30
 8000466:	4619      	mov	r1, r3
 8000468:	2036      	movs	r0, #54	@ 0x36
 800046a:	f7ff fe6f 	bl	800014c <DW_ReadReg>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <DW_ReadAllRegisters+0x148>
 8000474:	2301      	movs	r3, #1
 8000476:	e000      	b.n	800047a <DW_ReadAllRegisters+0x14a>

    /* Add reads for other important registers */

    return HAL_OK;
 8000478:	2300      	movs	r3, #0
}
 800047a:	4618      	mov	r0, r3
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <DW_WriteAndVerifyEUI>:
  * @brief  Writes EUI and verifies the write operation
  * @param  eui: Pointer to 8-byte EUI data
  * @retval HAL_OK if write and verification succeed, HAL_ERROR on failure
  */
HAL_StatusTypeDef DW_WriteAndVerifyEUI(uint8_t* eui)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b084      	sub	sp, #16
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
    uint8_t read_back_eui[8];

    /* Step 1: Write the EUI */
    if (DW_WriteReg(DW_REG_EUI, eui, 8) != HAL_OK) {
 800048a:	2208      	movs	r2, #8
 800048c:	6879      	ldr	r1, [r7, #4]
 800048e:	2001      	movs	r0, #1
 8000490:	f7ff feaa 	bl	80001e8 <DW_WriteReg>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <DW_WriteAndVerifyEUI+0x1c>
        return HAL_ERROR;
 800049a:	2301      	movs	r3, #1
 800049c:	e01a      	b.n	80004d4 <DW_WriteAndVerifyEUI+0x52>
    }

    /* Step 2: Read back the EUI */
    if (DW_ReadReg(DW_REG_EUI, read_back_eui, 8) != HAL_OK) {
 800049e:	f107 0308 	add.w	r3, r7, #8
 80004a2:	2208      	movs	r2, #8
 80004a4:	4619      	mov	r1, r3
 80004a6:	2001      	movs	r0, #1
 80004a8:	f7ff fe50 	bl	800014c <DW_ReadReg>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <DW_WriteAndVerifyEUI+0x34>
        return HAL_ERROR;
 80004b2:	2301      	movs	r3, #1
 80004b4:	e00e      	b.n	80004d4 <DW_WriteAndVerifyEUI+0x52>
    }

    /* Step 3: Verify the written data */
    if (!DW_CompareEUI(eui, read_back_eui)) {
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	4619      	mov	r1, r3
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f000 f80d 	bl	80004dc <DW_CompareEUI>
 80004c2:	4603      	mov	r3, r0
 80004c4:	f083 0301 	eor.w	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <DW_WriteAndVerifyEUI+0x50>
        return HAL_ERROR;
 80004ce:	2301      	movs	r3, #1
 80004d0:	e000      	b.n	80004d4 <DW_WriteAndVerifyEUI+0x52>
    }

    return HAL_OK;
 80004d2:	2300      	movs	r3, #0
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3710      	adds	r7, #16
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <DW_CompareEUI>:
  * @param  eui1: First EUI to compare
  * @param  eui2: Second EUI to compare
  * @retval true if EUIs match, false otherwise
  */
bool DW_CompareEUI(uint8_t* eui1, uint8_t* eui2)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < 8; i++) {
 80004e6:	2300      	movs	r3, #0
 80004e8:	73fb      	strb	r3, [r7, #15]
 80004ea:	e00e      	b.n	800050a <DW_CompareEUI+0x2e>
        if (eui1[i] != eui2[i]) {
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	781a      	ldrb	r2, [r3, #0]
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	6839      	ldr	r1, [r7, #0]
 80004f8:	440b      	add	r3, r1
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d001      	beq.n	8000504 <DW_CompareEUI+0x28>
            return false;
 8000500:	2300      	movs	r3, #0
 8000502:	e006      	b.n	8000512 <DW_CompareEUI+0x36>
    for (uint8_t i = 0; i < 8; i++) {
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	3301      	adds	r3, #1
 8000508:	73fb      	strb	r3, [r7, #15]
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	2b07      	cmp	r3, #7
 800050e:	d9ed      	bls.n	80004ec <DW_CompareEUI+0x10>
        }
    }
    return true;
 8000510:	2301      	movs	r3, #1
}
 8000512:	4618      	mov	r0, r3
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <DW_EnableTxMode>:
  * @brief  Configures DW1000 for transmission
  * @param  mode: Transmission mode (standard/delayed/response)
  * @retval HAL_OK if successful, HAL_ERROR on failure
  */
HAL_StatusTypeDef DW_EnableTxMode(DW_TxMode_t mode)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
    /* 1. Configure System Control Register (SYS_CTRL) */
    uint32_t sys_ctrl = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]

    /* Read current SYS_CTRL */
    if (DW_ReadReg(DW_REG_SYS_CTRL, (uint8_t*)&sys_ctrl, 4) != HAL_OK) {
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	2204      	movs	r2, #4
 8000530:	4619      	mov	r1, r3
 8000532:	200d      	movs	r0, #13
 8000534:	f7ff fe0a 	bl	800014c <DW_ReadReg>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <DW_EnableTxMode+0x26>
        return HAL_ERROR;
 800053e:	2301      	movs	r3, #1
 8000540:	e056      	b.n	80005f0 <DW_EnableTxMode+0xd4>
    }

    /* Set TX mode bits (clear RX bits) */
    sys_ctrl &= ~(SYS_CTRL_RXEN | SYS_CTRL_RXDLYE);  // Disable RX
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	f023 0382 	bic.w	r3, r3, #130	@ 0x82
 8000548:	61fb      	str	r3, [r7, #28]
    sys_ctrl |= SYS_CTRL_TXEN;                       // Enable TX
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	61fb      	str	r3, [r7, #28]

    /* Mode-specific configurations */
    switch(mode) {
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d002      	beq.n	800055e <DW_EnableTxMode+0x42>
 8000558:	2b02      	cmp	r3, #2
 800055a:	d005      	beq.n	8000568 <DW_EnableTxMode+0x4c>
        case DW_TX_MODE_RESPONSE:
            sys_ctrl |= SYS_CTRL_TRXOFF;  // Disable transceiver
            // Additional response mode config
            break;
        default: // Standard mode
            break;
 800055c:	e009      	b.n	8000572 <DW_EnableTxMode+0x56>
            sys_ctrl |= SYS_CTRL_TXDLYE;  // Enable delayed TX
 800055e:	69fb      	ldr	r3, [r7, #28]
 8000560:	f043 0320 	orr.w	r3, r3, #32
 8000564:	61fb      	str	r3, [r7, #28]
            break;
 8000566:	e004      	b.n	8000572 <DW_EnableTxMode+0x56>
            sys_ctrl |= SYS_CTRL_TRXOFF;  // Disable transceiver
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800056e:	61fb      	str	r3, [r7, #28]
            break;
 8000570:	bf00      	nop
    }

    /* Write back SYS_CTRL */
    if (DW_WriteReg(DW_REG_SYS_CTRL, (uint8_t*)&sys_ctrl, 4) != HAL_OK) {
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2204      	movs	r2, #4
 8000578:	4619      	mov	r1, r3
 800057a:	200d      	movs	r0, #13
 800057c:	f7ff fe34 	bl	80001e8 <DW_WriteReg>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <DW_EnableTxMode+0x6e>
        return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	e032      	b.n	80005f0 <DW_EnableTxMode+0xd4>
    }

    /* 2. Configure Frame Control Register (TX_FCTRL) */
    uint8_t tx_fctrl[5] = {0};
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	2300      	movs	r3, #0
 8000590:	763b      	strb	r3, [r7, #24]
    tx_fctrl[0] = 0x00;  // Standard frame control
 8000592:	2300      	movs	r3, #0
 8000594:	753b      	strb	r3, [r7, #20]
    tx_fctrl[1] = 0x00;  // Frame length will be set during send
 8000596:	2300      	movs	r3, #0
 8000598:	757b      	strb	r3, [r7, #21]

    if (DW_WriteReg(DW_REG_TX_FCTRL, tx_fctrl, 5) != HAL_OK) {
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	2205      	movs	r2, #5
 80005a0:	4619      	mov	r1, r3
 80005a2:	2008      	movs	r0, #8
 80005a4:	f7ff fe20 	bl	80001e8 <DW_WriteReg>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <DW_EnableTxMode+0x96>
        return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	e01e      	b.n	80005f0 <DW_EnableTxMode+0xd4>
    }

    /* 3. Configure Channel and TX Power */
    uint32_t chan_ctrl = DW_CHAN_CTRL_TX_CHAN_5 | DW_CHAN_CTRL_TX_PRF_64MHZ;
 80005b2:	f240 2301 	movw	r3, #513	@ 0x201
 80005b6:	613b      	str	r3, [r7, #16]
    if (DW_WriteReg(DW_REG_CHAN_CTRL, (uint8_t*)&chan_ctrl, 4) != HAL_OK) {
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	2204      	movs	r2, #4
 80005be:	4619      	mov	r1, r3
 80005c0:	201f      	movs	r0, #31
 80005c2:	f7ff fe11 	bl	80001e8 <DW_WriteReg>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <DW_EnableTxMode+0xb4>
        return HAL_ERROR;
 80005cc:	2301      	movs	r3, #1
 80005ce:	e00f      	b.n	80005f0 <DW_EnableTxMode+0xd4>
    }

    uint8_t tx_power[4] = {0x1F, 0x1F, 0x1F, 0x1F}; // Max power
 80005d0:	f04f 331f 	mov.w	r3, #522133279	@ 0x1f1f1f1f
 80005d4:	60fb      	str	r3, [r7, #12]
    if (DW_WriteReg(DW_REG_TX_POWER, tx_power, 4) != HAL_OK) {
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	2204      	movs	r2, #4
 80005dc:	4619      	mov	r1, r3
 80005de:	201e      	movs	r0, #30
 80005e0:	f7ff fe02 	bl	80001e8 <DW_WriteReg>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <DW_EnableTxMode+0xd2>
        return HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
 80005ec:	e000      	b.n	80005f0 <DW_EnableTxMode+0xd4>
    }

    return HAL_OK;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <DW_DisableTxMode>:
/**
  * @brief  Disables transmission mode
  * @retval HAL_OK if successful, HAL_ERROR on failure
  */
HAL_StatusTypeDef DW_DisableTxMode(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
    uint32_t sys_ctrl = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]

    if (DW_ReadReg(DW_REG_SYS_CTRL, (uint8_t*)&sys_ctrl, 4) != HAL_OK) {
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2204      	movs	r2, #4
 8000606:	4619      	mov	r1, r3
 8000608:	200d      	movs	r0, #13
 800060a:	f7ff fd9f 	bl	800014c <DW_ReadReg>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <DW_DisableTxMode+0x20>
        return HAL_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	e00b      	b.n	8000630 <DW_DisableTxMode+0x38>
    }

    sys_ctrl &= ~(SYS_CTRL_TXEN | SYS_CTRL_TXDLYE);  // Clear TX bits
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f023 0321 	bic.w	r3, r3, #33	@ 0x21
 800061e:	607b      	str	r3, [r7, #4]

    return DW_WriteReg(DW_REG_SYS_CTRL, (uint8_t*)&sys_ctrl, 4);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2204      	movs	r2, #4
 8000624:	4619      	mov	r1, r3
 8000626:	200d      	movs	r0, #13
 8000628:	f7ff fdde 	bl	80001e8 <DW_WriteReg>
 800062c:	4603      	mov	r3, r0
 800062e:	b2db      	uxtb	r3, r3
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fadb 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f873 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 f8e1 	bl	800080c <MX_GPIO_Init>
  MX_SPI1_Init();
 800064a:	f000 f8a9 	bl	80007a0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  DevID= DW_ReadDevID();
 800064e:	f7ff fe1d 	bl	800028c <DW_ReadDevID>
 8000652:	4603      	mov	r3, r0
 8000654:	4a2d      	ldr	r2, [pc, #180]	@ (800070c <main+0xd4>)
 8000656:	6013      	str	r3, [r2, #0]
  DW_ReadReg(DW_REG_SYS_CFG, sys_cfg, sizeof(sys_cfg));
 8000658:	2204      	movs	r2, #4
 800065a:	492d      	ldr	r1, [pc, #180]	@ (8000710 <main+0xd8>)
 800065c:	2004      	movs	r0, #4
 800065e:	f7ff fd75 	bl	800014c <DW_ReadReg>
  DW_ReadAllRegisters(&dw_registers);
 8000662:	482c      	ldr	r0, [pc, #176]	@ (8000714 <main+0xdc>)
 8000664:	f7ff fe64 	bl	8000330 <DW_ReadAllRegisters>

  /* In your application code */
  uint8_t eui[8] = {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF};
 8000668:	4a2b      	ldr	r2, [pc, #172]	@ (8000718 <main+0xe0>)
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000672:	e883 0003 	stmia.w	r3, {r0, r1}

  if (DW_WriteAndVerifyEUI(eui) == HAL_OK) {
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ff01 	bl	8000482 <DW_WriteAndVerifyEUI>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d105      	bne.n	8000692 <main+0x5a>
	  DW_ReadReg(DW_REG_EUI, current_eui, 8);
 8000686:	2208      	movs	r2, #8
 8000688:	4924      	ldr	r1, [pc, #144]	@ (800071c <main+0xe4>)
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff fd5e 	bl	800014c <DW_ReadReg>
 8000690:	e02d      	b.n	80006ee <main+0xb6>
  } else {


      /* Debug output */

      DW_ReadReg(DW_REG_EUI, current_eui, 8);
 8000692:	2208      	movs	r2, #8
 8000694:	4921      	ldr	r1, [pc, #132]	@ (800071c <main+0xe4>)
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff fd58 	bl	800014c <DW_ReadReg>

      for (int i = 0; i < 8; i++) printf("%02X ", eui[i]);
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	e00b      	b.n	80006ba <main+0x82>
 80006a2:	f107 0208 	add.w	r2, r7, #8
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	481c      	ldr	r0, [pc, #112]	@ (8000720 <main+0xe8>)
 80006b0:	f001 ffe0 	bl	8002674 <iprintf>
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	3301      	adds	r3, #1
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	2b07      	cmp	r3, #7
 80006be:	ddf0      	ble.n	80006a2 <main+0x6a>
      printf("\nActual:   ");
 80006c0:	4818      	ldr	r0, [pc, #96]	@ (8000724 <main+0xec>)
 80006c2:	f001 ffd7 	bl	8002674 <iprintf>
      for (int i = 0; i < 8; i++) printf("%02X ", current_eui[i]);
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	e00a      	b.n	80006e2 <main+0xaa>
 80006cc:	4a13      	ldr	r2, [pc, #76]	@ (800071c <main+0xe4>)
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	4413      	add	r3, r2
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	4812      	ldr	r0, [pc, #72]	@ (8000720 <main+0xe8>)
 80006d8:	f001 ffcc 	bl	8002674 <iprintf>
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	3301      	adds	r3, #1
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	2b07      	cmp	r3, #7
 80006e6:	ddf1      	ble.n	80006cc <main+0x94>
      printf("\n");
 80006e8:	200a      	movs	r0, #10
 80006ea:	f001 ffd5 	bl	8002698 <putchar>

    /* USER CODE BEGIN 3 */


	  /* Example: Send a UWB frame */
	  uint8_t frame_data[] = {0x41, 0x88, 0x00, 0xCA, 0xDE, 0xAD, 0xBE, 0xEF};
 80006ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000728 <main+0xf0>)
 80006f0:	463b      	mov	r3, r7
 80006f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f6:	e883 0003 	stmia.w	r3, {r0, r1}

	  /* Configure for standard transmission */
	  if (DW_EnableTxMode(DW_TX_MODE_STANDARD) != HAL_OK) {
 80006fa:	2000      	movs	r0, #0
 80006fc:	f7ff ff0e 	bl	800051c <DW_EnableTxMode>

	  }

	  /* Disable TX when done */
	  DW_DisableTxMode();
 8000700:	f7ff ff7a 	bl	80005f8 <DW_DisableTxMode>
	  HAL_Delay(100);
 8000704:	2064      	movs	r0, #100	@ 0x64
 8000706:	f000 fad9 	bl	8000cbc <HAL_Delay>
  {
 800070a:	e7f0      	b.n	80006ee <main+0xb6>
 800070c:	200000dc 	.word	0x200000dc
 8000710:	200000e0 	.word	0x200000e0
 8000714:	200000e4 	.word	0x200000e4
 8000718:	08004090 	.word	0x08004090
 800071c:	2000014c 	.word	0x2000014c
 8000720:	0800407c 	.word	0x0800407c
 8000724:	08004084 	.word	0x08004084
 8000728:	08004098 	.word	0x08004098

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b090      	sub	sp, #64	@ 0x40
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0318 	add.w	r3, r7, #24
 8000736:	2228      	movs	r2, #40	@ 0x28
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fff7 	bl	800272e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074e:	2301      	movs	r3, #1
 8000750:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0318 	add.w	r3, r7, #24
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fd4f 	bl	8001204 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x44>
  {
    Error_Handler();
 800076c:	f000 f8ca 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000774:	2301      	movs	r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f000 ffbd 	bl	8001708 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000794:	f000 f8b6 	bl	8000904 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3740      	adds	r7, #64	@ 0x40
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a4:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007a6:	4a18      	ldr	r2, [pc, #96]	@ (8000808 <MX_SPI1_Init+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007d4:	2210      	movs	r2, #16
 80007d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007ec:	220a      	movs	r2, #10
 80007ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_SPI1_Init+0x64>)
 80007f2:	f001 f8e7 	bl	80019c4 <HAL_SPI_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007fc:	f000 f882 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000084 	.word	0x20000084
 8000808:	40013000 	.word	0x40013000

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000820:	4b34      	ldr	r3, [pc, #208]	@ (80008f4 <MX_GPIO_Init+0xe8>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a33      	ldr	r2, [pc, #204]	@ (80008f4 <MX_GPIO_Init+0xe8>)
 8000826:	f043 0320 	orr.w	r3, r3, #32
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b31      	ldr	r3, [pc, #196]	@ (80008f4 <MX_GPIO_Init+0xe8>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0320 	and.w	r3, r3, #32
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b2e      	ldr	r3, [pc, #184]	@ (80008f4 <MX_GPIO_Init+0xe8>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a2d      	ldr	r2, [pc, #180]	@ (80008f4 <MX_GPIO_Init+0xe8>)
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b2b      	ldr	r3, [pc, #172]	@ (80008f4 <MX_GPIO_Init+0xe8>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000850:	4b28      	ldr	r3, [pc, #160]	@ (80008f4 <MX_GPIO_Init+0xe8>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a27      	ldr	r2, [pc, #156]	@ (80008f4 <MX_GPIO_Init+0xe8>)
 8000856:	f043 0308 	orr.w	r3, r3, #8
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b25      	ldr	r3, [pc, #148]	@ (80008f4 <MX_GPIO_Init+0xe8>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0308 	and.w	r3, r3, #8
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2110      	movs	r1, #16
 800086c:	4822      	ldr	r0, [pc, #136]	@ (80008f8 <MX_GPIO_Init+0xec>)
 800086e:	f000 fcb1 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WAKEUP_GPIO_Port, WAKEUP_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000878:	4820      	ldr	r0, [pc, #128]	@ (80008fc <MX_GPIO_Init+0xf0>)
 800087a:	f000 fcab 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPICS_Pin */
  GPIO_InitStruct.Pin = SPICS_Pin;
 800087e:	2310      	movs	r3, #16
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2302      	movs	r3, #2
 800088c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	4619      	mov	r1, r3
 8000894:	4818      	ldr	r0, [pc, #96]	@ (80008f8 <MX_GPIO_Init+0xec>)
 8000896:	f000 fb19 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPIRQ_Pin */
  GPIO_InitStruct.Pin = SPIRQ_Pin;
 800089a:	2301      	movs	r3, #1
 800089c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089e:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <MX_GPIO_Init+0xf4>)
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRQ_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	4619      	mov	r1, r3
 80008ac:	4813      	ldr	r0, [pc, #76]	@ (80008fc <MX_GPIO_Init+0xf0>)
 80008ae:	f000 fb0d 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : RSTN_Pin EXTON_Pin */
  GPIO_InitStruct.Pin = RSTN_Pin|EXTON_Pin;
 80008b2:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	4619      	mov	r1, r3
 80008c6:	480d      	ldr	r0, [pc, #52]	@ (80008fc <MX_GPIO_Init+0xf0>)
 80008c8:	f000 fb00 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 80008cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2302      	movs	r3, #2
 80008dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_GPIO_Init+0xf0>)
 80008e6:	f000 faf1 	bl	8000ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ea:	bf00      	nop
 80008ec:	3720      	adds	r7, #32
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010800 	.word	0x40010800
 80008fc:	40010c00 	.word	0x40010c00
 8000900:	10110000 	.word	0x10110000

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <Error_Handler+0x8>

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <HAL_MspInit+0x5c>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a14      	ldr	r2, [pc, #80]	@ (800096c <HAL_MspInit+0x5c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b12      	ldr	r3, [pc, #72]	@ (800096c <HAL_MspInit+0x5c>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <HAL_MspInit+0x5c>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	4a0e      	ldr	r2, [pc, #56]	@ (800096c <HAL_MspInit+0x5c>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000938:	61d3      	str	r3, [r2, #28]
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <HAL_MspInit+0x5c>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000946:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <HAL_MspInit+0x60>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	4a04      	ldr	r2, [pc, #16]	@ (8000970 <HAL_MspInit+0x60>)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	40021000 	.word	0x40021000
 8000970:	40010000 	.word	0x40010000

08000974 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a1b      	ldr	r2, [pc, #108]	@ (80009fc <HAL_SPI_MspInit+0x88>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d12f      	bne.n	80009f4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000994:	4b1a      	ldr	r3, [pc, #104]	@ (8000a00 <HAL_SPI_MspInit+0x8c>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a19      	ldr	r2, [pc, #100]	@ (8000a00 <HAL_SPI_MspInit+0x8c>)
 800099a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <HAL_SPI_MspInit+0x8c>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <HAL_SPI_MspInit+0x8c>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a13      	ldr	r2, [pc, #76]	@ (8000a00 <HAL_SPI_MspInit+0x8c>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <HAL_SPI_MspInit+0x8c>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0304 	and.w	r3, r3, #4
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPISCK_Pin|SPIMOSI_Pin;
 80009c4:	23a0      	movs	r3, #160	@ 0xa0
 80009c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	480b      	ldr	r0, [pc, #44]	@ (8000a04 <HAL_SPI_MspInit+0x90>)
 80009d8:	f000 fa78 	bl	8000ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPIMISO_Pin;
 80009dc:	2340      	movs	r3, #64	@ 0x40
 80009de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPIMISO_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4619      	mov	r1, r3
 80009ee:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <HAL_SPI_MspInit+0x90>)
 80009f0:	f000 fa6c 	bl	8000ecc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40013000 	.word	0x40013000
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40010800 	.word	0x40010800

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <NMI_Handler+0x4>

08000a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <MemManage_Handler+0x4>

08000a20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f914 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e00a      	b.n	8000a88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a72:	f3af 8000 	nop.w
 8000a76:	4601      	mov	r1, r0
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	60ba      	str	r2, [r7, #8]
 8000a7e:	b2ca      	uxtb	r2, r1
 8000a80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf0      	blt.n	8000a72 <_read+0x12>
  }

  return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	e009      	b.n	8000ac0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dbf1      	blt.n	8000aac <_write+0x12>
  }
  return len;
 8000ac8:	687b      	ldr	r3, [r7, #4]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_close>:

int _close(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af8:	605a      	str	r2, [r3, #4]
  return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr

08000b06 <_isatty>:

int _isatty(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b085      	sub	sp, #20
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
	...

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	@ (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f001 fe32 	bl	80027cc <__errno>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <_sbrk+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20005000 	.word	0x20005000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	20000154 	.word	0x20000154
 8000b9c:	200002a8 	.word	0x200002a8

08000ba0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bac:	f7ff fff8 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480b      	ldr	r0, [pc, #44]	@ (8000be0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bb2:	490c      	ldr	r1, [pc, #48]	@ (8000be4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000be8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a09      	ldr	r2, [pc, #36]	@ (8000bec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bc8:	4c09      	ldr	r4, [pc, #36]	@ (8000bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f001 fdff 	bl	80027d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bda:	f7ff fd2d 	bl	8000638 <main>
  bx lr
 8000bde:	4770      	bx	lr
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000be8:	080042d4 	.word	0x080042d4
  ldr r2, =_sbss
 8000bec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bf0:	200002a8 	.word	0x200002a8

08000bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_2_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_Init+0x28>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	@ (8000c20 <HAL_Init+0x28>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f92b 	bl	8000e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fe7c 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40022000 	.word	0x40022000

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f935 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 f90b 	bl	8000e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	@ (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a03      	ldr	r2, [pc, #12]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000158 	.word	0x20000158

08000ca8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b02      	ldr	r3, [pc, #8]	@ (8000cb8 <HAL_GetTick+0x10>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	20000158 	.word	0x20000158

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc4:	f7ff fff0 	bl	8000ca8 <HAL_GetTick>
 8000cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd4:	d005      	beq.n	8000ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_Delay+0x44>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4413      	add	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce2:	bf00      	nop
 8000ce4:	f7ff ffe0 	bl	8000ca8 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d8f7      	bhi.n	8000ce4 <HAL_Delay+0x28>
  {
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	@ (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	@ (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	@ 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	@ 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e30:	d301      	bcc.n	8000e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00f      	b.n	8000e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e36:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <SysTick_Config+0x40>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3e:	210f      	movs	r1, #15
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f7ff ff90 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e48:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <SysTick_Config+0x40>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4e:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <SysTick_Config+0x40>)
 8000e50:	2207      	movs	r2, #7
 8000e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010

08000e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff49 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8c:	f7ff ff5e 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f7ff ff90 	bl	8000dbc <NVIC_EncodePriority>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff5f 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ffb0 	bl	8000e20 <SysTick_Config>
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b08b      	sub	sp, #44	@ 0x2c
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ede:	e169      	b.n	80011b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f040 8158 	bne.w	80011ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	4a9a      	ldr	r2, [pc, #616]	@ (800116c <HAL_GPIO_Init+0x2a0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d05e      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
 8000f08:	4a98      	ldr	r2, [pc, #608]	@ (800116c <HAL_GPIO_Init+0x2a0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d875      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f0e:	4a98      	ldr	r2, [pc, #608]	@ (8001170 <HAL_GPIO_Init+0x2a4>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d058      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
 8000f14:	4a96      	ldr	r2, [pc, #600]	@ (8001170 <HAL_GPIO_Init+0x2a4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d86f      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f1a:	4a96      	ldr	r2, [pc, #600]	@ (8001174 <HAL_GPIO_Init+0x2a8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d052      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
 8000f20:	4a94      	ldr	r2, [pc, #592]	@ (8001174 <HAL_GPIO_Init+0x2a8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d869      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f26:	4a94      	ldr	r2, [pc, #592]	@ (8001178 <HAL_GPIO_Init+0x2ac>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d04c      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
 8000f2c:	4a92      	ldr	r2, [pc, #584]	@ (8001178 <HAL_GPIO_Init+0x2ac>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d863      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f32:	4a92      	ldr	r2, [pc, #584]	@ (800117c <HAL_GPIO_Init+0x2b0>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d046      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
 8000f38:	4a90      	ldr	r2, [pc, #576]	@ (800117c <HAL_GPIO_Init+0x2b0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d85d      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f3e:	2b12      	cmp	r3, #18
 8000f40:	d82a      	bhi.n	8000f98 <HAL_GPIO_Init+0xcc>
 8000f42:	2b12      	cmp	r3, #18
 8000f44:	d859      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f46:	a201      	add	r2, pc, #4	@ (adr r2, 8000f4c <HAL_GPIO_Init+0x80>)
 8000f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4c:	08000fc7 	.word	0x08000fc7
 8000f50:	08000fa1 	.word	0x08000fa1
 8000f54:	08000fb3 	.word	0x08000fb3
 8000f58:	08000ff5 	.word	0x08000ff5
 8000f5c:	08000ffb 	.word	0x08000ffb
 8000f60:	08000ffb 	.word	0x08000ffb
 8000f64:	08000ffb 	.word	0x08000ffb
 8000f68:	08000ffb 	.word	0x08000ffb
 8000f6c:	08000ffb 	.word	0x08000ffb
 8000f70:	08000ffb 	.word	0x08000ffb
 8000f74:	08000ffb 	.word	0x08000ffb
 8000f78:	08000ffb 	.word	0x08000ffb
 8000f7c:	08000ffb 	.word	0x08000ffb
 8000f80:	08000ffb 	.word	0x08000ffb
 8000f84:	08000ffb 	.word	0x08000ffb
 8000f88:	08000ffb 	.word	0x08000ffb
 8000f8c:	08000ffb 	.word	0x08000ffb
 8000f90:	08000fa9 	.word	0x08000fa9
 8000f94:	08000fbd 	.word	0x08000fbd
 8000f98:	4a79      	ldr	r2, [pc, #484]	@ (8001180 <HAL_GPIO_Init+0x2b4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d013      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f9e:	e02c      	b.n	8000ffa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	623b      	str	r3, [r7, #32]
          break;
 8000fa6:	e029      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	3304      	adds	r3, #4
 8000fae:	623b      	str	r3, [r7, #32]
          break;
 8000fb0:	e024      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	3308      	adds	r3, #8
 8000fb8:	623b      	str	r3, [r7, #32]
          break;
 8000fba:	e01f      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	330c      	adds	r3, #12
 8000fc2:	623b      	str	r3, [r7, #32]
          break;
 8000fc4:	e01a      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d102      	bne.n	8000fd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	623b      	str	r3, [r7, #32]
          break;
 8000fd2:	e013      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d105      	bne.n	8000fe8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	611a      	str	r2, [r3, #16]
          break;
 8000fe6:	e009      	b.n	8000ffc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69fa      	ldr	r2, [r7, #28]
 8000ff0:	615a      	str	r2, [r3, #20]
          break;
 8000ff2:	e003      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
          break;
 8000ff8:	e000      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          break;
 8000ffa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	2bff      	cmp	r3, #255	@ 0xff
 8001000:	d801      	bhi.n	8001006 <HAL_GPIO_Init+0x13a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	e001      	b.n	800100a <HAL_GPIO_Init+0x13e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3304      	adds	r3, #4
 800100a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	2bff      	cmp	r3, #255	@ 0xff
 8001010:	d802      	bhi.n	8001018 <HAL_GPIO_Init+0x14c>
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	e002      	b.n	800101e <HAL_GPIO_Init+0x152>
 8001018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101a:	3b08      	subs	r3, #8
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	210f      	movs	r1, #15
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	401a      	ands	r2, r3
 8001030:	6a39      	ldr	r1, [r7, #32]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	431a      	orrs	r2, r3
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 80b1 	beq.w	80011ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800104c:	4b4d      	ldr	r3, [pc, #308]	@ (8001184 <HAL_GPIO_Init+0x2b8>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a4c      	ldr	r2, [pc, #304]	@ (8001184 <HAL_GPIO_Init+0x2b8>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b4a      	ldr	r3, [pc, #296]	@ (8001184 <HAL_GPIO_Init+0x2b8>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001064:	4a48      	ldr	r2, [pc, #288]	@ (8001188 <HAL_GPIO_Init+0x2bc>)
 8001066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001070:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a40      	ldr	r2, [pc, #256]	@ (800118c <HAL_GPIO_Init+0x2c0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d013      	beq.n	80010b8 <HAL_GPIO_Init+0x1ec>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a3f      	ldr	r2, [pc, #252]	@ (8001190 <HAL_GPIO_Init+0x2c4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d00d      	beq.n	80010b4 <HAL_GPIO_Init+0x1e8>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a3e      	ldr	r2, [pc, #248]	@ (8001194 <HAL_GPIO_Init+0x2c8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d007      	beq.n	80010b0 <HAL_GPIO_Init+0x1e4>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001198 <HAL_GPIO_Init+0x2cc>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d101      	bne.n	80010ac <HAL_GPIO_Init+0x1e0>
 80010a8:	2303      	movs	r3, #3
 80010aa:	e006      	b.n	80010ba <HAL_GPIO_Init+0x1ee>
 80010ac:	2304      	movs	r3, #4
 80010ae:	e004      	b.n	80010ba <HAL_GPIO_Init+0x1ee>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e002      	b.n	80010ba <HAL_GPIO_Init+0x1ee>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <HAL_GPIO_Init+0x1ee>
 80010b8:	2300      	movs	r3, #0
 80010ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010bc:	f002 0203 	and.w	r2, r2, #3
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	4093      	lsls	r3, r2
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010ca:	492f      	ldr	r1, [pc, #188]	@ (8001188 <HAL_GPIO_Init+0x2bc>)
 80010cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	3302      	adds	r3, #2
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010e4:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <HAL_GPIO_Init+0x2d0>)
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	492c      	ldr	r1, [pc, #176]	@ (800119c <HAL_GPIO_Init+0x2d0>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	608b      	str	r3, [r1, #8]
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010f2:	4b2a      	ldr	r3, [pc, #168]	@ (800119c <HAL_GPIO_Init+0x2d0>)
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	4928      	ldr	r1, [pc, #160]	@ (800119c <HAL_GPIO_Init+0x2d0>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800110c:	4b23      	ldr	r3, [pc, #140]	@ (800119c <HAL_GPIO_Init+0x2d0>)
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	4922      	ldr	r1, [pc, #136]	@ (800119c <HAL_GPIO_Init+0x2d0>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	60cb      	str	r3, [r1, #12]
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800111a:	4b20      	ldr	r3, [pc, #128]	@ (800119c <HAL_GPIO_Init+0x2d0>)
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	43db      	mvns	r3, r3
 8001122:	491e      	ldr	r1, [pc, #120]	@ (800119c <HAL_GPIO_Init+0x2d0>)
 8001124:	4013      	ands	r3, r2
 8001126:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d006      	beq.n	8001142 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001134:	4b19      	ldr	r3, [pc, #100]	@ (800119c <HAL_GPIO_Init+0x2d0>)
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	4918      	ldr	r1, [pc, #96]	@ (800119c <HAL_GPIO_Init+0x2d0>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001142:	4b16      	ldr	r3, [pc, #88]	@ (800119c <HAL_GPIO_Init+0x2d0>)
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	43db      	mvns	r3, r3
 800114a:	4914      	ldr	r1, [pc, #80]	@ (800119c <HAL_GPIO_Init+0x2d0>)
 800114c:	4013      	ands	r3, r2
 800114e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d021      	beq.n	80011a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800115c:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <HAL_GPIO_Init+0x2d0>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	490e      	ldr	r1, [pc, #56]	@ (800119c <HAL_GPIO_Init+0x2d0>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	600b      	str	r3, [r1, #0]
 8001168:	e021      	b.n	80011ae <HAL_GPIO_Init+0x2e2>
 800116a:	bf00      	nop
 800116c:	10320000 	.word	0x10320000
 8001170:	10310000 	.word	0x10310000
 8001174:	10220000 	.word	0x10220000
 8001178:	10210000 	.word	0x10210000
 800117c:	10120000 	.word	0x10120000
 8001180:	10110000 	.word	0x10110000
 8001184:	40021000 	.word	0x40021000
 8001188:	40010000 	.word	0x40010000
 800118c:	40010800 	.word	0x40010800
 8001190:	40010c00 	.word	0x40010c00
 8001194:	40011000 	.word	0x40011000
 8001198:	40011400 	.word	0x40011400
 800119c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <HAL_GPIO_Init+0x304>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	4909      	ldr	r1, [pc, #36]	@ (80011d0 <HAL_GPIO_Init+0x304>)
 80011aa:	4013      	ands	r3, r2
 80011ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b0:	3301      	adds	r3, #1
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ba:	fa22 f303 	lsr.w	r3, r2, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f47f ae8e 	bne.w	8000ee0 <HAL_GPIO_Init+0x14>
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	372c      	adds	r7, #44	@ 0x2c
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	40010400 	.word	0x40010400

080011d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e4:	787b      	ldrb	r3, [r7, #1]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011f0:	e003      	b.n	80011fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	041a      	lsls	r2, r3, #16
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	611a      	str	r2, [r3, #16]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e272      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 8087 	beq.w	8001332 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001224:	4b92      	ldr	r3, [pc, #584]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b04      	cmp	r3, #4
 800122e:	d00c      	beq.n	800124a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001230:	4b8f      	ldr	r3, [pc, #572]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 030c 	and.w	r3, r3, #12
 8001238:	2b08      	cmp	r3, #8
 800123a:	d112      	bne.n	8001262 <HAL_RCC_OscConfig+0x5e>
 800123c:	4b8c      	ldr	r3, [pc, #560]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001248:	d10b      	bne.n	8001262 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124a:	4b89      	ldr	r3, [pc, #548]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d06c      	beq.n	8001330 <HAL_RCC_OscConfig+0x12c>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d168      	bne.n	8001330 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e24c      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800126a:	d106      	bne.n	800127a <HAL_RCC_OscConfig+0x76>
 800126c:	4b80      	ldr	r3, [pc, #512]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a7f      	ldr	r2, [pc, #508]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	e02e      	b.n	80012d8 <HAL_RCC_OscConfig+0xd4>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0x98>
 8001282:	4b7b      	ldr	r3, [pc, #492]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a7a      	ldr	r2, [pc, #488]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b78      	ldr	r3, [pc, #480]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a77      	ldr	r2, [pc, #476]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001294:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e01d      	b.n	80012d8 <HAL_RCC_OscConfig+0xd4>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0xbc>
 80012a6:	4b72      	ldr	r3, [pc, #456]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a71      	ldr	r2, [pc, #452]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e00b      	b.n	80012d8 <HAL_RCC_OscConfig+0xd4>
 80012c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b68      	ldr	r3, [pc, #416]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a67      	ldr	r2, [pc, #412]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d013      	beq.n	8001308 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fce2 	bl	8000ca8 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fcde 	bl	8000ca8 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	@ 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e200      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0xe4>
 8001306:	e014      	b.n	8001332 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fcce 	bl	8000ca8 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fcca 	bl	8000ca8 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	@ 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e1ec      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	4b53      	ldr	r3, [pc, #332]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x10c>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d063      	beq.n	8001406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800133e:	4b4c      	ldr	r3, [pc, #304]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00b      	beq.n	8001362 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800134a:	4b49      	ldr	r3, [pc, #292]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b08      	cmp	r3, #8
 8001354:	d11c      	bne.n	8001390 <HAL_RCC_OscConfig+0x18c>
 8001356:	4b46      	ldr	r3, [pc, #280]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d116      	bne.n	8001390 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001362:	4b43      	ldr	r3, [pc, #268]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <HAL_RCC_OscConfig+0x176>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e1c0      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137a:	4b3d      	ldr	r3, [pc, #244]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4939      	ldr	r1, [pc, #228]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	e03a      	b.n	8001406 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d020      	beq.n	80013da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001398:	4b36      	ldr	r3, [pc, #216]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139e:	f7ff fc83 	bl	8000ca8 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a6:	f7ff fc7f 	bl	8000ca8 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e1a1      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4927      	ldr	r1, [pc, #156]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
 80013d8:	e015      	b.n	8001406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013da:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fc62 	bl	8000ca8 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff fc5e 	bl	8000ca8 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e180      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d03a      	beq.n	8001488 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d019      	beq.n	800144e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141a:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <HAL_RCC_OscConfig+0x274>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001420:	f7ff fc42 	bl	8000ca8 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001428:	f7ff fc3e 	bl	8000ca8 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e160      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <HAL_RCC_OscConfig+0x26c>)
 800143c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001446:	2001      	movs	r0, #1
 8001448:	f000 fa9e 	bl	8001988 <RCC_Delay>
 800144c:	e01c      	b.n	8001488 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <HAL_RCC_OscConfig+0x274>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001454:	f7ff fc28 	bl	8000ca8 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145a:	e00f      	b.n	800147c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800145c:	f7ff fc24 	bl	8000ca8 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d908      	bls.n	800147c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e146      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	42420000 	.word	0x42420000
 8001478:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	4b92      	ldr	r3, [pc, #584]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800147e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1e9      	bne.n	800145c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 80a6 	beq.w	80015e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149a:	4b8b      	ldr	r3, [pc, #556]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10d      	bne.n	80014c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b88      	ldr	r3, [pc, #544]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a87      	ldr	r2, [pc, #540]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b85      	ldr	r3, [pc, #532]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014be:	2301      	movs	r3, #1
 80014c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c2:	4b82      	ldr	r3, [pc, #520]	@ (80016cc <HAL_RCC_OscConfig+0x4c8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d118      	bne.n	8001500 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ce:	4b7f      	ldr	r3, [pc, #508]	@ (80016cc <HAL_RCC_OscConfig+0x4c8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a7e      	ldr	r2, [pc, #504]	@ (80016cc <HAL_RCC_OscConfig+0x4c8>)
 80014d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014da:	f7ff fbe5 	bl	8000ca8 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e2:	f7ff fbe1 	bl	8000ca8 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b64      	cmp	r3, #100	@ 0x64
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e103      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	4b75      	ldr	r3, [pc, #468]	@ (80016cc <HAL_RCC_OscConfig+0x4c8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d106      	bne.n	8001516 <HAL_RCC_OscConfig+0x312>
 8001508:	4b6f      	ldr	r3, [pc, #444]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4a6e      	ldr	r2, [pc, #440]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6213      	str	r3, [r2, #32]
 8001514:	e02d      	b.n	8001572 <HAL_RCC_OscConfig+0x36e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x334>
 800151e:	4b6a      	ldr	r3, [pc, #424]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4a69      	ldr	r2, [pc, #420]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	f023 0301 	bic.w	r3, r3, #1
 8001528:	6213      	str	r3, [r2, #32]
 800152a:	4b67      	ldr	r3, [pc, #412]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4a66      	ldr	r2, [pc, #408]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	f023 0304 	bic.w	r3, r3, #4
 8001534:	6213      	str	r3, [r2, #32]
 8001536:	e01c      	b.n	8001572 <HAL_RCC_OscConfig+0x36e>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b05      	cmp	r3, #5
 800153e:	d10c      	bne.n	800155a <HAL_RCC_OscConfig+0x356>
 8001540:	4b61      	ldr	r3, [pc, #388]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4a60      	ldr	r2, [pc, #384]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6213      	str	r3, [r2, #32]
 800154c:	4b5e      	ldr	r3, [pc, #376]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4a5d      	ldr	r2, [pc, #372]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6213      	str	r3, [r2, #32]
 8001558:	e00b      	b.n	8001572 <HAL_RCC_OscConfig+0x36e>
 800155a:	4b5b      	ldr	r3, [pc, #364]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4a5a      	ldr	r2, [pc, #360]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	6213      	str	r3, [r2, #32]
 8001566:	4b58      	ldr	r3, [pc, #352]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	4a57      	ldr	r2, [pc, #348]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	f023 0304 	bic.w	r3, r3, #4
 8001570:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d015      	beq.n	80015a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157a:	f7ff fb95 	bl	8000ca8 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001580:	e00a      	b.n	8001598 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001582:	f7ff fb91 	bl	8000ca8 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001590:	4293      	cmp	r3, r2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e0b1      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001598:	4b4b      	ldr	r3, [pc, #300]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0ee      	beq.n	8001582 <HAL_RCC_OscConfig+0x37e>
 80015a4:	e014      	b.n	80015d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fb7f 	bl	8000ca8 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ac:	e00a      	b.n	80015c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ae:	f7ff fb7b 	bl	8000ca8 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015bc:	4293      	cmp	r3, r2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e09b      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c4:	4b40      	ldr	r3, [pc, #256]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1ee      	bne.n	80015ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d105      	bne.n	80015e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d6:	4b3c      	ldr	r3, [pc, #240]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a3b      	ldr	r2, [pc, #236]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 8087 	beq.w	80016fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ec:	4b36      	ldr	r3, [pc, #216]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d061      	beq.n	80016bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d146      	bne.n	800168e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001600:	4b33      	ldr	r3, [pc, #204]	@ (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff fb4f 	bl	8000ca8 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160e:	f7ff fb4b 	bl	8000ca8 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e06d      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001620:	4b29      	ldr	r3, [pc, #164]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001634:	d108      	bne.n	8001648 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001636:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	4921      	ldr	r1, [pc, #132]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001648:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a19      	ldr	r1, [r3, #32]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001658:	430b      	orrs	r3, r1
 800165a:	491b      	ldr	r1, [pc, #108]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001666:	f7ff fb1f 	bl	8000ca8 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166e:	f7ff fb1b 	bl	8000ca8 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e03d      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001680:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x46a>
 800168c:	e035      	b.n	80016fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fb08 	bl	8000ca8 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169c:	f7ff fb04 	bl	8000ca8 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e026      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x498>
 80016ba:	e01e      	b.n	80016fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d107      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e019      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40007000 	.word	0x40007000
 80016d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <HAL_RCC_OscConfig+0x500>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0d0      	b.n	80018be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800171c:	4b6a      	ldr	r3, [pc, #424]	@ (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d910      	bls.n	800174c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b67      	ldr	r3, [pc, #412]	@ (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 0207 	bic.w	r2, r3, #7
 8001732:	4965      	ldr	r1, [pc, #404]	@ (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b63      	ldr	r3, [pc, #396]	@ (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0b8      	b.n	80018be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d020      	beq.n	800179a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001764:	4b59      	ldr	r3, [pc, #356]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4a58      	ldr	r2, [pc, #352]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800176e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800177c:	4b53      	ldr	r3, [pc, #332]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4a52      	ldr	r2, [pc, #328]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001786:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001788:	4b50      	ldr	r3, [pc, #320]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	494d      	ldr	r1, [pc, #308]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d040      	beq.n	8001828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	4b47      	ldr	r3, [pc, #284]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d115      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e07f      	b.n	80018be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c6:	4b41      	ldr	r3, [pc, #260]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e073      	b.n	80018be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d6:	4b3d      	ldr	r3, [pc, #244]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e06b      	b.n	80018be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017e6:	4b39      	ldr	r3, [pc, #228]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f023 0203 	bic.w	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4936      	ldr	r1, [pc, #216]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f8:	f7ff fa56 	bl	8000ca8 <HAL_GetTick>
 80017fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001800:	f7ff fa52 	bl	8000ca8 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e053      	b.n	80018be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	4b2d      	ldr	r3, [pc, #180]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 020c 	and.w	r2, r3, #12
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	429a      	cmp	r2, r3
 8001826:	d1eb      	bne.n	8001800 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001828:	4b27      	ldr	r3, [pc, #156]	@ (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d210      	bcs.n	8001858 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 0207 	bic.w	r2, r3, #7
 800183e:	4922      	ldr	r1, [pc, #136]	@ (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e032      	b.n	80018be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001864:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4916      	ldr	r1, [pc, #88]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	4313      	orrs	r3, r2
 8001874:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001882:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	490e      	ldr	r1, [pc, #56]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001896:	f000 f821 	bl	80018dc <HAL_RCC_GetSysClockFreq>
 800189a:	4602      	mov	r2, r0
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	490a      	ldr	r1, [pc, #40]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 80018a8:	5ccb      	ldrb	r3, [r1, r3]
 80018aa:	fa22 f303 	lsr.w	r3, r2, r3
 80018ae:	4a09      	ldr	r2, [pc, #36]	@ (80018d4 <HAL_RCC_ClockConfig+0x1cc>)
 80018b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018b2:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <HAL_RCC_ClockConfig+0x1d0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f9b4 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40022000 	.word	0x40022000
 80018cc:	40021000 	.word	0x40021000
 80018d0:	08004274 	.word	0x08004274
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000004 	.word	0x20000004

080018dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x94>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b04      	cmp	r3, #4
 8001904:	d002      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0x30>
 8001906:	2b08      	cmp	r3, #8
 8001908:	d003      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x36>
 800190a:	e027      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800190c:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x98>)
 800190e:	613b      	str	r3, [r7, #16]
      break;
 8001910:	e027      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	0c9b      	lsrs	r3, r3, #18
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	4a17      	ldr	r2, [pc, #92]	@ (8001978 <HAL_RCC_GetSysClockFreq+0x9c>)
 800191c:	5cd3      	ldrb	r3, [r2, r3]
 800191e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d010      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800192a:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x94>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	0c5b      	lsrs	r3, r3, #17
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	4a11      	ldr	r2, [pc, #68]	@ (800197c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001936:	5cd3      	ldrb	r3, [r2, r3]
 8001938:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x98>)
 800193e:	fb03 f202 	mul.w	r2, r3, r2
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e004      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a0c      	ldr	r2, [pc, #48]	@ (8001980 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	613b      	str	r3, [r7, #16]
      break;
 800195a:	e002      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xa8>)
 800195e:	613b      	str	r3, [r7, #16]
      break;
 8001960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001962:	693b      	ldr	r3, [r7, #16]
}
 8001964:	4618      	mov	r0, r3
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	00f42400 	.word	0x00f42400
 8001978:	08004284 	.word	0x08004284
 800197c:	08004294 	.word	0x08004294
 8001980:	003d0900 	.word	0x003d0900
 8001984:	007a1200 	.word	0x007a1200

08001988 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001990:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <RCC_Delay+0x34>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <RCC_Delay+0x38>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	0a5b      	lsrs	r3, r3, #9
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019a4:	bf00      	nop
  }
  while (Delay --);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1e5a      	subs	r2, r3, #1
 80019aa:	60fa      	str	r2, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f9      	bne.n	80019a4 <RCC_Delay+0x1c>
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	20000000 	.word	0x20000000
 80019c0:	10624dd3 	.word	0x10624dd3

080019c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e076      	b.n	8001ac4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d108      	bne.n	80019f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80019e6:	d009      	beq.n	80019fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
 80019ee:	e005      	b.n	80019fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d106      	bne.n	8001a1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7fe ffac 	bl	8000974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a80:	ea42 0103 	orr.w	r1, r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	0c1a      	lsrs	r2, r3, #16
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f002 0204 	and.w	r2, r2, #4
 8001aa2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	69da      	ldr	r2, [r3, #28]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ab2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001adc:	f7ff f8e4 	bl	8000ca8 <HAL_GetTick>
 8001ae0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d001      	beq.n	8001af6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001af2:	2302      	movs	r3, #2
 8001af4:	e12a      	b.n	8001d4c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <HAL_SPI_Transmit+0x36>
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e122      	b.n	8001d4c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_SPI_Transmit+0x48>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e11b      	b.n	8001d4c <HAL_SPI_Transmit+0x280>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2203      	movs	r2, #3
 8001b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	88fa      	ldrh	r2, [r7, #6]
 8001b34:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	88fa      	ldrh	r2, [r7, #6]
 8001b3a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b62:	d10f      	bne.n	8001b84 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b8e:	2b40      	cmp	r3, #64	@ 0x40
 8001b90:	d007      	beq.n	8001ba2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001baa:	d152      	bne.n	8001c52 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_SPI_Transmit+0xee>
 8001bb4:	8b7b      	ldrh	r3, [r7, #26]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d145      	bne.n	8001c46 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbe:	881a      	ldrh	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	1c9a      	adds	r2, r3, #2
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001bde:	e032      	b.n	8001c46 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d112      	bne.n	8001c14 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	881a      	ldrh	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	1c9a      	adds	r2, r3, #2
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001c12:	e018      	b.n	8001c46 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c14:	f7ff f848 	bl	8000ca8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d803      	bhi.n	8001c2c <HAL_SPI_Transmit+0x160>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2a:	d102      	bne.n	8001c32 <HAL_SPI_Transmit+0x166>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e082      	b.n	8001d4c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1c7      	bne.n	8001be0 <HAL_SPI_Transmit+0x114>
 8001c50:	e053      	b.n	8001cfa <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <HAL_SPI_Transmit+0x194>
 8001c5a:	8b7b      	ldrh	r3, [r7, #26]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d147      	bne.n	8001cf0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	330c      	adds	r3, #12
 8001c6a:	7812      	ldrb	r2, [r2, #0]
 8001c6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c86:	e033      	b.n	8001cf0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d113      	bne.n	8001cbe <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	330c      	adds	r3, #12
 8001ca0:	7812      	ldrb	r2, [r2, #0]
 8001ca2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001cbc:	e018      	b.n	8001cf0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cbe:	f7fe fff3 	bl	8000ca8 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d803      	bhi.n	8001cd6 <HAL_SPI_Transmit+0x20a>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd4:	d102      	bne.n	8001cdc <HAL_SPI_Transmit+0x210>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e02d      	b.n	8001d4c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1c6      	bne.n	8001c88 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 fbc4 	bl	800248c <SPI_EndRxTxTransaction>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10a      	bne.n	8001d2e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
  }
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	4613      	mov	r3, r2
 8001d62:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d001      	beq.n	8001d74 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001d70:	2302      	movs	r3, #2
 8001d72:	e104      	b.n	8001f7e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d7c:	d112      	bne.n	8001da4 <HAL_SPI_Receive+0x50>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10e      	bne.n	8001da4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2204      	movs	r2, #4
 8001d8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001d8e:	88fa      	ldrh	r2, [r7, #6]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	4613      	mov	r3, r2
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f8f3 	bl	8001f86 <HAL_SPI_TransmitReceive>
 8001da0:	4603      	mov	r3, r0
 8001da2:	e0ec      	b.n	8001f7e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001da4:	f7fe ff80 	bl	8000ca8 <HAL_GetTick>
 8001da8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <HAL_SPI_Receive+0x62>
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e0e1      	b.n	8001f7e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_SPI_Receive+0x74>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e0da      	b.n	8001f7e <HAL_SPI_Receive+0x22a>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	88fa      	ldrh	r2, [r7, #6]
 8001de8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	88fa      	ldrh	r2, [r7, #6]
 8001dee:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e16:	d10f      	bne.n	8001e38 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001e36:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e42:	2b40      	cmp	r3, #64	@ 0x40
 8001e44:	d007      	beq.n	8001e56 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d170      	bne.n	8001f40 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001e5e:	e035      	b.n	8001ecc <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d115      	bne.n	8001e9a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f103 020c 	add.w	r2, r3, #12
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e7a:	7812      	ldrb	r2, [r2, #0]
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001e98:	e018      	b.n	8001ecc <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e9a:	f7fe ff05 	bl	8000ca8 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d803      	bhi.n	8001eb2 <HAL_SPI_Receive+0x15e>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d102      	bne.n	8001eb8 <HAL_SPI_Receive+0x164>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d109      	bne.n	8001ecc <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e058      	b.n	8001f7e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1c4      	bne.n	8001e60 <HAL_SPI_Receive+0x10c>
 8001ed6:	e038      	b.n	8001f4a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d113      	bne.n	8001f0e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef0:	b292      	uxth	r2, r2
 8001ef2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef8:	1c9a      	adds	r2, r3, #2
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001f0c:	e018      	b.n	8001f40 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f0e:	f7fe fecb 	bl	8000ca8 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d803      	bhi.n	8001f26 <HAL_SPI_Receive+0x1d2>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f24:	d102      	bne.n	8001f2c <HAL_SPI_Receive+0x1d8>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d109      	bne.n	8001f40 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e01e      	b.n	8001f7e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1c6      	bne.n	8001ed8 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	6839      	ldr	r1, [r7, #0]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 fa4a 	bl	80023e8 <SPI_EndRxTransaction>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
  }
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b08a      	sub	sp, #40	@ 0x28
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f94:	2301      	movs	r3, #1
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f98:	f7fe fe86 	bl	8000ca8 <HAL_GetTick>
 8001f9c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fa4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001fb0:	7ffb      	ldrb	r3, [r7, #31]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d00c      	beq.n	8001fd0 <HAL_SPI_TransmitReceive+0x4a>
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fbc:	d106      	bne.n	8001fcc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d102      	bne.n	8001fcc <HAL_SPI_TransmitReceive+0x46>
 8001fc6:	7ffb      	ldrb	r3, [r7, #31]
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d001      	beq.n	8001fd0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e17f      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_SPI_TransmitReceive+0x5c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <HAL_SPI_TransmitReceive+0x5c>
 8001fdc:	887b      	ldrh	r3, [r7, #2]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e174      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_SPI_TransmitReceive+0x6e>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e16d      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x34a>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b04      	cmp	r3, #4
 8002006:	d003      	beq.n	8002010 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2205      	movs	r2, #5
 800200c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	887a      	ldrh	r2, [r7, #2]
 8002026:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	887a      	ldrh	r2, [r7, #2]
 8002032:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002050:	2b40      	cmp	r3, #64	@ 0x40
 8002052:	d007      	beq.n	8002064 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002062:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800206c:	d17e      	bne.n	800216c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <HAL_SPI_TransmitReceive+0xf6>
 8002076:	8afb      	ldrh	r3, [r7, #22]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d16c      	bne.n	8002156 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	881a      	ldrh	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208c:	1c9a      	adds	r2, r3, #2
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020a0:	e059      	b.n	8002156 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d11b      	bne.n	80020e8 <HAL_SPI_TransmitReceive+0x162>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d016      	beq.n	80020e8 <HAL_SPI_TransmitReceive+0x162>
 80020ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d113      	bne.n	80020e8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c4:	881a      	ldrh	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d0:	1c9a      	adds	r2, r3, #2
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d119      	bne.n	800212a <HAL_SPI_TransmitReceive+0x1a4>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d014      	beq.n	800212a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800210a:	b292      	uxth	r2, r2
 800210c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002112:	1c9a      	adds	r2, r3, #2
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800211c:	b29b      	uxth	r3, r3
 800211e:	3b01      	subs	r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002126:	2301      	movs	r3, #1
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800212a:	f7fe fdbd 	bl	8000ca8 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002136:	429a      	cmp	r2, r3
 8002138:	d80d      	bhi.n	8002156 <HAL_SPI_TransmitReceive+0x1d0>
 800213a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d009      	beq.n	8002156 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e0bc      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1a0      	bne.n	80020a2 <HAL_SPI_TransmitReceive+0x11c>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d19b      	bne.n	80020a2 <HAL_SPI_TransmitReceive+0x11c>
 800216a:	e082      	b.n	8002272 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <HAL_SPI_TransmitReceive+0x1f4>
 8002174:	8afb      	ldrh	r3, [r7, #22]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d171      	bne.n	800225e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	330c      	adds	r3, #12
 8002184:	7812      	ldrb	r2, [r2, #0]
 8002186:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021a0:	e05d      	b.n	800225e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d11c      	bne.n	80021ea <HAL_SPI_TransmitReceive+0x264>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d017      	beq.n	80021ea <HAL_SPI_TransmitReceive+0x264>
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d114      	bne.n	80021ea <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	330c      	adds	r3, #12
 80021ca:	7812      	ldrb	r2, [r2, #0]
 80021cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d119      	bne.n	800222c <HAL_SPI_TransmitReceive+0x2a6>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d014      	beq.n	800222c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002228:	2301      	movs	r3, #1
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800222c:	f7fe fd3c 	bl	8000ca8 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002238:	429a      	cmp	r2, r3
 800223a:	d803      	bhi.n	8002244 <HAL_SPI_TransmitReceive+0x2be>
 800223c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002242:	d102      	bne.n	800224a <HAL_SPI_TransmitReceive+0x2c4>
 8002244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002246:	2b00      	cmp	r3, #0
 8002248:	d109      	bne.n	800225e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e038      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d19c      	bne.n	80021a2 <HAL_SPI_TransmitReceive+0x21c>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800226c:	b29b      	uxth	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d197      	bne.n	80021a2 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002272:	6a3a      	ldr	r2, [r7, #32]
 8002274:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f908 	bl	800248c <SPI_EndRxTxTransaction>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2220      	movs	r2, #32
 8002286:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e01d      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10a      	bne.n	80022b2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80022ce:	2300      	movs	r3, #0
  }
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3728      	adds	r7, #40	@ 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022e8:	f7fe fcde 	bl	8000ca8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	4413      	add	r3, r2
 80022f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022f8:	f7fe fcd6 	bl	8000ca8 <HAL_GetTick>
 80022fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022fe:	4b39      	ldr	r3, [pc, #228]	@ (80023e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	015b      	lsls	r3, r3, #5
 8002304:	0d1b      	lsrs	r3, r3, #20
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	fb02 f303 	mul.w	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800230e:	e054      	b.n	80023ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d050      	beq.n	80023ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002318:	f7fe fcc6 	bl	8000ca8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	429a      	cmp	r2, r3
 8002326:	d902      	bls.n	800232e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d13d      	bne.n	80023aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800233c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002346:	d111      	bne.n	800236c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002350:	d004      	beq.n	800235c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800235a:	d107      	bne.n	800236c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800236a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002374:	d10f      	bne.n	8002396 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002394:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e017      	b.n	80023da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4013      	ands	r3, r2
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	bf0c      	ite	eq
 80023ca:	2301      	moveq	r3, #1
 80023cc:	2300      	movne	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d19b      	bne.n	8002310 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3720      	adds	r7, #32
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000000 	.word	0x20000000

080023e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023fc:	d111      	bne.n	8002422 <SPI_EndRxTransaction+0x3a>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002406:	d004      	beq.n	8002412 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002410:	d107      	bne.n	8002422 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002420:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800242a:	d117      	bne.n	800245c <SPI_EndRxTransaction+0x74>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002434:	d112      	bne.n	800245c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2200      	movs	r2, #0
 800243e:	2101      	movs	r1, #1
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f7ff ff49 	bl	80022d8 <SPI_WaitFlagStateUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01a      	beq.n	8002482 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002450:	f043 0220 	orr.w	r2, r3, #32
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e013      	b.n	8002484 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2200      	movs	r2, #0
 8002464:	2180      	movs	r1, #128	@ 0x80
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f7ff ff36 	bl	80022d8 <SPI_WaitFlagStateUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002476:	f043 0220 	orr.w	r2, r3, #32
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e000      	b.n	8002484 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2201      	movs	r2, #1
 80024a0:	2102      	movs	r1, #2
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f7ff ff18 	bl	80022d8 <SPI_WaitFlagStateUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b2:	f043 0220 	orr.w	r2, r3, #32
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e013      	b.n	80024e6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2200      	movs	r2, #0
 80024c6:	2180      	movs	r1, #128	@ 0x80
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f7ff ff05 	bl	80022d8 <SPI_WaitFlagStateUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d8:	f043 0220 	orr.w	r2, r3, #32
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e000      	b.n	80024e6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <std>:
 80024f0:	2300      	movs	r3, #0
 80024f2:	b510      	push	{r4, lr}
 80024f4:	4604      	mov	r4, r0
 80024f6:	e9c0 3300 	strd	r3, r3, [r0]
 80024fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024fe:	6083      	str	r3, [r0, #8]
 8002500:	8181      	strh	r1, [r0, #12]
 8002502:	6643      	str	r3, [r0, #100]	@ 0x64
 8002504:	81c2      	strh	r2, [r0, #14]
 8002506:	6183      	str	r3, [r0, #24]
 8002508:	4619      	mov	r1, r3
 800250a:	2208      	movs	r2, #8
 800250c:	305c      	adds	r0, #92	@ 0x5c
 800250e:	f000 f90e 	bl	800272e <memset>
 8002512:	4b0d      	ldr	r3, [pc, #52]	@ (8002548 <std+0x58>)
 8002514:	6224      	str	r4, [r4, #32]
 8002516:	6263      	str	r3, [r4, #36]	@ 0x24
 8002518:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <std+0x5c>)
 800251a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800251c:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <std+0x60>)
 800251e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002520:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <std+0x64>)
 8002522:	6323      	str	r3, [r4, #48]	@ 0x30
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <std+0x68>)
 8002526:	429c      	cmp	r4, r3
 8002528:	d006      	beq.n	8002538 <std+0x48>
 800252a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800252e:	4294      	cmp	r4, r2
 8002530:	d002      	beq.n	8002538 <std+0x48>
 8002532:	33d0      	adds	r3, #208	@ 0xd0
 8002534:	429c      	cmp	r4, r3
 8002536:	d105      	bne.n	8002544 <std+0x54>
 8002538:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800253c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002540:	f000 b96e 	b.w	8002820 <__retarget_lock_init_recursive>
 8002544:	bd10      	pop	{r4, pc}
 8002546:	bf00      	nop
 8002548:	080026a9 	.word	0x080026a9
 800254c:	080026cb 	.word	0x080026cb
 8002550:	08002703 	.word	0x08002703
 8002554:	08002727 	.word	0x08002727
 8002558:	2000015c 	.word	0x2000015c

0800255c <stdio_exit_handler>:
 800255c:	4a02      	ldr	r2, [pc, #8]	@ (8002568 <stdio_exit_handler+0xc>)
 800255e:	4903      	ldr	r1, [pc, #12]	@ (800256c <stdio_exit_handler+0x10>)
 8002560:	4803      	ldr	r0, [pc, #12]	@ (8002570 <stdio_exit_handler+0x14>)
 8002562:	f000 b869 	b.w	8002638 <_fwalk_sglue>
 8002566:	bf00      	nop
 8002568:	2000000c 	.word	0x2000000c
 800256c:	080030b9 	.word	0x080030b9
 8002570:	2000001c 	.word	0x2000001c

08002574 <cleanup_stdio>:
 8002574:	6841      	ldr	r1, [r0, #4]
 8002576:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <cleanup_stdio+0x34>)
 8002578:	b510      	push	{r4, lr}
 800257a:	4299      	cmp	r1, r3
 800257c:	4604      	mov	r4, r0
 800257e:	d001      	beq.n	8002584 <cleanup_stdio+0x10>
 8002580:	f000 fd9a 	bl	80030b8 <_fflush_r>
 8002584:	68a1      	ldr	r1, [r4, #8]
 8002586:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <cleanup_stdio+0x38>)
 8002588:	4299      	cmp	r1, r3
 800258a:	d002      	beq.n	8002592 <cleanup_stdio+0x1e>
 800258c:	4620      	mov	r0, r4
 800258e:	f000 fd93 	bl	80030b8 <_fflush_r>
 8002592:	68e1      	ldr	r1, [r4, #12]
 8002594:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <cleanup_stdio+0x3c>)
 8002596:	4299      	cmp	r1, r3
 8002598:	d004      	beq.n	80025a4 <cleanup_stdio+0x30>
 800259a:	4620      	mov	r0, r4
 800259c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025a0:	f000 bd8a 	b.w	80030b8 <_fflush_r>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	bf00      	nop
 80025a8:	2000015c 	.word	0x2000015c
 80025ac:	200001c4 	.word	0x200001c4
 80025b0:	2000022c 	.word	0x2000022c

080025b4 <global_stdio_init.part.0>:
 80025b4:	b510      	push	{r4, lr}
 80025b6:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <global_stdio_init.part.0+0x30>)
 80025b8:	4c0b      	ldr	r4, [pc, #44]	@ (80025e8 <global_stdio_init.part.0+0x34>)
 80025ba:	4a0c      	ldr	r2, [pc, #48]	@ (80025ec <global_stdio_init.part.0+0x38>)
 80025bc:	4620      	mov	r0, r4
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	2104      	movs	r1, #4
 80025c2:	2200      	movs	r2, #0
 80025c4:	f7ff ff94 	bl	80024f0 <std>
 80025c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80025cc:	2201      	movs	r2, #1
 80025ce:	2109      	movs	r1, #9
 80025d0:	f7ff ff8e 	bl	80024f0 <std>
 80025d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80025d8:	2202      	movs	r2, #2
 80025da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025de:	2112      	movs	r1, #18
 80025e0:	f7ff bf86 	b.w	80024f0 <std>
 80025e4:	20000294 	.word	0x20000294
 80025e8:	2000015c 	.word	0x2000015c
 80025ec:	0800255d 	.word	0x0800255d

080025f0 <__sfp_lock_acquire>:
 80025f0:	4801      	ldr	r0, [pc, #4]	@ (80025f8 <__sfp_lock_acquire+0x8>)
 80025f2:	f000 b916 	b.w	8002822 <__retarget_lock_acquire_recursive>
 80025f6:	bf00      	nop
 80025f8:	2000029d 	.word	0x2000029d

080025fc <__sfp_lock_release>:
 80025fc:	4801      	ldr	r0, [pc, #4]	@ (8002604 <__sfp_lock_release+0x8>)
 80025fe:	f000 b911 	b.w	8002824 <__retarget_lock_release_recursive>
 8002602:	bf00      	nop
 8002604:	2000029d 	.word	0x2000029d

08002608 <__sinit>:
 8002608:	b510      	push	{r4, lr}
 800260a:	4604      	mov	r4, r0
 800260c:	f7ff fff0 	bl	80025f0 <__sfp_lock_acquire>
 8002610:	6a23      	ldr	r3, [r4, #32]
 8002612:	b11b      	cbz	r3, 800261c <__sinit+0x14>
 8002614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002618:	f7ff bff0 	b.w	80025fc <__sfp_lock_release>
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <__sinit+0x28>)
 800261e:	6223      	str	r3, [r4, #32]
 8002620:	4b04      	ldr	r3, [pc, #16]	@ (8002634 <__sinit+0x2c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f5      	bne.n	8002614 <__sinit+0xc>
 8002628:	f7ff ffc4 	bl	80025b4 <global_stdio_init.part.0>
 800262c:	e7f2      	b.n	8002614 <__sinit+0xc>
 800262e:	bf00      	nop
 8002630:	08002575 	.word	0x08002575
 8002634:	20000294 	.word	0x20000294

08002638 <_fwalk_sglue>:
 8002638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800263c:	4607      	mov	r7, r0
 800263e:	4688      	mov	r8, r1
 8002640:	4614      	mov	r4, r2
 8002642:	2600      	movs	r6, #0
 8002644:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002648:	f1b9 0901 	subs.w	r9, r9, #1
 800264c:	d505      	bpl.n	800265a <_fwalk_sglue+0x22>
 800264e:	6824      	ldr	r4, [r4, #0]
 8002650:	2c00      	cmp	r4, #0
 8002652:	d1f7      	bne.n	8002644 <_fwalk_sglue+0xc>
 8002654:	4630      	mov	r0, r6
 8002656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800265a:	89ab      	ldrh	r3, [r5, #12]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d907      	bls.n	8002670 <_fwalk_sglue+0x38>
 8002660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002664:	3301      	adds	r3, #1
 8002666:	d003      	beq.n	8002670 <_fwalk_sglue+0x38>
 8002668:	4629      	mov	r1, r5
 800266a:	4638      	mov	r0, r7
 800266c:	47c0      	blx	r8
 800266e:	4306      	orrs	r6, r0
 8002670:	3568      	adds	r5, #104	@ 0x68
 8002672:	e7e9      	b.n	8002648 <_fwalk_sglue+0x10>

08002674 <iprintf>:
 8002674:	b40f      	push	{r0, r1, r2, r3}
 8002676:	b507      	push	{r0, r1, r2, lr}
 8002678:	4906      	ldr	r1, [pc, #24]	@ (8002694 <iprintf+0x20>)
 800267a:	ab04      	add	r3, sp, #16
 800267c:	6808      	ldr	r0, [r1, #0]
 800267e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002682:	6881      	ldr	r1, [r0, #8]
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	f000 f9ed 	bl	8002a64 <_vfiprintf_r>
 800268a:	b003      	add	sp, #12
 800268c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002690:	b004      	add	sp, #16
 8002692:	4770      	bx	lr
 8002694:	20000018 	.word	0x20000018

08002698 <putchar>:
 8002698:	4b02      	ldr	r3, [pc, #8]	@ (80026a4 <putchar+0xc>)
 800269a:	4601      	mov	r1, r0
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	6882      	ldr	r2, [r0, #8]
 80026a0:	f000 bd32 	b.w	8003108 <_putc_r>
 80026a4:	20000018 	.word	0x20000018

080026a8 <__sread>:
 80026a8:	b510      	push	{r4, lr}
 80026aa:	460c      	mov	r4, r1
 80026ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026b0:	f000 f868 	bl	8002784 <_read_r>
 80026b4:	2800      	cmp	r0, #0
 80026b6:	bfab      	itete	ge
 80026b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80026ba:	89a3      	ldrhlt	r3, [r4, #12]
 80026bc:	181b      	addge	r3, r3, r0
 80026be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80026c2:	bfac      	ite	ge
 80026c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80026c6:	81a3      	strhlt	r3, [r4, #12]
 80026c8:	bd10      	pop	{r4, pc}

080026ca <__swrite>:
 80026ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026ce:	461f      	mov	r7, r3
 80026d0:	898b      	ldrh	r3, [r1, #12]
 80026d2:	4605      	mov	r5, r0
 80026d4:	05db      	lsls	r3, r3, #23
 80026d6:	460c      	mov	r4, r1
 80026d8:	4616      	mov	r6, r2
 80026da:	d505      	bpl.n	80026e8 <__swrite+0x1e>
 80026dc:	2302      	movs	r3, #2
 80026de:	2200      	movs	r2, #0
 80026e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026e4:	f000 f83c 	bl	8002760 <_lseek_r>
 80026e8:	89a3      	ldrh	r3, [r4, #12]
 80026ea:	4632      	mov	r2, r6
 80026ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026f0:	81a3      	strh	r3, [r4, #12]
 80026f2:	4628      	mov	r0, r5
 80026f4:	463b      	mov	r3, r7
 80026f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026fe:	f000 b853 	b.w	80027a8 <_write_r>

08002702 <__sseek>:
 8002702:	b510      	push	{r4, lr}
 8002704:	460c      	mov	r4, r1
 8002706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800270a:	f000 f829 	bl	8002760 <_lseek_r>
 800270e:	1c43      	adds	r3, r0, #1
 8002710:	89a3      	ldrh	r3, [r4, #12]
 8002712:	bf15      	itete	ne
 8002714:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002716:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800271a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800271e:	81a3      	strheq	r3, [r4, #12]
 8002720:	bf18      	it	ne
 8002722:	81a3      	strhne	r3, [r4, #12]
 8002724:	bd10      	pop	{r4, pc}

08002726 <__sclose>:
 8002726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800272a:	f000 b809 	b.w	8002740 <_close_r>

0800272e <memset>:
 800272e:	4603      	mov	r3, r0
 8002730:	4402      	add	r2, r0
 8002732:	4293      	cmp	r3, r2
 8002734:	d100      	bne.n	8002738 <memset+0xa>
 8002736:	4770      	bx	lr
 8002738:	f803 1b01 	strb.w	r1, [r3], #1
 800273c:	e7f9      	b.n	8002732 <memset+0x4>
	...

08002740 <_close_r>:
 8002740:	b538      	push	{r3, r4, r5, lr}
 8002742:	2300      	movs	r3, #0
 8002744:	4d05      	ldr	r5, [pc, #20]	@ (800275c <_close_r+0x1c>)
 8002746:	4604      	mov	r4, r0
 8002748:	4608      	mov	r0, r1
 800274a:	602b      	str	r3, [r5, #0]
 800274c:	f7fe f9c1 	bl	8000ad2 <_close>
 8002750:	1c43      	adds	r3, r0, #1
 8002752:	d102      	bne.n	800275a <_close_r+0x1a>
 8002754:	682b      	ldr	r3, [r5, #0]
 8002756:	b103      	cbz	r3, 800275a <_close_r+0x1a>
 8002758:	6023      	str	r3, [r4, #0]
 800275a:	bd38      	pop	{r3, r4, r5, pc}
 800275c:	20000298 	.word	0x20000298

08002760 <_lseek_r>:
 8002760:	b538      	push	{r3, r4, r5, lr}
 8002762:	4604      	mov	r4, r0
 8002764:	4608      	mov	r0, r1
 8002766:	4611      	mov	r1, r2
 8002768:	2200      	movs	r2, #0
 800276a:	4d05      	ldr	r5, [pc, #20]	@ (8002780 <_lseek_r+0x20>)
 800276c:	602a      	str	r2, [r5, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	f7fe f9d3 	bl	8000b1a <_lseek>
 8002774:	1c43      	adds	r3, r0, #1
 8002776:	d102      	bne.n	800277e <_lseek_r+0x1e>
 8002778:	682b      	ldr	r3, [r5, #0]
 800277a:	b103      	cbz	r3, 800277e <_lseek_r+0x1e>
 800277c:	6023      	str	r3, [r4, #0]
 800277e:	bd38      	pop	{r3, r4, r5, pc}
 8002780:	20000298 	.word	0x20000298

08002784 <_read_r>:
 8002784:	b538      	push	{r3, r4, r5, lr}
 8002786:	4604      	mov	r4, r0
 8002788:	4608      	mov	r0, r1
 800278a:	4611      	mov	r1, r2
 800278c:	2200      	movs	r2, #0
 800278e:	4d05      	ldr	r5, [pc, #20]	@ (80027a4 <_read_r+0x20>)
 8002790:	602a      	str	r2, [r5, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	f7fe f964 	bl	8000a60 <_read>
 8002798:	1c43      	adds	r3, r0, #1
 800279a:	d102      	bne.n	80027a2 <_read_r+0x1e>
 800279c:	682b      	ldr	r3, [r5, #0]
 800279e:	b103      	cbz	r3, 80027a2 <_read_r+0x1e>
 80027a0:	6023      	str	r3, [r4, #0]
 80027a2:	bd38      	pop	{r3, r4, r5, pc}
 80027a4:	20000298 	.word	0x20000298

080027a8 <_write_r>:
 80027a8:	b538      	push	{r3, r4, r5, lr}
 80027aa:	4604      	mov	r4, r0
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	2200      	movs	r2, #0
 80027b2:	4d05      	ldr	r5, [pc, #20]	@ (80027c8 <_write_r+0x20>)
 80027b4:	602a      	str	r2, [r5, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	f7fe f96f 	bl	8000a9a <_write>
 80027bc:	1c43      	adds	r3, r0, #1
 80027be:	d102      	bne.n	80027c6 <_write_r+0x1e>
 80027c0:	682b      	ldr	r3, [r5, #0]
 80027c2:	b103      	cbz	r3, 80027c6 <_write_r+0x1e>
 80027c4:	6023      	str	r3, [r4, #0]
 80027c6:	bd38      	pop	{r3, r4, r5, pc}
 80027c8:	20000298 	.word	0x20000298

080027cc <__errno>:
 80027cc:	4b01      	ldr	r3, [pc, #4]	@ (80027d4 <__errno+0x8>)
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20000018 	.word	0x20000018

080027d8 <__libc_init_array>:
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	2600      	movs	r6, #0
 80027dc:	4d0c      	ldr	r5, [pc, #48]	@ (8002810 <__libc_init_array+0x38>)
 80027de:	4c0d      	ldr	r4, [pc, #52]	@ (8002814 <__libc_init_array+0x3c>)
 80027e0:	1b64      	subs	r4, r4, r5
 80027e2:	10a4      	asrs	r4, r4, #2
 80027e4:	42a6      	cmp	r6, r4
 80027e6:	d109      	bne.n	80027fc <__libc_init_array+0x24>
 80027e8:	f000 fdf8 	bl	80033dc <_init>
 80027ec:	2600      	movs	r6, #0
 80027ee:	4d0a      	ldr	r5, [pc, #40]	@ (8002818 <__libc_init_array+0x40>)
 80027f0:	4c0a      	ldr	r4, [pc, #40]	@ (800281c <__libc_init_array+0x44>)
 80027f2:	1b64      	subs	r4, r4, r5
 80027f4:	10a4      	asrs	r4, r4, #2
 80027f6:	42a6      	cmp	r6, r4
 80027f8:	d105      	bne.n	8002806 <__libc_init_array+0x2e>
 80027fa:	bd70      	pop	{r4, r5, r6, pc}
 80027fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002800:	4798      	blx	r3
 8002802:	3601      	adds	r6, #1
 8002804:	e7ee      	b.n	80027e4 <__libc_init_array+0xc>
 8002806:	f855 3b04 	ldr.w	r3, [r5], #4
 800280a:	4798      	blx	r3
 800280c:	3601      	adds	r6, #1
 800280e:	e7f2      	b.n	80027f6 <__libc_init_array+0x1e>
 8002810:	080042cc 	.word	0x080042cc
 8002814:	080042cc 	.word	0x080042cc
 8002818:	080042cc 	.word	0x080042cc
 800281c:	080042d0 	.word	0x080042d0

08002820 <__retarget_lock_init_recursive>:
 8002820:	4770      	bx	lr

08002822 <__retarget_lock_acquire_recursive>:
 8002822:	4770      	bx	lr

08002824 <__retarget_lock_release_recursive>:
 8002824:	4770      	bx	lr
	...

08002828 <_free_r>:
 8002828:	b538      	push	{r3, r4, r5, lr}
 800282a:	4605      	mov	r5, r0
 800282c:	2900      	cmp	r1, #0
 800282e:	d040      	beq.n	80028b2 <_free_r+0x8a>
 8002830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002834:	1f0c      	subs	r4, r1, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	bfb8      	it	lt
 800283a:	18e4      	addlt	r4, r4, r3
 800283c:	f000 f8de 	bl	80029fc <__malloc_lock>
 8002840:	4a1c      	ldr	r2, [pc, #112]	@ (80028b4 <_free_r+0x8c>)
 8002842:	6813      	ldr	r3, [r2, #0]
 8002844:	b933      	cbnz	r3, 8002854 <_free_r+0x2c>
 8002846:	6063      	str	r3, [r4, #4]
 8002848:	6014      	str	r4, [r2, #0]
 800284a:	4628      	mov	r0, r5
 800284c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002850:	f000 b8da 	b.w	8002a08 <__malloc_unlock>
 8002854:	42a3      	cmp	r3, r4
 8002856:	d908      	bls.n	800286a <_free_r+0x42>
 8002858:	6820      	ldr	r0, [r4, #0]
 800285a:	1821      	adds	r1, r4, r0
 800285c:	428b      	cmp	r3, r1
 800285e:	bf01      	itttt	eq
 8002860:	6819      	ldreq	r1, [r3, #0]
 8002862:	685b      	ldreq	r3, [r3, #4]
 8002864:	1809      	addeq	r1, r1, r0
 8002866:	6021      	streq	r1, [r4, #0]
 8002868:	e7ed      	b.n	8002846 <_free_r+0x1e>
 800286a:	461a      	mov	r2, r3
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	b10b      	cbz	r3, 8002874 <_free_r+0x4c>
 8002870:	42a3      	cmp	r3, r4
 8002872:	d9fa      	bls.n	800286a <_free_r+0x42>
 8002874:	6811      	ldr	r1, [r2, #0]
 8002876:	1850      	adds	r0, r2, r1
 8002878:	42a0      	cmp	r0, r4
 800287a:	d10b      	bne.n	8002894 <_free_r+0x6c>
 800287c:	6820      	ldr	r0, [r4, #0]
 800287e:	4401      	add	r1, r0
 8002880:	1850      	adds	r0, r2, r1
 8002882:	4283      	cmp	r3, r0
 8002884:	6011      	str	r1, [r2, #0]
 8002886:	d1e0      	bne.n	800284a <_free_r+0x22>
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4408      	add	r0, r1
 800288e:	6010      	str	r0, [r2, #0]
 8002890:	6053      	str	r3, [r2, #4]
 8002892:	e7da      	b.n	800284a <_free_r+0x22>
 8002894:	d902      	bls.n	800289c <_free_r+0x74>
 8002896:	230c      	movs	r3, #12
 8002898:	602b      	str	r3, [r5, #0]
 800289a:	e7d6      	b.n	800284a <_free_r+0x22>
 800289c:	6820      	ldr	r0, [r4, #0]
 800289e:	1821      	adds	r1, r4, r0
 80028a0:	428b      	cmp	r3, r1
 80028a2:	bf01      	itttt	eq
 80028a4:	6819      	ldreq	r1, [r3, #0]
 80028a6:	685b      	ldreq	r3, [r3, #4]
 80028a8:	1809      	addeq	r1, r1, r0
 80028aa:	6021      	streq	r1, [r4, #0]
 80028ac:	6063      	str	r3, [r4, #4]
 80028ae:	6054      	str	r4, [r2, #4]
 80028b0:	e7cb      	b.n	800284a <_free_r+0x22>
 80028b2:	bd38      	pop	{r3, r4, r5, pc}
 80028b4:	200002a4 	.word	0x200002a4

080028b8 <sbrk_aligned>:
 80028b8:	b570      	push	{r4, r5, r6, lr}
 80028ba:	4e0f      	ldr	r6, [pc, #60]	@ (80028f8 <sbrk_aligned+0x40>)
 80028bc:	460c      	mov	r4, r1
 80028be:	6831      	ldr	r1, [r6, #0]
 80028c0:	4605      	mov	r5, r0
 80028c2:	b911      	cbnz	r1, 80028ca <sbrk_aligned+0x12>
 80028c4:	f000 fce8 	bl	8003298 <_sbrk_r>
 80028c8:	6030      	str	r0, [r6, #0]
 80028ca:	4621      	mov	r1, r4
 80028cc:	4628      	mov	r0, r5
 80028ce:	f000 fce3 	bl	8003298 <_sbrk_r>
 80028d2:	1c43      	adds	r3, r0, #1
 80028d4:	d103      	bne.n	80028de <sbrk_aligned+0x26>
 80028d6:	f04f 34ff 	mov.w	r4, #4294967295
 80028da:	4620      	mov	r0, r4
 80028dc:	bd70      	pop	{r4, r5, r6, pc}
 80028de:	1cc4      	adds	r4, r0, #3
 80028e0:	f024 0403 	bic.w	r4, r4, #3
 80028e4:	42a0      	cmp	r0, r4
 80028e6:	d0f8      	beq.n	80028da <sbrk_aligned+0x22>
 80028e8:	1a21      	subs	r1, r4, r0
 80028ea:	4628      	mov	r0, r5
 80028ec:	f000 fcd4 	bl	8003298 <_sbrk_r>
 80028f0:	3001      	adds	r0, #1
 80028f2:	d1f2      	bne.n	80028da <sbrk_aligned+0x22>
 80028f4:	e7ef      	b.n	80028d6 <sbrk_aligned+0x1e>
 80028f6:	bf00      	nop
 80028f8:	200002a0 	.word	0x200002a0

080028fc <_malloc_r>:
 80028fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002900:	1ccd      	adds	r5, r1, #3
 8002902:	f025 0503 	bic.w	r5, r5, #3
 8002906:	3508      	adds	r5, #8
 8002908:	2d0c      	cmp	r5, #12
 800290a:	bf38      	it	cc
 800290c:	250c      	movcc	r5, #12
 800290e:	2d00      	cmp	r5, #0
 8002910:	4606      	mov	r6, r0
 8002912:	db01      	blt.n	8002918 <_malloc_r+0x1c>
 8002914:	42a9      	cmp	r1, r5
 8002916:	d904      	bls.n	8002922 <_malloc_r+0x26>
 8002918:	230c      	movs	r3, #12
 800291a:	6033      	str	r3, [r6, #0]
 800291c:	2000      	movs	r0, #0
 800291e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002922:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80029f8 <_malloc_r+0xfc>
 8002926:	f000 f869 	bl	80029fc <__malloc_lock>
 800292a:	f8d8 3000 	ldr.w	r3, [r8]
 800292e:	461c      	mov	r4, r3
 8002930:	bb44      	cbnz	r4, 8002984 <_malloc_r+0x88>
 8002932:	4629      	mov	r1, r5
 8002934:	4630      	mov	r0, r6
 8002936:	f7ff ffbf 	bl	80028b8 <sbrk_aligned>
 800293a:	1c43      	adds	r3, r0, #1
 800293c:	4604      	mov	r4, r0
 800293e:	d158      	bne.n	80029f2 <_malloc_r+0xf6>
 8002940:	f8d8 4000 	ldr.w	r4, [r8]
 8002944:	4627      	mov	r7, r4
 8002946:	2f00      	cmp	r7, #0
 8002948:	d143      	bne.n	80029d2 <_malloc_r+0xd6>
 800294a:	2c00      	cmp	r4, #0
 800294c:	d04b      	beq.n	80029e6 <_malloc_r+0xea>
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	4639      	mov	r1, r7
 8002952:	4630      	mov	r0, r6
 8002954:	eb04 0903 	add.w	r9, r4, r3
 8002958:	f000 fc9e 	bl	8003298 <_sbrk_r>
 800295c:	4581      	cmp	r9, r0
 800295e:	d142      	bne.n	80029e6 <_malloc_r+0xea>
 8002960:	6821      	ldr	r1, [r4, #0]
 8002962:	4630      	mov	r0, r6
 8002964:	1a6d      	subs	r5, r5, r1
 8002966:	4629      	mov	r1, r5
 8002968:	f7ff ffa6 	bl	80028b8 <sbrk_aligned>
 800296c:	3001      	adds	r0, #1
 800296e:	d03a      	beq.n	80029e6 <_malloc_r+0xea>
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	442b      	add	r3, r5
 8002974:	6023      	str	r3, [r4, #0]
 8002976:	f8d8 3000 	ldr.w	r3, [r8]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	bb62      	cbnz	r2, 80029d8 <_malloc_r+0xdc>
 800297e:	f8c8 7000 	str.w	r7, [r8]
 8002982:	e00f      	b.n	80029a4 <_malloc_r+0xa8>
 8002984:	6822      	ldr	r2, [r4, #0]
 8002986:	1b52      	subs	r2, r2, r5
 8002988:	d420      	bmi.n	80029cc <_malloc_r+0xd0>
 800298a:	2a0b      	cmp	r2, #11
 800298c:	d917      	bls.n	80029be <_malloc_r+0xc2>
 800298e:	1961      	adds	r1, r4, r5
 8002990:	42a3      	cmp	r3, r4
 8002992:	6025      	str	r5, [r4, #0]
 8002994:	bf18      	it	ne
 8002996:	6059      	strne	r1, [r3, #4]
 8002998:	6863      	ldr	r3, [r4, #4]
 800299a:	bf08      	it	eq
 800299c:	f8c8 1000 	streq.w	r1, [r8]
 80029a0:	5162      	str	r2, [r4, r5]
 80029a2:	604b      	str	r3, [r1, #4]
 80029a4:	4630      	mov	r0, r6
 80029a6:	f000 f82f 	bl	8002a08 <__malloc_unlock>
 80029aa:	f104 000b 	add.w	r0, r4, #11
 80029ae:	1d23      	adds	r3, r4, #4
 80029b0:	f020 0007 	bic.w	r0, r0, #7
 80029b4:	1ac2      	subs	r2, r0, r3
 80029b6:	bf1c      	itt	ne
 80029b8:	1a1b      	subne	r3, r3, r0
 80029ba:	50a3      	strne	r3, [r4, r2]
 80029bc:	e7af      	b.n	800291e <_malloc_r+0x22>
 80029be:	6862      	ldr	r2, [r4, #4]
 80029c0:	42a3      	cmp	r3, r4
 80029c2:	bf0c      	ite	eq
 80029c4:	f8c8 2000 	streq.w	r2, [r8]
 80029c8:	605a      	strne	r2, [r3, #4]
 80029ca:	e7eb      	b.n	80029a4 <_malloc_r+0xa8>
 80029cc:	4623      	mov	r3, r4
 80029ce:	6864      	ldr	r4, [r4, #4]
 80029d0:	e7ae      	b.n	8002930 <_malloc_r+0x34>
 80029d2:	463c      	mov	r4, r7
 80029d4:	687f      	ldr	r7, [r7, #4]
 80029d6:	e7b6      	b.n	8002946 <_malloc_r+0x4a>
 80029d8:	461a      	mov	r2, r3
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	42a3      	cmp	r3, r4
 80029de:	d1fb      	bne.n	80029d8 <_malloc_r+0xdc>
 80029e0:	2300      	movs	r3, #0
 80029e2:	6053      	str	r3, [r2, #4]
 80029e4:	e7de      	b.n	80029a4 <_malloc_r+0xa8>
 80029e6:	230c      	movs	r3, #12
 80029e8:	4630      	mov	r0, r6
 80029ea:	6033      	str	r3, [r6, #0]
 80029ec:	f000 f80c 	bl	8002a08 <__malloc_unlock>
 80029f0:	e794      	b.n	800291c <_malloc_r+0x20>
 80029f2:	6005      	str	r5, [r0, #0]
 80029f4:	e7d6      	b.n	80029a4 <_malloc_r+0xa8>
 80029f6:	bf00      	nop
 80029f8:	200002a4 	.word	0x200002a4

080029fc <__malloc_lock>:
 80029fc:	4801      	ldr	r0, [pc, #4]	@ (8002a04 <__malloc_lock+0x8>)
 80029fe:	f7ff bf10 	b.w	8002822 <__retarget_lock_acquire_recursive>
 8002a02:	bf00      	nop
 8002a04:	2000029c 	.word	0x2000029c

08002a08 <__malloc_unlock>:
 8002a08:	4801      	ldr	r0, [pc, #4]	@ (8002a10 <__malloc_unlock+0x8>)
 8002a0a:	f7ff bf0b 	b.w	8002824 <__retarget_lock_release_recursive>
 8002a0e:	bf00      	nop
 8002a10:	2000029c 	.word	0x2000029c

08002a14 <__sfputc_r>:
 8002a14:	6893      	ldr	r3, [r2, #8]
 8002a16:	b410      	push	{r4}
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	6093      	str	r3, [r2, #8]
 8002a1e:	da07      	bge.n	8002a30 <__sfputc_r+0x1c>
 8002a20:	6994      	ldr	r4, [r2, #24]
 8002a22:	42a3      	cmp	r3, r4
 8002a24:	db01      	blt.n	8002a2a <__sfputc_r+0x16>
 8002a26:	290a      	cmp	r1, #10
 8002a28:	d102      	bne.n	8002a30 <__sfputc_r+0x1c>
 8002a2a:	bc10      	pop	{r4}
 8002a2c:	f000 bba0 	b.w	8003170 <__swbuf_r>
 8002a30:	6813      	ldr	r3, [r2, #0]
 8002a32:	1c58      	adds	r0, r3, #1
 8002a34:	6010      	str	r0, [r2, #0]
 8002a36:	7019      	strb	r1, [r3, #0]
 8002a38:	4608      	mov	r0, r1
 8002a3a:	bc10      	pop	{r4}
 8002a3c:	4770      	bx	lr

08002a3e <__sfputs_r>:
 8002a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a40:	4606      	mov	r6, r0
 8002a42:	460f      	mov	r7, r1
 8002a44:	4614      	mov	r4, r2
 8002a46:	18d5      	adds	r5, r2, r3
 8002a48:	42ac      	cmp	r4, r5
 8002a4a:	d101      	bne.n	8002a50 <__sfputs_r+0x12>
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	e007      	b.n	8002a60 <__sfputs_r+0x22>
 8002a50:	463a      	mov	r2, r7
 8002a52:	4630      	mov	r0, r6
 8002a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a58:	f7ff ffdc 	bl	8002a14 <__sfputc_r>
 8002a5c:	1c43      	adds	r3, r0, #1
 8002a5e:	d1f3      	bne.n	8002a48 <__sfputs_r+0xa>
 8002a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a64 <_vfiprintf_r>:
 8002a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a68:	460d      	mov	r5, r1
 8002a6a:	4614      	mov	r4, r2
 8002a6c:	4698      	mov	r8, r3
 8002a6e:	4606      	mov	r6, r0
 8002a70:	b09d      	sub	sp, #116	@ 0x74
 8002a72:	b118      	cbz	r0, 8002a7c <_vfiprintf_r+0x18>
 8002a74:	6a03      	ldr	r3, [r0, #32]
 8002a76:	b90b      	cbnz	r3, 8002a7c <_vfiprintf_r+0x18>
 8002a78:	f7ff fdc6 	bl	8002608 <__sinit>
 8002a7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a7e:	07d9      	lsls	r1, r3, #31
 8002a80:	d405      	bmi.n	8002a8e <_vfiprintf_r+0x2a>
 8002a82:	89ab      	ldrh	r3, [r5, #12]
 8002a84:	059a      	lsls	r2, r3, #22
 8002a86:	d402      	bmi.n	8002a8e <_vfiprintf_r+0x2a>
 8002a88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a8a:	f7ff feca 	bl	8002822 <__retarget_lock_acquire_recursive>
 8002a8e:	89ab      	ldrh	r3, [r5, #12]
 8002a90:	071b      	lsls	r3, r3, #28
 8002a92:	d501      	bpl.n	8002a98 <_vfiprintf_r+0x34>
 8002a94:	692b      	ldr	r3, [r5, #16]
 8002a96:	b99b      	cbnz	r3, 8002ac0 <_vfiprintf_r+0x5c>
 8002a98:	4629      	mov	r1, r5
 8002a9a:	4630      	mov	r0, r6
 8002a9c:	f000 fba6 	bl	80031ec <__swsetup_r>
 8002aa0:	b170      	cbz	r0, 8002ac0 <_vfiprintf_r+0x5c>
 8002aa2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002aa4:	07dc      	lsls	r4, r3, #31
 8002aa6:	d504      	bpl.n	8002ab2 <_vfiprintf_r+0x4e>
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	b01d      	add	sp, #116	@ 0x74
 8002aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ab2:	89ab      	ldrh	r3, [r5, #12]
 8002ab4:	0598      	lsls	r0, r3, #22
 8002ab6:	d4f7      	bmi.n	8002aa8 <_vfiprintf_r+0x44>
 8002ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002aba:	f7ff feb3 	bl	8002824 <__retarget_lock_release_recursive>
 8002abe:	e7f3      	b.n	8002aa8 <_vfiprintf_r+0x44>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ac4:	2320      	movs	r3, #32
 8002ac6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002aca:	2330      	movs	r3, #48	@ 0x30
 8002acc:	f04f 0901 	mov.w	r9, #1
 8002ad0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ad4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002c80 <_vfiprintf_r+0x21c>
 8002ad8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002adc:	4623      	mov	r3, r4
 8002ade:	469a      	mov	sl, r3
 8002ae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ae4:	b10a      	cbz	r2, 8002aea <_vfiprintf_r+0x86>
 8002ae6:	2a25      	cmp	r2, #37	@ 0x25
 8002ae8:	d1f9      	bne.n	8002ade <_vfiprintf_r+0x7a>
 8002aea:	ebba 0b04 	subs.w	fp, sl, r4
 8002aee:	d00b      	beq.n	8002b08 <_vfiprintf_r+0xa4>
 8002af0:	465b      	mov	r3, fp
 8002af2:	4622      	mov	r2, r4
 8002af4:	4629      	mov	r1, r5
 8002af6:	4630      	mov	r0, r6
 8002af8:	f7ff ffa1 	bl	8002a3e <__sfputs_r>
 8002afc:	3001      	adds	r0, #1
 8002afe:	f000 80a7 	beq.w	8002c50 <_vfiprintf_r+0x1ec>
 8002b02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002b04:	445a      	add	r2, fp
 8002b06:	9209      	str	r2, [sp, #36]	@ 0x24
 8002b08:	f89a 3000 	ldrb.w	r3, [sl]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 809f 	beq.w	8002c50 <_vfiprintf_r+0x1ec>
 8002b12:	2300      	movs	r3, #0
 8002b14:	f04f 32ff 	mov.w	r2, #4294967295
 8002b18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b1c:	f10a 0a01 	add.w	sl, sl, #1
 8002b20:	9304      	str	r3, [sp, #16]
 8002b22:	9307      	str	r3, [sp, #28]
 8002b24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002b28:	931a      	str	r3, [sp, #104]	@ 0x68
 8002b2a:	4654      	mov	r4, sl
 8002b2c:	2205      	movs	r2, #5
 8002b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b32:	4853      	ldr	r0, [pc, #332]	@ (8002c80 <_vfiprintf_r+0x21c>)
 8002b34:	f000 fbc0 	bl	80032b8 <memchr>
 8002b38:	9a04      	ldr	r2, [sp, #16]
 8002b3a:	b9d8      	cbnz	r0, 8002b74 <_vfiprintf_r+0x110>
 8002b3c:	06d1      	lsls	r1, r2, #27
 8002b3e:	bf44      	itt	mi
 8002b40:	2320      	movmi	r3, #32
 8002b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b46:	0713      	lsls	r3, r2, #28
 8002b48:	bf44      	itt	mi
 8002b4a:	232b      	movmi	r3, #43	@ 0x2b
 8002b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b50:	f89a 3000 	ldrb.w	r3, [sl]
 8002b54:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b56:	d015      	beq.n	8002b84 <_vfiprintf_r+0x120>
 8002b58:	4654      	mov	r4, sl
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f04f 0c0a 	mov.w	ip, #10
 8002b60:	9a07      	ldr	r2, [sp, #28]
 8002b62:	4621      	mov	r1, r4
 8002b64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b68:	3b30      	subs	r3, #48	@ 0x30
 8002b6a:	2b09      	cmp	r3, #9
 8002b6c:	d94b      	bls.n	8002c06 <_vfiprintf_r+0x1a2>
 8002b6e:	b1b0      	cbz	r0, 8002b9e <_vfiprintf_r+0x13a>
 8002b70:	9207      	str	r2, [sp, #28]
 8002b72:	e014      	b.n	8002b9e <_vfiprintf_r+0x13a>
 8002b74:	eba0 0308 	sub.w	r3, r0, r8
 8002b78:	fa09 f303 	lsl.w	r3, r9, r3
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	46a2      	mov	sl, r4
 8002b80:	9304      	str	r3, [sp, #16]
 8002b82:	e7d2      	b.n	8002b2a <_vfiprintf_r+0xc6>
 8002b84:	9b03      	ldr	r3, [sp, #12]
 8002b86:	1d19      	adds	r1, r3, #4
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	9103      	str	r1, [sp, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bfbb      	ittet	lt
 8002b90:	425b      	neglt	r3, r3
 8002b92:	f042 0202 	orrlt.w	r2, r2, #2
 8002b96:	9307      	strge	r3, [sp, #28]
 8002b98:	9307      	strlt	r3, [sp, #28]
 8002b9a:	bfb8      	it	lt
 8002b9c:	9204      	strlt	r2, [sp, #16]
 8002b9e:	7823      	ldrb	r3, [r4, #0]
 8002ba0:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ba2:	d10a      	bne.n	8002bba <_vfiprintf_r+0x156>
 8002ba4:	7863      	ldrb	r3, [r4, #1]
 8002ba6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ba8:	d132      	bne.n	8002c10 <_vfiprintf_r+0x1ac>
 8002baa:	9b03      	ldr	r3, [sp, #12]
 8002bac:	3402      	adds	r4, #2
 8002bae:	1d1a      	adds	r2, r3, #4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	9203      	str	r2, [sp, #12]
 8002bb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002bb8:	9305      	str	r3, [sp, #20]
 8002bba:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002c84 <_vfiprintf_r+0x220>
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	4650      	mov	r0, sl
 8002bc2:	7821      	ldrb	r1, [r4, #0]
 8002bc4:	f000 fb78 	bl	80032b8 <memchr>
 8002bc8:	b138      	cbz	r0, 8002bda <_vfiprintf_r+0x176>
 8002bca:	2240      	movs	r2, #64	@ 0x40
 8002bcc:	9b04      	ldr	r3, [sp, #16]
 8002bce:	eba0 000a 	sub.w	r0, r0, sl
 8002bd2:	4082      	lsls	r2, r0
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	3401      	adds	r4, #1
 8002bd8:	9304      	str	r3, [sp, #16]
 8002bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bde:	2206      	movs	r2, #6
 8002be0:	4829      	ldr	r0, [pc, #164]	@ (8002c88 <_vfiprintf_r+0x224>)
 8002be2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002be6:	f000 fb67 	bl	80032b8 <memchr>
 8002bea:	2800      	cmp	r0, #0
 8002bec:	d03f      	beq.n	8002c6e <_vfiprintf_r+0x20a>
 8002bee:	4b27      	ldr	r3, [pc, #156]	@ (8002c8c <_vfiprintf_r+0x228>)
 8002bf0:	bb1b      	cbnz	r3, 8002c3a <_vfiprintf_r+0x1d6>
 8002bf2:	9b03      	ldr	r3, [sp, #12]
 8002bf4:	3307      	adds	r3, #7
 8002bf6:	f023 0307 	bic.w	r3, r3, #7
 8002bfa:	3308      	adds	r3, #8
 8002bfc:	9303      	str	r3, [sp, #12]
 8002bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c00:	443b      	add	r3, r7
 8002c02:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c04:	e76a      	b.n	8002adc <_vfiprintf_r+0x78>
 8002c06:	460c      	mov	r4, r1
 8002c08:	2001      	movs	r0, #1
 8002c0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c0e:	e7a8      	b.n	8002b62 <_vfiprintf_r+0xfe>
 8002c10:	2300      	movs	r3, #0
 8002c12:	f04f 0c0a 	mov.w	ip, #10
 8002c16:	4619      	mov	r1, r3
 8002c18:	3401      	adds	r4, #1
 8002c1a:	9305      	str	r3, [sp, #20]
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c22:	3a30      	subs	r2, #48	@ 0x30
 8002c24:	2a09      	cmp	r2, #9
 8002c26:	d903      	bls.n	8002c30 <_vfiprintf_r+0x1cc>
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0c6      	beq.n	8002bba <_vfiprintf_r+0x156>
 8002c2c:	9105      	str	r1, [sp, #20]
 8002c2e:	e7c4      	b.n	8002bba <_vfiprintf_r+0x156>
 8002c30:	4604      	mov	r4, r0
 8002c32:	2301      	movs	r3, #1
 8002c34:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c38:	e7f0      	b.n	8002c1c <_vfiprintf_r+0x1b8>
 8002c3a:	ab03      	add	r3, sp, #12
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	462a      	mov	r2, r5
 8002c40:	4630      	mov	r0, r6
 8002c42:	4b13      	ldr	r3, [pc, #76]	@ (8002c90 <_vfiprintf_r+0x22c>)
 8002c44:	a904      	add	r1, sp, #16
 8002c46:	f3af 8000 	nop.w
 8002c4a:	4607      	mov	r7, r0
 8002c4c:	1c78      	adds	r0, r7, #1
 8002c4e:	d1d6      	bne.n	8002bfe <_vfiprintf_r+0x19a>
 8002c50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c52:	07d9      	lsls	r1, r3, #31
 8002c54:	d405      	bmi.n	8002c62 <_vfiprintf_r+0x1fe>
 8002c56:	89ab      	ldrh	r3, [r5, #12]
 8002c58:	059a      	lsls	r2, r3, #22
 8002c5a:	d402      	bmi.n	8002c62 <_vfiprintf_r+0x1fe>
 8002c5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c5e:	f7ff fde1 	bl	8002824 <__retarget_lock_release_recursive>
 8002c62:	89ab      	ldrh	r3, [r5, #12]
 8002c64:	065b      	lsls	r3, r3, #25
 8002c66:	f53f af1f 	bmi.w	8002aa8 <_vfiprintf_r+0x44>
 8002c6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002c6c:	e71e      	b.n	8002aac <_vfiprintf_r+0x48>
 8002c6e:	ab03      	add	r3, sp, #12
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	462a      	mov	r2, r5
 8002c74:	4630      	mov	r0, r6
 8002c76:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <_vfiprintf_r+0x22c>)
 8002c78:	a904      	add	r1, sp, #16
 8002c7a:	f000 f87d 	bl	8002d78 <_printf_i>
 8002c7e:	e7e4      	b.n	8002c4a <_vfiprintf_r+0x1e6>
 8002c80:	08004296 	.word	0x08004296
 8002c84:	0800429c 	.word	0x0800429c
 8002c88:	080042a0 	.word	0x080042a0
 8002c8c:	00000000 	.word	0x00000000
 8002c90:	08002a3f 	.word	0x08002a3f

08002c94 <_printf_common>:
 8002c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c98:	4616      	mov	r6, r2
 8002c9a:	4698      	mov	r8, r3
 8002c9c:	688a      	ldr	r2, [r1, #8]
 8002c9e:	690b      	ldr	r3, [r1, #16]
 8002ca0:	4607      	mov	r7, r0
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	bfb8      	it	lt
 8002ca6:	4613      	movlt	r3, r2
 8002ca8:	6033      	str	r3, [r6, #0]
 8002caa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002cae:	460c      	mov	r4, r1
 8002cb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002cb4:	b10a      	cbz	r2, 8002cba <_printf_common+0x26>
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	6033      	str	r3, [r6, #0]
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	0699      	lsls	r1, r3, #26
 8002cbe:	bf42      	ittt	mi
 8002cc0:	6833      	ldrmi	r3, [r6, #0]
 8002cc2:	3302      	addmi	r3, #2
 8002cc4:	6033      	strmi	r3, [r6, #0]
 8002cc6:	6825      	ldr	r5, [r4, #0]
 8002cc8:	f015 0506 	ands.w	r5, r5, #6
 8002ccc:	d106      	bne.n	8002cdc <_printf_common+0x48>
 8002cce:	f104 0a19 	add.w	sl, r4, #25
 8002cd2:	68e3      	ldr	r3, [r4, #12]
 8002cd4:	6832      	ldr	r2, [r6, #0]
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	42ab      	cmp	r3, r5
 8002cda:	dc2b      	bgt.n	8002d34 <_printf_common+0xa0>
 8002cdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ce0:	6822      	ldr	r2, [r4, #0]
 8002ce2:	3b00      	subs	r3, #0
 8002ce4:	bf18      	it	ne
 8002ce6:	2301      	movne	r3, #1
 8002ce8:	0692      	lsls	r2, r2, #26
 8002cea:	d430      	bmi.n	8002d4e <_printf_common+0xba>
 8002cec:	4641      	mov	r1, r8
 8002cee:	4638      	mov	r0, r7
 8002cf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002cf4:	47c8      	blx	r9
 8002cf6:	3001      	adds	r0, #1
 8002cf8:	d023      	beq.n	8002d42 <_printf_common+0xae>
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	6922      	ldr	r2, [r4, #16]
 8002cfe:	f003 0306 	and.w	r3, r3, #6
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	bf14      	ite	ne
 8002d06:	2500      	movne	r5, #0
 8002d08:	6833      	ldreq	r3, [r6, #0]
 8002d0a:	f04f 0600 	mov.w	r6, #0
 8002d0e:	bf08      	it	eq
 8002d10:	68e5      	ldreq	r5, [r4, #12]
 8002d12:	f104 041a 	add.w	r4, r4, #26
 8002d16:	bf08      	it	eq
 8002d18:	1aed      	subeq	r5, r5, r3
 8002d1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002d1e:	bf08      	it	eq
 8002d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d24:	4293      	cmp	r3, r2
 8002d26:	bfc4      	itt	gt
 8002d28:	1a9b      	subgt	r3, r3, r2
 8002d2a:	18ed      	addgt	r5, r5, r3
 8002d2c:	42b5      	cmp	r5, r6
 8002d2e:	d11a      	bne.n	8002d66 <_printf_common+0xd2>
 8002d30:	2000      	movs	r0, #0
 8002d32:	e008      	b.n	8002d46 <_printf_common+0xb2>
 8002d34:	2301      	movs	r3, #1
 8002d36:	4652      	mov	r2, sl
 8002d38:	4641      	mov	r1, r8
 8002d3a:	4638      	mov	r0, r7
 8002d3c:	47c8      	blx	r9
 8002d3e:	3001      	adds	r0, #1
 8002d40:	d103      	bne.n	8002d4a <_printf_common+0xb6>
 8002d42:	f04f 30ff 	mov.w	r0, #4294967295
 8002d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d4a:	3501      	adds	r5, #1
 8002d4c:	e7c1      	b.n	8002cd2 <_printf_common+0x3e>
 8002d4e:	2030      	movs	r0, #48	@ 0x30
 8002d50:	18e1      	adds	r1, r4, r3
 8002d52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002d5c:	4422      	add	r2, r4
 8002d5e:	3302      	adds	r3, #2
 8002d60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002d64:	e7c2      	b.n	8002cec <_printf_common+0x58>
 8002d66:	2301      	movs	r3, #1
 8002d68:	4622      	mov	r2, r4
 8002d6a:	4641      	mov	r1, r8
 8002d6c:	4638      	mov	r0, r7
 8002d6e:	47c8      	blx	r9
 8002d70:	3001      	adds	r0, #1
 8002d72:	d0e6      	beq.n	8002d42 <_printf_common+0xae>
 8002d74:	3601      	adds	r6, #1
 8002d76:	e7d9      	b.n	8002d2c <_printf_common+0x98>

08002d78 <_printf_i>:
 8002d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d7c:	7e0f      	ldrb	r7, [r1, #24]
 8002d7e:	4691      	mov	r9, r2
 8002d80:	2f78      	cmp	r7, #120	@ 0x78
 8002d82:	4680      	mov	r8, r0
 8002d84:	460c      	mov	r4, r1
 8002d86:	469a      	mov	sl, r3
 8002d88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002d8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002d8e:	d807      	bhi.n	8002da0 <_printf_i+0x28>
 8002d90:	2f62      	cmp	r7, #98	@ 0x62
 8002d92:	d80a      	bhi.n	8002daa <_printf_i+0x32>
 8002d94:	2f00      	cmp	r7, #0
 8002d96:	f000 80d3 	beq.w	8002f40 <_printf_i+0x1c8>
 8002d9a:	2f58      	cmp	r7, #88	@ 0x58
 8002d9c:	f000 80ba 	beq.w	8002f14 <_printf_i+0x19c>
 8002da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002da4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002da8:	e03a      	b.n	8002e20 <_printf_i+0xa8>
 8002daa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002dae:	2b15      	cmp	r3, #21
 8002db0:	d8f6      	bhi.n	8002da0 <_printf_i+0x28>
 8002db2:	a101      	add	r1, pc, #4	@ (adr r1, 8002db8 <_printf_i+0x40>)
 8002db4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002db8:	08002e11 	.word	0x08002e11
 8002dbc:	08002e25 	.word	0x08002e25
 8002dc0:	08002da1 	.word	0x08002da1
 8002dc4:	08002da1 	.word	0x08002da1
 8002dc8:	08002da1 	.word	0x08002da1
 8002dcc:	08002da1 	.word	0x08002da1
 8002dd0:	08002e25 	.word	0x08002e25
 8002dd4:	08002da1 	.word	0x08002da1
 8002dd8:	08002da1 	.word	0x08002da1
 8002ddc:	08002da1 	.word	0x08002da1
 8002de0:	08002da1 	.word	0x08002da1
 8002de4:	08002f27 	.word	0x08002f27
 8002de8:	08002e4f 	.word	0x08002e4f
 8002dec:	08002ee1 	.word	0x08002ee1
 8002df0:	08002da1 	.word	0x08002da1
 8002df4:	08002da1 	.word	0x08002da1
 8002df8:	08002f49 	.word	0x08002f49
 8002dfc:	08002da1 	.word	0x08002da1
 8002e00:	08002e4f 	.word	0x08002e4f
 8002e04:	08002da1 	.word	0x08002da1
 8002e08:	08002da1 	.word	0x08002da1
 8002e0c:	08002ee9 	.word	0x08002ee9
 8002e10:	6833      	ldr	r3, [r6, #0]
 8002e12:	1d1a      	adds	r2, r3, #4
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6032      	str	r2, [r6, #0]
 8002e18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002e1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002e20:	2301      	movs	r3, #1
 8002e22:	e09e      	b.n	8002f62 <_printf_i+0x1ea>
 8002e24:	6833      	ldr	r3, [r6, #0]
 8002e26:	6820      	ldr	r0, [r4, #0]
 8002e28:	1d19      	adds	r1, r3, #4
 8002e2a:	6031      	str	r1, [r6, #0]
 8002e2c:	0606      	lsls	r6, r0, #24
 8002e2e:	d501      	bpl.n	8002e34 <_printf_i+0xbc>
 8002e30:	681d      	ldr	r5, [r3, #0]
 8002e32:	e003      	b.n	8002e3c <_printf_i+0xc4>
 8002e34:	0645      	lsls	r5, r0, #25
 8002e36:	d5fb      	bpl.n	8002e30 <_printf_i+0xb8>
 8002e38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002e3c:	2d00      	cmp	r5, #0
 8002e3e:	da03      	bge.n	8002e48 <_printf_i+0xd0>
 8002e40:	232d      	movs	r3, #45	@ 0x2d
 8002e42:	426d      	negs	r5, r5
 8002e44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e48:	230a      	movs	r3, #10
 8002e4a:	4859      	ldr	r0, [pc, #356]	@ (8002fb0 <_printf_i+0x238>)
 8002e4c:	e011      	b.n	8002e72 <_printf_i+0xfa>
 8002e4e:	6821      	ldr	r1, [r4, #0]
 8002e50:	6833      	ldr	r3, [r6, #0]
 8002e52:	0608      	lsls	r0, r1, #24
 8002e54:	f853 5b04 	ldr.w	r5, [r3], #4
 8002e58:	d402      	bmi.n	8002e60 <_printf_i+0xe8>
 8002e5a:	0649      	lsls	r1, r1, #25
 8002e5c:	bf48      	it	mi
 8002e5e:	b2ad      	uxthmi	r5, r5
 8002e60:	2f6f      	cmp	r7, #111	@ 0x6f
 8002e62:	6033      	str	r3, [r6, #0]
 8002e64:	bf14      	ite	ne
 8002e66:	230a      	movne	r3, #10
 8002e68:	2308      	moveq	r3, #8
 8002e6a:	4851      	ldr	r0, [pc, #324]	@ (8002fb0 <_printf_i+0x238>)
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002e72:	6866      	ldr	r6, [r4, #4]
 8002e74:	2e00      	cmp	r6, #0
 8002e76:	bfa8      	it	ge
 8002e78:	6821      	ldrge	r1, [r4, #0]
 8002e7a:	60a6      	str	r6, [r4, #8]
 8002e7c:	bfa4      	itt	ge
 8002e7e:	f021 0104 	bicge.w	r1, r1, #4
 8002e82:	6021      	strge	r1, [r4, #0]
 8002e84:	b90d      	cbnz	r5, 8002e8a <_printf_i+0x112>
 8002e86:	2e00      	cmp	r6, #0
 8002e88:	d04b      	beq.n	8002f22 <_printf_i+0x1aa>
 8002e8a:	4616      	mov	r6, r2
 8002e8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e90:	fb03 5711 	mls	r7, r3, r1, r5
 8002e94:	5dc7      	ldrb	r7, [r0, r7]
 8002e96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e9a:	462f      	mov	r7, r5
 8002e9c:	42bb      	cmp	r3, r7
 8002e9e:	460d      	mov	r5, r1
 8002ea0:	d9f4      	bls.n	8002e8c <_printf_i+0x114>
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d10b      	bne.n	8002ebe <_printf_i+0x146>
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	07df      	lsls	r7, r3, #31
 8002eaa:	d508      	bpl.n	8002ebe <_printf_i+0x146>
 8002eac:	6923      	ldr	r3, [r4, #16]
 8002eae:	6861      	ldr	r1, [r4, #4]
 8002eb0:	4299      	cmp	r1, r3
 8002eb2:	bfde      	ittt	le
 8002eb4:	2330      	movle	r3, #48	@ 0x30
 8002eb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002eba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002ebe:	1b92      	subs	r2, r2, r6
 8002ec0:	6122      	str	r2, [r4, #16]
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	4621      	mov	r1, r4
 8002ec6:	4640      	mov	r0, r8
 8002ec8:	f8cd a000 	str.w	sl, [sp]
 8002ecc:	aa03      	add	r2, sp, #12
 8002ece:	f7ff fee1 	bl	8002c94 <_printf_common>
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	d14a      	bne.n	8002f6c <_printf_i+0x1f4>
 8002ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eda:	b004      	add	sp, #16
 8002edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	f043 0320 	orr.w	r3, r3, #32
 8002ee6:	6023      	str	r3, [r4, #0]
 8002ee8:	2778      	movs	r7, #120	@ 0x78
 8002eea:	4832      	ldr	r0, [pc, #200]	@ (8002fb4 <_printf_i+0x23c>)
 8002eec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	6831      	ldr	r1, [r6, #0]
 8002ef4:	061f      	lsls	r7, r3, #24
 8002ef6:	f851 5b04 	ldr.w	r5, [r1], #4
 8002efa:	d402      	bmi.n	8002f02 <_printf_i+0x18a>
 8002efc:	065f      	lsls	r7, r3, #25
 8002efe:	bf48      	it	mi
 8002f00:	b2ad      	uxthmi	r5, r5
 8002f02:	6031      	str	r1, [r6, #0]
 8002f04:	07d9      	lsls	r1, r3, #31
 8002f06:	bf44      	itt	mi
 8002f08:	f043 0320 	orrmi.w	r3, r3, #32
 8002f0c:	6023      	strmi	r3, [r4, #0]
 8002f0e:	b11d      	cbz	r5, 8002f18 <_printf_i+0x1a0>
 8002f10:	2310      	movs	r3, #16
 8002f12:	e7ab      	b.n	8002e6c <_printf_i+0xf4>
 8002f14:	4826      	ldr	r0, [pc, #152]	@ (8002fb0 <_printf_i+0x238>)
 8002f16:	e7e9      	b.n	8002eec <_printf_i+0x174>
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	f023 0320 	bic.w	r3, r3, #32
 8002f1e:	6023      	str	r3, [r4, #0]
 8002f20:	e7f6      	b.n	8002f10 <_printf_i+0x198>
 8002f22:	4616      	mov	r6, r2
 8002f24:	e7bd      	b.n	8002ea2 <_printf_i+0x12a>
 8002f26:	6833      	ldr	r3, [r6, #0]
 8002f28:	6825      	ldr	r5, [r4, #0]
 8002f2a:	1d18      	adds	r0, r3, #4
 8002f2c:	6961      	ldr	r1, [r4, #20]
 8002f2e:	6030      	str	r0, [r6, #0]
 8002f30:	062e      	lsls	r6, r5, #24
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	d501      	bpl.n	8002f3a <_printf_i+0x1c2>
 8002f36:	6019      	str	r1, [r3, #0]
 8002f38:	e002      	b.n	8002f40 <_printf_i+0x1c8>
 8002f3a:	0668      	lsls	r0, r5, #25
 8002f3c:	d5fb      	bpl.n	8002f36 <_printf_i+0x1be>
 8002f3e:	8019      	strh	r1, [r3, #0]
 8002f40:	2300      	movs	r3, #0
 8002f42:	4616      	mov	r6, r2
 8002f44:	6123      	str	r3, [r4, #16]
 8002f46:	e7bc      	b.n	8002ec2 <_printf_i+0x14a>
 8002f48:	6833      	ldr	r3, [r6, #0]
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	1d1a      	adds	r2, r3, #4
 8002f4e:	6032      	str	r2, [r6, #0]
 8002f50:	681e      	ldr	r6, [r3, #0]
 8002f52:	6862      	ldr	r2, [r4, #4]
 8002f54:	4630      	mov	r0, r6
 8002f56:	f000 f9af 	bl	80032b8 <memchr>
 8002f5a:	b108      	cbz	r0, 8002f60 <_printf_i+0x1e8>
 8002f5c:	1b80      	subs	r0, r0, r6
 8002f5e:	6060      	str	r0, [r4, #4]
 8002f60:	6863      	ldr	r3, [r4, #4]
 8002f62:	6123      	str	r3, [r4, #16]
 8002f64:	2300      	movs	r3, #0
 8002f66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f6a:	e7aa      	b.n	8002ec2 <_printf_i+0x14a>
 8002f6c:	4632      	mov	r2, r6
 8002f6e:	4649      	mov	r1, r9
 8002f70:	4640      	mov	r0, r8
 8002f72:	6923      	ldr	r3, [r4, #16]
 8002f74:	47d0      	blx	sl
 8002f76:	3001      	adds	r0, #1
 8002f78:	d0ad      	beq.n	8002ed6 <_printf_i+0x15e>
 8002f7a:	6823      	ldr	r3, [r4, #0]
 8002f7c:	079b      	lsls	r3, r3, #30
 8002f7e:	d413      	bmi.n	8002fa8 <_printf_i+0x230>
 8002f80:	68e0      	ldr	r0, [r4, #12]
 8002f82:	9b03      	ldr	r3, [sp, #12]
 8002f84:	4298      	cmp	r0, r3
 8002f86:	bfb8      	it	lt
 8002f88:	4618      	movlt	r0, r3
 8002f8a:	e7a6      	b.n	8002eda <_printf_i+0x162>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	4632      	mov	r2, r6
 8002f90:	4649      	mov	r1, r9
 8002f92:	4640      	mov	r0, r8
 8002f94:	47d0      	blx	sl
 8002f96:	3001      	adds	r0, #1
 8002f98:	d09d      	beq.n	8002ed6 <_printf_i+0x15e>
 8002f9a:	3501      	adds	r5, #1
 8002f9c:	68e3      	ldr	r3, [r4, #12]
 8002f9e:	9903      	ldr	r1, [sp, #12]
 8002fa0:	1a5b      	subs	r3, r3, r1
 8002fa2:	42ab      	cmp	r3, r5
 8002fa4:	dcf2      	bgt.n	8002f8c <_printf_i+0x214>
 8002fa6:	e7eb      	b.n	8002f80 <_printf_i+0x208>
 8002fa8:	2500      	movs	r5, #0
 8002faa:	f104 0619 	add.w	r6, r4, #25
 8002fae:	e7f5      	b.n	8002f9c <_printf_i+0x224>
 8002fb0:	080042a7 	.word	0x080042a7
 8002fb4:	080042b8 	.word	0x080042b8

08002fb8 <__sflush_r>:
 8002fb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fbe:	0716      	lsls	r6, r2, #28
 8002fc0:	4605      	mov	r5, r0
 8002fc2:	460c      	mov	r4, r1
 8002fc4:	d454      	bmi.n	8003070 <__sflush_r+0xb8>
 8002fc6:	684b      	ldr	r3, [r1, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	dc02      	bgt.n	8002fd2 <__sflush_r+0x1a>
 8002fcc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	dd48      	ble.n	8003064 <__sflush_r+0xac>
 8002fd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002fd4:	2e00      	cmp	r6, #0
 8002fd6:	d045      	beq.n	8003064 <__sflush_r+0xac>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002fde:	682f      	ldr	r7, [r5, #0]
 8002fe0:	6a21      	ldr	r1, [r4, #32]
 8002fe2:	602b      	str	r3, [r5, #0]
 8002fe4:	d030      	beq.n	8003048 <__sflush_r+0x90>
 8002fe6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002fe8:	89a3      	ldrh	r3, [r4, #12]
 8002fea:	0759      	lsls	r1, r3, #29
 8002fec:	d505      	bpl.n	8002ffa <__sflush_r+0x42>
 8002fee:	6863      	ldr	r3, [r4, #4]
 8002ff0:	1ad2      	subs	r2, r2, r3
 8002ff2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002ff4:	b10b      	cbz	r3, 8002ffa <__sflush_r+0x42>
 8002ff6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ff8:	1ad2      	subs	r2, r2, r3
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003000:	6a21      	ldr	r1, [r4, #32]
 8003002:	47b0      	blx	r6
 8003004:	1c43      	adds	r3, r0, #1
 8003006:	89a3      	ldrh	r3, [r4, #12]
 8003008:	d106      	bne.n	8003018 <__sflush_r+0x60>
 800300a:	6829      	ldr	r1, [r5, #0]
 800300c:	291d      	cmp	r1, #29
 800300e:	d82b      	bhi.n	8003068 <__sflush_r+0xb0>
 8003010:	4a28      	ldr	r2, [pc, #160]	@ (80030b4 <__sflush_r+0xfc>)
 8003012:	410a      	asrs	r2, r1
 8003014:	07d6      	lsls	r6, r2, #31
 8003016:	d427      	bmi.n	8003068 <__sflush_r+0xb0>
 8003018:	2200      	movs	r2, #0
 800301a:	6062      	str	r2, [r4, #4]
 800301c:	6922      	ldr	r2, [r4, #16]
 800301e:	04d9      	lsls	r1, r3, #19
 8003020:	6022      	str	r2, [r4, #0]
 8003022:	d504      	bpl.n	800302e <__sflush_r+0x76>
 8003024:	1c42      	adds	r2, r0, #1
 8003026:	d101      	bne.n	800302c <__sflush_r+0x74>
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	b903      	cbnz	r3, 800302e <__sflush_r+0x76>
 800302c:	6560      	str	r0, [r4, #84]	@ 0x54
 800302e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003030:	602f      	str	r7, [r5, #0]
 8003032:	b1b9      	cbz	r1, 8003064 <__sflush_r+0xac>
 8003034:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003038:	4299      	cmp	r1, r3
 800303a:	d002      	beq.n	8003042 <__sflush_r+0x8a>
 800303c:	4628      	mov	r0, r5
 800303e:	f7ff fbf3 	bl	8002828 <_free_r>
 8003042:	2300      	movs	r3, #0
 8003044:	6363      	str	r3, [r4, #52]	@ 0x34
 8003046:	e00d      	b.n	8003064 <__sflush_r+0xac>
 8003048:	2301      	movs	r3, #1
 800304a:	4628      	mov	r0, r5
 800304c:	47b0      	blx	r6
 800304e:	4602      	mov	r2, r0
 8003050:	1c50      	adds	r0, r2, #1
 8003052:	d1c9      	bne.n	8002fe8 <__sflush_r+0x30>
 8003054:	682b      	ldr	r3, [r5, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0c6      	beq.n	8002fe8 <__sflush_r+0x30>
 800305a:	2b1d      	cmp	r3, #29
 800305c:	d001      	beq.n	8003062 <__sflush_r+0xaa>
 800305e:	2b16      	cmp	r3, #22
 8003060:	d11d      	bne.n	800309e <__sflush_r+0xe6>
 8003062:	602f      	str	r7, [r5, #0]
 8003064:	2000      	movs	r0, #0
 8003066:	e021      	b.n	80030ac <__sflush_r+0xf4>
 8003068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800306c:	b21b      	sxth	r3, r3
 800306e:	e01a      	b.n	80030a6 <__sflush_r+0xee>
 8003070:	690f      	ldr	r7, [r1, #16]
 8003072:	2f00      	cmp	r7, #0
 8003074:	d0f6      	beq.n	8003064 <__sflush_r+0xac>
 8003076:	0793      	lsls	r3, r2, #30
 8003078:	bf18      	it	ne
 800307a:	2300      	movne	r3, #0
 800307c:	680e      	ldr	r6, [r1, #0]
 800307e:	bf08      	it	eq
 8003080:	694b      	ldreq	r3, [r1, #20]
 8003082:	1bf6      	subs	r6, r6, r7
 8003084:	600f      	str	r7, [r1, #0]
 8003086:	608b      	str	r3, [r1, #8]
 8003088:	2e00      	cmp	r6, #0
 800308a:	ddeb      	ble.n	8003064 <__sflush_r+0xac>
 800308c:	4633      	mov	r3, r6
 800308e:	463a      	mov	r2, r7
 8003090:	4628      	mov	r0, r5
 8003092:	6a21      	ldr	r1, [r4, #32]
 8003094:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003098:	47e0      	blx	ip
 800309a:	2800      	cmp	r0, #0
 800309c:	dc07      	bgt.n	80030ae <__sflush_r+0xf6>
 800309e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030a6:	f04f 30ff 	mov.w	r0, #4294967295
 80030aa:	81a3      	strh	r3, [r4, #12]
 80030ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030ae:	4407      	add	r7, r0
 80030b0:	1a36      	subs	r6, r6, r0
 80030b2:	e7e9      	b.n	8003088 <__sflush_r+0xd0>
 80030b4:	dfbffffe 	.word	0xdfbffffe

080030b8 <_fflush_r>:
 80030b8:	b538      	push	{r3, r4, r5, lr}
 80030ba:	690b      	ldr	r3, [r1, #16]
 80030bc:	4605      	mov	r5, r0
 80030be:	460c      	mov	r4, r1
 80030c0:	b913      	cbnz	r3, 80030c8 <_fflush_r+0x10>
 80030c2:	2500      	movs	r5, #0
 80030c4:	4628      	mov	r0, r5
 80030c6:	bd38      	pop	{r3, r4, r5, pc}
 80030c8:	b118      	cbz	r0, 80030d2 <_fflush_r+0x1a>
 80030ca:	6a03      	ldr	r3, [r0, #32]
 80030cc:	b90b      	cbnz	r3, 80030d2 <_fflush_r+0x1a>
 80030ce:	f7ff fa9b 	bl	8002608 <__sinit>
 80030d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f3      	beq.n	80030c2 <_fflush_r+0xa>
 80030da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80030dc:	07d0      	lsls	r0, r2, #31
 80030de:	d404      	bmi.n	80030ea <_fflush_r+0x32>
 80030e0:	0599      	lsls	r1, r3, #22
 80030e2:	d402      	bmi.n	80030ea <_fflush_r+0x32>
 80030e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030e6:	f7ff fb9c 	bl	8002822 <__retarget_lock_acquire_recursive>
 80030ea:	4628      	mov	r0, r5
 80030ec:	4621      	mov	r1, r4
 80030ee:	f7ff ff63 	bl	8002fb8 <__sflush_r>
 80030f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030f4:	4605      	mov	r5, r0
 80030f6:	07da      	lsls	r2, r3, #31
 80030f8:	d4e4      	bmi.n	80030c4 <_fflush_r+0xc>
 80030fa:	89a3      	ldrh	r3, [r4, #12]
 80030fc:	059b      	lsls	r3, r3, #22
 80030fe:	d4e1      	bmi.n	80030c4 <_fflush_r+0xc>
 8003100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003102:	f7ff fb8f 	bl	8002824 <__retarget_lock_release_recursive>
 8003106:	e7dd      	b.n	80030c4 <_fflush_r+0xc>

08003108 <_putc_r>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	460d      	mov	r5, r1
 800310c:	4614      	mov	r4, r2
 800310e:	4606      	mov	r6, r0
 8003110:	b118      	cbz	r0, 800311a <_putc_r+0x12>
 8003112:	6a03      	ldr	r3, [r0, #32]
 8003114:	b90b      	cbnz	r3, 800311a <_putc_r+0x12>
 8003116:	f7ff fa77 	bl	8002608 <__sinit>
 800311a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800311c:	07d8      	lsls	r0, r3, #31
 800311e:	d405      	bmi.n	800312c <_putc_r+0x24>
 8003120:	89a3      	ldrh	r3, [r4, #12]
 8003122:	0599      	lsls	r1, r3, #22
 8003124:	d402      	bmi.n	800312c <_putc_r+0x24>
 8003126:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003128:	f7ff fb7b 	bl	8002822 <__retarget_lock_acquire_recursive>
 800312c:	68a3      	ldr	r3, [r4, #8]
 800312e:	3b01      	subs	r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	60a3      	str	r3, [r4, #8]
 8003134:	da05      	bge.n	8003142 <_putc_r+0x3a>
 8003136:	69a2      	ldr	r2, [r4, #24]
 8003138:	4293      	cmp	r3, r2
 800313a:	db12      	blt.n	8003162 <_putc_r+0x5a>
 800313c:	b2eb      	uxtb	r3, r5
 800313e:	2b0a      	cmp	r3, #10
 8003140:	d00f      	beq.n	8003162 <_putc_r+0x5a>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	6022      	str	r2, [r4, #0]
 8003148:	701d      	strb	r5, [r3, #0]
 800314a:	b2ed      	uxtb	r5, r5
 800314c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800314e:	07da      	lsls	r2, r3, #31
 8003150:	d405      	bmi.n	800315e <_putc_r+0x56>
 8003152:	89a3      	ldrh	r3, [r4, #12]
 8003154:	059b      	lsls	r3, r3, #22
 8003156:	d402      	bmi.n	800315e <_putc_r+0x56>
 8003158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800315a:	f7ff fb63 	bl	8002824 <__retarget_lock_release_recursive>
 800315e:	4628      	mov	r0, r5
 8003160:	bd70      	pop	{r4, r5, r6, pc}
 8003162:	4629      	mov	r1, r5
 8003164:	4622      	mov	r2, r4
 8003166:	4630      	mov	r0, r6
 8003168:	f000 f802 	bl	8003170 <__swbuf_r>
 800316c:	4605      	mov	r5, r0
 800316e:	e7ed      	b.n	800314c <_putc_r+0x44>

08003170 <__swbuf_r>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	460e      	mov	r6, r1
 8003174:	4614      	mov	r4, r2
 8003176:	4605      	mov	r5, r0
 8003178:	b118      	cbz	r0, 8003182 <__swbuf_r+0x12>
 800317a:	6a03      	ldr	r3, [r0, #32]
 800317c:	b90b      	cbnz	r3, 8003182 <__swbuf_r+0x12>
 800317e:	f7ff fa43 	bl	8002608 <__sinit>
 8003182:	69a3      	ldr	r3, [r4, #24]
 8003184:	60a3      	str	r3, [r4, #8]
 8003186:	89a3      	ldrh	r3, [r4, #12]
 8003188:	071a      	lsls	r2, r3, #28
 800318a:	d501      	bpl.n	8003190 <__swbuf_r+0x20>
 800318c:	6923      	ldr	r3, [r4, #16]
 800318e:	b943      	cbnz	r3, 80031a2 <__swbuf_r+0x32>
 8003190:	4621      	mov	r1, r4
 8003192:	4628      	mov	r0, r5
 8003194:	f000 f82a 	bl	80031ec <__swsetup_r>
 8003198:	b118      	cbz	r0, 80031a2 <__swbuf_r+0x32>
 800319a:	f04f 37ff 	mov.w	r7, #4294967295
 800319e:	4638      	mov	r0, r7
 80031a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	6922      	ldr	r2, [r4, #16]
 80031a6:	b2f6      	uxtb	r6, r6
 80031a8:	1a98      	subs	r0, r3, r2
 80031aa:	6963      	ldr	r3, [r4, #20]
 80031ac:	4637      	mov	r7, r6
 80031ae:	4283      	cmp	r3, r0
 80031b0:	dc05      	bgt.n	80031be <__swbuf_r+0x4e>
 80031b2:	4621      	mov	r1, r4
 80031b4:	4628      	mov	r0, r5
 80031b6:	f7ff ff7f 	bl	80030b8 <_fflush_r>
 80031ba:	2800      	cmp	r0, #0
 80031bc:	d1ed      	bne.n	800319a <__swbuf_r+0x2a>
 80031be:	68a3      	ldr	r3, [r4, #8]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	60a3      	str	r3, [r4, #8]
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	6022      	str	r2, [r4, #0]
 80031ca:	701e      	strb	r6, [r3, #0]
 80031cc:	6962      	ldr	r2, [r4, #20]
 80031ce:	1c43      	adds	r3, r0, #1
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d004      	beq.n	80031de <__swbuf_r+0x6e>
 80031d4:	89a3      	ldrh	r3, [r4, #12]
 80031d6:	07db      	lsls	r3, r3, #31
 80031d8:	d5e1      	bpl.n	800319e <__swbuf_r+0x2e>
 80031da:	2e0a      	cmp	r6, #10
 80031dc:	d1df      	bne.n	800319e <__swbuf_r+0x2e>
 80031de:	4621      	mov	r1, r4
 80031e0:	4628      	mov	r0, r5
 80031e2:	f7ff ff69 	bl	80030b8 <_fflush_r>
 80031e6:	2800      	cmp	r0, #0
 80031e8:	d0d9      	beq.n	800319e <__swbuf_r+0x2e>
 80031ea:	e7d6      	b.n	800319a <__swbuf_r+0x2a>

080031ec <__swsetup_r>:
 80031ec:	b538      	push	{r3, r4, r5, lr}
 80031ee:	4b29      	ldr	r3, [pc, #164]	@ (8003294 <__swsetup_r+0xa8>)
 80031f0:	4605      	mov	r5, r0
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	460c      	mov	r4, r1
 80031f6:	b118      	cbz	r0, 8003200 <__swsetup_r+0x14>
 80031f8:	6a03      	ldr	r3, [r0, #32]
 80031fa:	b90b      	cbnz	r3, 8003200 <__swsetup_r+0x14>
 80031fc:	f7ff fa04 	bl	8002608 <__sinit>
 8003200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003204:	0719      	lsls	r1, r3, #28
 8003206:	d422      	bmi.n	800324e <__swsetup_r+0x62>
 8003208:	06da      	lsls	r2, r3, #27
 800320a:	d407      	bmi.n	800321c <__swsetup_r+0x30>
 800320c:	2209      	movs	r2, #9
 800320e:	602a      	str	r2, [r5, #0]
 8003210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	81a3      	strh	r3, [r4, #12]
 800321a:	e033      	b.n	8003284 <__swsetup_r+0x98>
 800321c:	0758      	lsls	r0, r3, #29
 800321e:	d512      	bpl.n	8003246 <__swsetup_r+0x5a>
 8003220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003222:	b141      	cbz	r1, 8003236 <__swsetup_r+0x4a>
 8003224:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003228:	4299      	cmp	r1, r3
 800322a:	d002      	beq.n	8003232 <__swsetup_r+0x46>
 800322c:	4628      	mov	r0, r5
 800322e:	f7ff fafb 	bl	8002828 <_free_r>
 8003232:	2300      	movs	r3, #0
 8003234:	6363      	str	r3, [r4, #52]	@ 0x34
 8003236:	89a3      	ldrh	r3, [r4, #12]
 8003238:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800323c:	81a3      	strh	r3, [r4, #12]
 800323e:	2300      	movs	r3, #0
 8003240:	6063      	str	r3, [r4, #4]
 8003242:	6923      	ldr	r3, [r4, #16]
 8003244:	6023      	str	r3, [r4, #0]
 8003246:	89a3      	ldrh	r3, [r4, #12]
 8003248:	f043 0308 	orr.w	r3, r3, #8
 800324c:	81a3      	strh	r3, [r4, #12]
 800324e:	6923      	ldr	r3, [r4, #16]
 8003250:	b94b      	cbnz	r3, 8003266 <__swsetup_r+0x7a>
 8003252:	89a3      	ldrh	r3, [r4, #12]
 8003254:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800325c:	d003      	beq.n	8003266 <__swsetup_r+0x7a>
 800325e:	4621      	mov	r1, r4
 8003260:	4628      	mov	r0, r5
 8003262:	f000 f85c 	bl	800331e <__smakebuf_r>
 8003266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800326a:	f013 0201 	ands.w	r2, r3, #1
 800326e:	d00a      	beq.n	8003286 <__swsetup_r+0x9a>
 8003270:	2200      	movs	r2, #0
 8003272:	60a2      	str	r2, [r4, #8]
 8003274:	6962      	ldr	r2, [r4, #20]
 8003276:	4252      	negs	r2, r2
 8003278:	61a2      	str	r2, [r4, #24]
 800327a:	6922      	ldr	r2, [r4, #16]
 800327c:	b942      	cbnz	r2, 8003290 <__swsetup_r+0xa4>
 800327e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003282:	d1c5      	bne.n	8003210 <__swsetup_r+0x24>
 8003284:	bd38      	pop	{r3, r4, r5, pc}
 8003286:	0799      	lsls	r1, r3, #30
 8003288:	bf58      	it	pl
 800328a:	6962      	ldrpl	r2, [r4, #20]
 800328c:	60a2      	str	r2, [r4, #8]
 800328e:	e7f4      	b.n	800327a <__swsetup_r+0x8e>
 8003290:	2000      	movs	r0, #0
 8003292:	e7f7      	b.n	8003284 <__swsetup_r+0x98>
 8003294:	20000018 	.word	0x20000018

08003298 <_sbrk_r>:
 8003298:	b538      	push	{r3, r4, r5, lr}
 800329a:	2300      	movs	r3, #0
 800329c:	4d05      	ldr	r5, [pc, #20]	@ (80032b4 <_sbrk_r+0x1c>)
 800329e:	4604      	mov	r4, r0
 80032a0:	4608      	mov	r0, r1
 80032a2:	602b      	str	r3, [r5, #0]
 80032a4:	f7fd fc46 	bl	8000b34 <_sbrk>
 80032a8:	1c43      	adds	r3, r0, #1
 80032aa:	d102      	bne.n	80032b2 <_sbrk_r+0x1a>
 80032ac:	682b      	ldr	r3, [r5, #0]
 80032ae:	b103      	cbz	r3, 80032b2 <_sbrk_r+0x1a>
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	bd38      	pop	{r3, r4, r5, pc}
 80032b4:	20000298 	.word	0x20000298

080032b8 <memchr>:
 80032b8:	4603      	mov	r3, r0
 80032ba:	b510      	push	{r4, lr}
 80032bc:	b2c9      	uxtb	r1, r1
 80032be:	4402      	add	r2, r0
 80032c0:	4293      	cmp	r3, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	d101      	bne.n	80032ca <memchr+0x12>
 80032c6:	2000      	movs	r0, #0
 80032c8:	e003      	b.n	80032d2 <memchr+0x1a>
 80032ca:	7804      	ldrb	r4, [r0, #0]
 80032cc:	3301      	adds	r3, #1
 80032ce:	428c      	cmp	r4, r1
 80032d0:	d1f6      	bne.n	80032c0 <memchr+0x8>
 80032d2:	bd10      	pop	{r4, pc}

080032d4 <__swhatbuf_r>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	460c      	mov	r4, r1
 80032d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032dc:	4615      	mov	r5, r2
 80032de:	2900      	cmp	r1, #0
 80032e0:	461e      	mov	r6, r3
 80032e2:	b096      	sub	sp, #88	@ 0x58
 80032e4:	da0c      	bge.n	8003300 <__swhatbuf_r+0x2c>
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	2100      	movs	r1, #0
 80032ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80032ee:	bf14      	ite	ne
 80032f0:	2340      	movne	r3, #64	@ 0x40
 80032f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80032f6:	2000      	movs	r0, #0
 80032f8:	6031      	str	r1, [r6, #0]
 80032fa:	602b      	str	r3, [r5, #0]
 80032fc:	b016      	add	sp, #88	@ 0x58
 80032fe:	bd70      	pop	{r4, r5, r6, pc}
 8003300:	466a      	mov	r2, sp
 8003302:	f000 f849 	bl	8003398 <_fstat_r>
 8003306:	2800      	cmp	r0, #0
 8003308:	dbed      	blt.n	80032e6 <__swhatbuf_r+0x12>
 800330a:	9901      	ldr	r1, [sp, #4]
 800330c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003310:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003314:	4259      	negs	r1, r3
 8003316:	4159      	adcs	r1, r3
 8003318:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800331c:	e7eb      	b.n	80032f6 <__swhatbuf_r+0x22>

0800331e <__smakebuf_r>:
 800331e:	898b      	ldrh	r3, [r1, #12]
 8003320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003322:	079d      	lsls	r5, r3, #30
 8003324:	4606      	mov	r6, r0
 8003326:	460c      	mov	r4, r1
 8003328:	d507      	bpl.n	800333a <__smakebuf_r+0x1c>
 800332a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800332e:	6023      	str	r3, [r4, #0]
 8003330:	6123      	str	r3, [r4, #16]
 8003332:	2301      	movs	r3, #1
 8003334:	6163      	str	r3, [r4, #20]
 8003336:	b003      	add	sp, #12
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	466a      	mov	r2, sp
 800333c:	ab01      	add	r3, sp, #4
 800333e:	f7ff ffc9 	bl	80032d4 <__swhatbuf_r>
 8003342:	9f00      	ldr	r7, [sp, #0]
 8003344:	4605      	mov	r5, r0
 8003346:	4639      	mov	r1, r7
 8003348:	4630      	mov	r0, r6
 800334a:	f7ff fad7 	bl	80028fc <_malloc_r>
 800334e:	b948      	cbnz	r0, 8003364 <__smakebuf_r+0x46>
 8003350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003354:	059a      	lsls	r2, r3, #22
 8003356:	d4ee      	bmi.n	8003336 <__smakebuf_r+0x18>
 8003358:	f023 0303 	bic.w	r3, r3, #3
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	81a3      	strh	r3, [r4, #12]
 8003362:	e7e2      	b.n	800332a <__smakebuf_r+0xc>
 8003364:	89a3      	ldrh	r3, [r4, #12]
 8003366:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800336a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800336e:	81a3      	strh	r3, [r4, #12]
 8003370:	9b01      	ldr	r3, [sp, #4]
 8003372:	6020      	str	r0, [r4, #0]
 8003374:	b15b      	cbz	r3, 800338e <__smakebuf_r+0x70>
 8003376:	4630      	mov	r0, r6
 8003378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800337c:	f000 f81e 	bl	80033bc <_isatty_r>
 8003380:	b128      	cbz	r0, 800338e <__smakebuf_r+0x70>
 8003382:	89a3      	ldrh	r3, [r4, #12]
 8003384:	f023 0303 	bic.w	r3, r3, #3
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	81a3      	strh	r3, [r4, #12]
 800338e:	89a3      	ldrh	r3, [r4, #12]
 8003390:	431d      	orrs	r5, r3
 8003392:	81a5      	strh	r5, [r4, #12]
 8003394:	e7cf      	b.n	8003336 <__smakebuf_r+0x18>
	...

08003398 <_fstat_r>:
 8003398:	b538      	push	{r3, r4, r5, lr}
 800339a:	2300      	movs	r3, #0
 800339c:	4d06      	ldr	r5, [pc, #24]	@ (80033b8 <_fstat_r+0x20>)
 800339e:	4604      	mov	r4, r0
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	602b      	str	r3, [r5, #0]
 80033a6:	f7fd fb9f 	bl	8000ae8 <_fstat>
 80033aa:	1c43      	adds	r3, r0, #1
 80033ac:	d102      	bne.n	80033b4 <_fstat_r+0x1c>
 80033ae:	682b      	ldr	r3, [r5, #0]
 80033b0:	b103      	cbz	r3, 80033b4 <_fstat_r+0x1c>
 80033b2:	6023      	str	r3, [r4, #0]
 80033b4:	bd38      	pop	{r3, r4, r5, pc}
 80033b6:	bf00      	nop
 80033b8:	20000298 	.word	0x20000298

080033bc <_isatty_r>:
 80033bc:	b538      	push	{r3, r4, r5, lr}
 80033be:	2300      	movs	r3, #0
 80033c0:	4d05      	ldr	r5, [pc, #20]	@ (80033d8 <_isatty_r+0x1c>)
 80033c2:	4604      	mov	r4, r0
 80033c4:	4608      	mov	r0, r1
 80033c6:	602b      	str	r3, [r5, #0]
 80033c8:	f7fd fb9d 	bl	8000b06 <_isatty>
 80033cc:	1c43      	adds	r3, r0, #1
 80033ce:	d102      	bne.n	80033d6 <_isatty_r+0x1a>
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	b103      	cbz	r3, 80033d6 <_isatty_r+0x1a>
 80033d4:	6023      	str	r3, [r4, #0]
 80033d6:	bd38      	pop	{r3, r4, r5, pc}
 80033d8:	20000298 	.word	0x20000298

080033dc <_init>:
 80033dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033de:	bf00      	nop
 80033e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e2:	bc08      	pop	{r3}
 80033e4:	469e      	mov	lr, r3
 80033e6:	4770      	bx	lr

080033e8 <_fini>:
 80033e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ea:	bf00      	nop
 80033ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ee:	bc08      	pop	{r3}
 80033f0:	469e      	mov	lr, r3
 80033f2:	4770      	bx	lr
