
DW100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003164  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed0  08003270  08003270  00004270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004140  08004140  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  08004140  08004140  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004140  08004140  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004140  08004140  00005140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004144  08004144  00005144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004148  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000068  080041b0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  080041b0  000062a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e21  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e1  00000000  00000000  0000beb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0000d598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000050c  00000000  00000000  0000dc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017981  00000000  00000000  0000e184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007fa9  00000000  00000000  00025b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000839b2  00000000  00000000  0002daae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1460  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002210  00000000  00000000  000b14a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000037  00000000  00000000  000b36b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003258 	.word	0x08003258

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003258 	.word	0x08003258

0800014c <DW_ReadReg>:
  * @param  data: Pointer to data buffer
  * @param  length: Number of bytes to read
  * @retval HAL_OK on success, HAL_ERROR on failure
  */
uint32_t DW_ReadReg(uint8_t reg_addr, uint8_t* data, uint8_t length)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
    uint8_t header = reg_addr & 0x3F; // Bit 7=0 (read), Bit 6=0 (no sub-index)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000162:	b2db      	uxtb	r3, r3
 8000164:	73bb      	strb	r3, [r7, #14]

    if (!data || !DW_ValidateRegisterAccess(reg_addr, length)) {
 8000166:	683b      	ldr	r3, [r7, #0]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d00b      	beq.n	8000184 <DW_ReadReg+0x38>
 800016c:	79ba      	ldrb	r2, [r7, #6]
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	4611      	mov	r1, r2
 8000172:	4618      	mov	r0, r3
 8000174:	f000 f8a8 	bl	80002c8 <DW_ValidateRegisterAccess>
 8000178:	4603      	mov	r3, r0
 800017a:	f083 0301 	eor.w	r3, r3, #1
 800017e:	b2db      	uxtb	r3, r3
 8000180:	2b00      	cmp	r3, #0
 8000182:	d001      	beq.n	8000188 <DW_ReadReg+0x3c>
        return HAL_ERROR;
 8000184:	2301      	movs	r3, #1
 8000186:	e026      	b.n	80001d6 <DW_ReadReg+0x8a>
    }

    HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	2110      	movs	r1, #16
 800018c:	4814      	ldr	r0, [pc, #80]	@ (80001e0 <DW_ReadReg+0x94>)
 800018e:	f000 ff5f 	bl	8001050 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi1, &header, 1, HAL_MAX_DELAY);
 8000192:	f107 010e 	add.w	r1, r7, #14
 8000196:	f04f 33ff 	mov.w	r3, #4294967295
 800019a:	2201      	movs	r2, #1
 800019c:	4811      	ldr	r0, [pc, #68]	@ (80001e4 <DW_ReadReg+0x98>)
 800019e:	f001 fbd3 	bl	8001948 <HAL_SPI_Transmit>
 80001a2:	4603      	mov	r3, r0
 80001a4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 80001a6:	7bfb      	ldrb	r3, [r7, #15]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d109      	bne.n	80001c0 <DW_ReadReg+0x74>
        status = HAL_SPI_Receive(&hspi1, data, length, HAL_MAX_DELAY);
 80001ac:	79bb      	ldrb	r3, [r7, #6]
 80001ae:	b29a      	uxth	r2, r3
 80001b0:	f04f 33ff 	mov.w	r3, #4294967295
 80001b4:	6839      	ldr	r1, [r7, #0]
 80001b6:	480b      	ldr	r0, [pc, #44]	@ (80001e4 <DW_ReadReg+0x98>)
 80001b8:	f001 fd0a 	bl	8001bd0 <HAL_SPI_Receive>
 80001bc:	4603      	mov	r3, r0
 80001be:	73fb      	strb	r3, [r7, #15]
    }
    HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_SET);
 80001c0:	2201      	movs	r2, #1
 80001c2:	2110      	movs	r1, #16
 80001c4:	4806      	ldr	r0, [pc, #24]	@ (80001e0 <DW_ReadReg+0x94>)
 80001c6:	f000 ff43 	bl	8001050 <HAL_GPIO_WritePin>
    
    return (status == HAL_OK) ? HAL_OK : HAL_ERROR;
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	bf14      	ite	ne
 80001d0:	2301      	movne	r3, #1
 80001d2:	2300      	moveq	r3, #0
 80001d4:	b2db      	uxtb	r3, r3
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3710      	adds	r7, #16
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	40010800 	.word	0x40010800
 80001e4:	20000084 	.word	0x20000084

080001e8 <DW_WriteReg>:
  * @param  data: Pointer to data buffer
  * @param  length: Number of bytes to write
  * @retval HAL_OK on success, HAL_ERROR on failure
  */
uint32_t DW_WriteReg(uint8_t reg_addr, uint8_t* data, uint8_t length)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
 80001f4:	4613      	mov	r3, r2
 80001f6:	71bb      	strb	r3, [r7, #6]
    uint8_t header = (reg_addr & 0x3F) | 0x80; // Bit 7=1 (write)
 80001f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000200:	b25b      	sxtb	r3, r3
 8000202:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000206:	b25b      	sxtb	r3, r3
 8000208:	b2db      	uxtb	r3, r3
 800020a:	73bb      	strb	r3, [r7, #14]

    if (!data || !DW_ValidateRegisterAccess(reg_addr, length)) {
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d00b      	beq.n	800022a <DW_WriteReg+0x42>
 8000212:	79ba      	ldrb	r2, [r7, #6]
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	4611      	mov	r1, r2
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f855 	bl	80002c8 <DW_ValidateRegisterAccess>
 800021e:	4603      	mov	r3, r0
 8000220:	f083 0301 	eor.w	r3, r3, #1
 8000224:	b2db      	uxtb	r3, r3
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <DW_WriteReg+0x46>
        return HAL_ERROR;
 800022a:	2301      	movs	r3, #1
 800022c:	e026      	b.n	800027c <DW_WriteReg+0x94>
    }

    HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2110      	movs	r1, #16
 8000232:	4814      	ldr	r0, [pc, #80]	@ (8000284 <DW_WriteReg+0x9c>)
 8000234:	f000 ff0c 	bl	8001050 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi1, &header, 1, HAL_MAX_DELAY);
 8000238:	f107 010e 	add.w	r1, r7, #14
 800023c:	f04f 33ff 	mov.w	r3, #4294967295
 8000240:	2201      	movs	r2, #1
 8000242:	4811      	ldr	r0, [pc, #68]	@ (8000288 <DW_WriteReg+0xa0>)
 8000244:	f001 fb80 	bl	8001948 <HAL_SPI_Transmit>
 8000248:	4603      	mov	r3, r0
 800024a:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d109      	bne.n	8000266 <DW_WriteReg+0x7e>
        status = HAL_SPI_Transmit(&hspi1, data, length, HAL_MAX_DELAY);
 8000252:	79bb      	ldrb	r3, [r7, #6]
 8000254:	b29a      	uxth	r2, r3
 8000256:	f04f 33ff 	mov.w	r3, #4294967295
 800025a:	6839      	ldr	r1, [r7, #0]
 800025c:	480a      	ldr	r0, [pc, #40]	@ (8000288 <DW_WriteReg+0xa0>)
 800025e:	f001 fb73 	bl	8001948 <HAL_SPI_Transmit>
 8000262:	4603      	mov	r3, r0
 8000264:	73fb      	strb	r3, [r7, #15]
    }
    HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_SET);
 8000266:	2201      	movs	r2, #1
 8000268:	2110      	movs	r1, #16
 800026a:	4806      	ldr	r0, [pc, #24]	@ (8000284 <DW_WriteReg+0x9c>)
 800026c:	f000 fef0 	bl	8001050 <HAL_GPIO_WritePin>

    return (status == HAL_OK) ? HAL_OK : HAL_ERROR;
 8000270:	7bfb      	ldrb	r3, [r7, #15]
 8000272:	2b00      	cmp	r3, #0
 8000274:	bf14      	ite	ne
 8000276:	2301      	movne	r3, #1
 8000278:	2300      	moveq	r3, #0
 800027a:	b2db      	uxtb	r3, r3
}
 800027c:	4618      	mov	r0, r3
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	40010800 	.word	0x40010800
 8000288:	20000084 	.word	0x20000084

0800028c <DW_ReadDevID>:
/**
  * @brief  Reads the 32-bit Device ID (register 0x00)
  * @retval Device ID or 0xFFFFFFFF on error
  */
uint32_t DW_ReadDevID(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
    uint8_t data[4];
    if (DW_ReadReg(DW_REG_DEV_ID, data, sizeof(data)) != HAL_OK) {
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2204      	movs	r2, #4
 8000296:	4619      	mov	r1, r3
 8000298:	2000      	movs	r0, #0
 800029a:	f7ff ff57 	bl	800014c <DW_ReadReg>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d002      	beq.n	80002aa <DW_ReadDevID+0x1e>
        return 0xFFFFFFFF;
 80002a4:	f04f 33ff 	mov.w	r3, #4294967295
 80002a8:	e009      	b.n	80002be <DW_ReadDevID+0x32>
    }
    return (uint32_t)data[3] << 24 | 
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	061a      	lsls	r2, r3, #24
           (uint32_t)data[2] << 16 | 
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	041b      	lsls	r3, r3, #16
    return (uint32_t)data[3] << 24 | 
 80002b2:	431a      	orrs	r2, r3
           (uint32_t)data[1] << 8  | 
 80002b4:	797b      	ldrb	r3, [r7, #5]
 80002b6:	021b      	lsls	r3, r3, #8
           (uint32_t)data[2] << 16 | 
 80002b8:	4313      	orrs	r3, r2
           data[0];
 80002ba:	793a      	ldrb	r2, [r7, #4]
           (uint32_t)data[1] << 8  | 
 80002bc:	4313      	orrs	r3, r2
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <DW_ValidateRegisterAccess>:
  * @param  reg_addr: Register address to validate
  * @param  length: Requested data length
  * @retval true if valid, false otherwise
  */
static bool DW_ValidateRegisterAccess(uint8_t reg_addr, uint8_t length)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	460a      	mov	r2, r1
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	4613      	mov	r3, r2
 80002d6:	71bb      	strb	r3, [r7, #6]
    // Check if register exists in predefined map
    for (uint8_t i = 0; i < sizeof(DW_Registers)/sizeof(DW_RegisterDef); i++) {
 80002d8:	2300      	movs	r3, #0
 80002da:	73fb      	strb	r3, [r7, #15]
 80002dc:	e01d      	b.n	800031a <DW_ValidateRegisterAccess+0x52>
        if (DW_Registers[i].address == reg_addr) {
 80002de:	7bfa      	ldrb	r2, [r7, #15]
 80002e0:	4912      	ldr	r1, [pc, #72]	@ (800032c <DW_ValidateRegisterAccess+0x64>)
 80002e2:	4613      	mov	r3, r2
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	4413      	add	r3, r2
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	440b      	add	r3, r1
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	79fa      	ldrb	r2, [r7, #7]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d10f      	bne.n	8000314 <DW_ValidateRegisterAccess+0x4c>
            // Validate length and access type
            if (length > DW_Registers[i].length) {
 80002f4:	7bfa      	ldrb	r2, [r7, #15]
 80002f6:	490d      	ldr	r1, [pc, #52]	@ (800032c <DW_ValidateRegisterAccess+0x64>)
 80002f8:	4613      	mov	r3, r2
 80002fa:	005b      	lsls	r3, r3, #1
 80002fc:	4413      	add	r3, r2
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	440b      	add	r3, r1
 8000302:	3301      	adds	r3, #1
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	79ba      	ldrb	r2, [r7, #6]
 8000308:	429a      	cmp	r2, r3
 800030a:	d901      	bls.n	8000310 <DW_ValidateRegisterAccess+0x48>
                return false;
 800030c:	2300      	movs	r3, #0
 800030e:	e008      	b.n	8000322 <DW_ValidateRegisterAccess+0x5a>
            }
            return true;
 8000310:	2301      	movs	r3, #1
 8000312:	e006      	b.n	8000322 <DW_ValidateRegisterAccess+0x5a>
    for (uint8_t i = 0; i < sizeof(DW_Registers)/sizeof(DW_RegisterDef); i++) {
 8000314:	7bfb      	ldrb	r3, [r7, #15]
 8000316:	3301      	adds	r3, #1
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	7bfb      	ldrb	r3, [r7, #15]
 800031c:	2b26      	cmp	r3, #38	@ 0x26
 800031e:	d9de      	bls.n	80002de <DW_ValidateRegisterAccess+0x16>
        }
    }
    return false;
 8000320:	2300      	movs	r3, #0
}
 8000322:	4618      	mov	r0, r3
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	08003f14 	.word	0x08003f14

08000330 <DW_ReadAllRegisters>:
  * @brief  Reads all DW1000 registers into a structure
  * @param  regs: Pointer to register structure
  * @retval HAL_OK on success, HAL_ERROR on failure
  */
HAL_StatusTypeDef DW_ReadAllRegisters(DW1000_Registers_t *regs)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
    if (!regs) return HAL_ERROR;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d101      	bne.n	8000342 <DW_ReadAllRegisters+0x12>
 800033e:	2301      	movs	r3, #1
 8000340:	e09b      	b.n	800047a <DW_ReadAllRegisters+0x14a>

    /* Device Identification */
    if (DW_ReadReg(DW_REG_DEV_ID, (uint8_t*)&regs->DEV_ID, 4) != HAL_OK) return HAL_ERROR;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2204      	movs	r2, #4
 8000346:	4619      	mov	r1, r3
 8000348:	2000      	movs	r0, #0
 800034a:	f7ff feff 	bl	800014c <DW_ReadReg>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <DW_ReadAllRegisters+0x28>
 8000354:	2301      	movs	r3, #1
 8000356:	e090      	b.n	800047a <DW_ReadAllRegisters+0x14a>
    if (DW_ReadReg(DW_REG_EUI, regs->EUI, 8) != HAL_OK) return HAL_ERROR;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3304      	adds	r3, #4
 800035c:	2208      	movs	r2, #8
 800035e:	4619      	mov	r1, r3
 8000360:	2001      	movs	r0, #1
 8000362:	f7ff fef3 	bl	800014c <DW_ReadReg>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <DW_ReadAllRegisters+0x40>
 800036c:	2301      	movs	r3, #1
 800036e:	e084      	b.n	800047a <DW_ReadAllRegisters+0x14a>

    /* Network Configuration */
    if (DW_ReadReg(DW_REG_PANADR, regs->PANADR, 4) != HAL_OK) return HAL_ERROR;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	330c      	adds	r3, #12
 8000374:	2204      	movs	r2, #4
 8000376:	4619      	mov	r1, r3
 8000378:	2003      	movs	r0, #3
 800037a:	f7ff fee7 	bl	800014c <DW_ReadReg>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <DW_ReadAllRegisters+0x58>
 8000384:	2301      	movs	r3, #1
 8000386:	e078      	b.n	800047a <DW_ReadAllRegisters+0x14a>
    if (DW_ReadReg(DW_REG_SYS_CFG, (uint8_t*)&regs->SYS_CFG, 4) != HAL_OK) return HAL_ERROR;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3310      	adds	r3, #16
 800038c:	2204      	movs	r2, #4
 800038e:	4619      	mov	r1, r3
 8000390:	2004      	movs	r0, #4
 8000392:	f7ff fedb 	bl	800014c <DW_ReadReg>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <DW_ReadAllRegisters+0x70>
 800039c:	2301      	movs	r3, #1
 800039e:	e06c      	b.n	800047a <DW_ReadAllRegisters+0x14a>

    /* Time Management */
    if (DW_ReadReg(DW_REG_SYS_TIME, regs->SYS_TIME, 5) != HAL_OK) return HAL_ERROR;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	3314      	adds	r3, #20
 80003a4:	2205      	movs	r2, #5
 80003a6:	4619      	mov	r1, r3
 80003a8:	2006      	movs	r0, #6
 80003aa:	f7ff fecf 	bl	800014c <DW_ReadReg>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <DW_ReadAllRegisters+0x88>
 80003b4:	2301      	movs	r3, #1
 80003b6:	e060      	b.n	800047a <DW_ReadAllRegisters+0x14a>
    if (DW_ReadReg(DW_REG_DX_TIME, regs->DX_TIME, 5) != HAL_OK) return HAL_ERROR;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3319      	adds	r3, #25
 80003bc:	2205      	movs	r2, #5
 80003be:	4619      	mov	r1, r3
 80003c0:	200a      	movs	r0, #10
 80003c2:	f7ff fec3 	bl	800014c <DW_ReadReg>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <DW_ReadAllRegisters+0xa0>
 80003cc:	2301      	movs	r3, #1
 80003ce:	e054      	b.n	800047a <DW_ReadAllRegisters+0x14a>
    if (DW_ReadReg(DW_REG_RX_FWTO, (uint8_t*)&regs->RX_FWTO, 2) != HAL_OK) return HAL_ERROR;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	331e      	adds	r3, #30
 80003d4:	2202      	movs	r2, #2
 80003d6:	4619      	mov	r1, r3
 80003d8:	200c      	movs	r0, #12
 80003da:	f7ff feb7 	bl	800014c <DW_ReadReg>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <DW_ReadAllRegisters+0xb8>
 80003e4:	2301      	movs	r3, #1
 80003e6:	e048      	b.n	800047a <DW_ReadAllRegisters+0x14a>

    /* System Control */
    if (DW_ReadReg(DW_REG_SYS_CTRL, (uint8_t*)&regs->SYS_CTRL, 4) != HAL_OK) return HAL_ERROR;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	3320      	adds	r3, #32
 80003ec:	2204      	movs	r2, #4
 80003ee:	4619      	mov	r1, r3
 80003f0:	200d      	movs	r0, #13
 80003f2:	f7ff feab 	bl	800014c <DW_ReadReg>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <DW_ReadAllRegisters+0xd0>
 80003fc:	2301      	movs	r3, #1
 80003fe:	e03c      	b.n	800047a <DW_ReadAllRegisters+0x14a>
    if (DW_ReadReg(DW_REG_SYS_MASK, (uint8_t*)&regs->SYS_MASK, 4) != HAL_OK) return HAL_ERROR;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3324      	adds	r3, #36	@ 0x24
 8000404:	2204      	movs	r2, #4
 8000406:	4619      	mov	r1, r3
 8000408:	200e      	movs	r0, #14
 800040a:	f7ff fe9f 	bl	800014c <DW_ReadReg>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <DW_ReadAllRegisters+0xe8>
 8000414:	2301      	movs	r3, #1
 8000416:	e030      	b.n	800047a <DW_ReadAllRegisters+0x14a>
    if (DW_ReadReg(DW_REG_SYS_STATUS, regs->SYS_STATUS, 5) != HAL_OK) return HAL_ERROR;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3328      	adds	r3, #40	@ 0x28
 800041c:	2205      	movs	r2, #5
 800041e:	4619      	mov	r1, r3
 8000420:	200f      	movs	r0, #15
 8000422:	f7ff fe93 	bl	800014c <DW_ReadReg>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <DW_ReadAllRegisters+0x100>
 800042c:	2301      	movs	r3, #1
 800042e:	e024      	b.n	800047a <DW_ReadAllRegisters+0x14a>

    /* Channel Control */
    if (DW_ReadReg(DW_REG_TX_POWER, regs->TX_POWER, 4) != HAL_OK) return HAL_ERROR;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	332d      	adds	r3, #45	@ 0x2d
 8000434:	2204      	movs	r2, #4
 8000436:	4619      	mov	r1, r3
 8000438:	201e      	movs	r0, #30
 800043a:	f7ff fe87 	bl	800014c <DW_ReadReg>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <DW_ReadAllRegisters+0x118>
 8000444:	2301      	movs	r3, #1
 8000446:	e018      	b.n	800047a <DW_ReadAllRegisters+0x14a>
    if (DW_ReadReg(DW_REG_CHAN_CTRL, (uint8_t*)&regs->CHAN_CTRL, 4) != HAL_OK) return HAL_ERROR;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3334      	adds	r3, #52	@ 0x34
 800044c:	2204      	movs	r2, #4
 800044e:	4619      	mov	r1, r3
 8000450:	201f      	movs	r0, #31
 8000452:	f7ff fe7b 	bl	800014c <DW_ReadReg>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <DW_ReadAllRegisters+0x130>
 800045c:	2301      	movs	r3, #1
 800045e:	e00c      	b.n	800047a <DW_ReadAllRegisters+0x14a>

    /* Power Management */
    if (DW_ReadReg(DW_REG_PMSC, regs->PMSC, 48) != HAL_OK) return HAL_ERROR;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	3338      	adds	r3, #56	@ 0x38
 8000464:	2230      	movs	r2, #48	@ 0x30
 8000466:	4619      	mov	r1, r3
 8000468:	2036      	movs	r0, #54	@ 0x36
 800046a:	f7ff fe6f 	bl	800014c <DW_ReadReg>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <DW_ReadAllRegisters+0x148>
 8000474:	2301      	movs	r3, #1
 8000476:	e000      	b.n	800047a <DW_ReadAllRegisters+0x14a>

    /* Add reads for other important registers */

    return HAL_OK;
 8000478:	2300      	movs	r3, #0
}
 800047a:	4618      	mov	r0, r3
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <DW_WriteAndVerifyEUI>:
  * @brief  Writes EUI and verifies the write operation
  * @param  eui: Pointer to 8-byte EUI data
  * @retval HAL_OK if write and verification succeed, HAL_ERROR on failure
  */
HAL_StatusTypeDef DW_WriteAndVerifyEUI(uint8_t* eui)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b084      	sub	sp, #16
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
    uint8_t read_back_eui[8];

    /* Step 1: Write the EUI */
    if (DW_WriteReg(DW_REG_EUI, eui, 8) != HAL_OK) {
 800048a:	2208      	movs	r2, #8
 800048c:	6879      	ldr	r1, [r7, #4]
 800048e:	2001      	movs	r0, #1
 8000490:	f7ff feaa 	bl	80001e8 <DW_WriteReg>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <DW_WriteAndVerifyEUI+0x1c>
        return HAL_ERROR;
 800049a:	2301      	movs	r3, #1
 800049c:	e01a      	b.n	80004d4 <DW_WriteAndVerifyEUI+0x52>
    }

    /* Step 2: Read back the EUI */
    if (DW_ReadReg(DW_REG_EUI, read_back_eui, 8) != HAL_OK) {
 800049e:	f107 0308 	add.w	r3, r7, #8
 80004a2:	2208      	movs	r2, #8
 80004a4:	4619      	mov	r1, r3
 80004a6:	2001      	movs	r0, #1
 80004a8:	f7ff fe50 	bl	800014c <DW_ReadReg>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <DW_WriteAndVerifyEUI+0x34>
        return HAL_ERROR;
 80004b2:	2301      	movs	r3, #1
 80004b4:	e00e      	b.n	80004d4 <DW_WriteAndVerifyEUI+0x52>
    }

    /* Step 3: Verify the written data */
    if (!DW_CompareEUI(eui, read_back_eui)) {
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	4619      	mov	r1, r3
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f000 f80d 	bl	80004dc <DW_CompareEUI>
 80004c2:	4603      	mov	r3, r0
 80004c4:	f083 0301 	eor.w	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <DW_WriteAndVerifyEUI+0x50>
        return HAL_ERROR;
 80004ce:	2301      	movs	r3, #1
 80004d0:	e000      	b.n	80004d4 <DW_WriteAndVerifyEUI+0x52>
    }

    return HAL_OK;
 80004d2:	2300      	movs	r3, #0
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3710      	adds	r7, #16
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <DW_CompareEUI>:
  * @param  eui1: First EUI to compare
  * @param  eui2: Second EUI to compare
  * @retval true if EUIs match, false otherwise
  */
bool DW_CompareEUI(uint8_t* eui1, uint8_t* eui2)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < 8; i++) {
 80004e6:	2300      	movs	r3, #0
 80004e8:	73fb      	strb	r3, [r7, #15]
 80004ea:	e00e      	b.n	800050a <DW_CompareEUI+0x2e>
        if (eui1[i] != eui2[i]) {
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	781a      	ldrb	r2, [r3, #0]
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	6839      	ldr	r1, [r7, #0]
 80004f8:	440b      	add	r3, r1
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d001      	beq.n	8000504 <DW_CompareEUI+0x28>
            return false;
 8000500:	2300      	movs	r3, #0
 8000502:	e006      	b.n	8000512 <DW_CompareEUI+0x36>
    for (uint8_t i = 0; i < 8; i++) {
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	3301      	adds	r3, #1
 8000508:	73fb      	strb	r3, [r7, #15]
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	2b07      	cmp	r3, #7
 800050e:	d9ed      	bls.n	80004ec <DW_CompareEUI+0x10>
        }
    }
    return true;
 8000510:	2301      	movs	r3, #1
}
 8000512:	4618      	mov	r0, r3
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 facb 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f863 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f8d1 	bl	80006d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800052e:	f000 f899 	bl	8000664 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  DevID= DW_ReadDevID();
 8000532:	f7ff feab 	bl	800028c <DW_ReadDevID>
 8000536:	4603      	mov	r3, r0
 8000538:	4a26      	ldr	r2, [pc, #152]	@ (80005d4 <main+0xb8>)
 800053a:	6013      	str	r3, [r2, #0]
  DW_ReadReg(DW_REG_SYS_CFG, sys_cfg, sizeof(sys_cfg));
 800053c:	2204      	movs	r2, #4
 800053e:	4926      	ldr	r1, [pc, #152]	@ (80005d8 <main+0xbc>)
 8000540:	2004      	movs	r0, #4
 8000542:	f7ff fe03 	bl	800014c <DW_ReadReg>
  DW_ReadAllRegisters(&dw_registers);
 8000546:	4825      	ldr	r0, [pc, #148]	@ (80005dc <main+0xc0>)
 8000548:	f7ff fef2 	bl	8000330 <DW_ReadAllRegisters>

  /* In your application code */
  uint8_t eui[8] = {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF};
 800054c:	4a24      	ldr	r2, [pc, #144]	@ (80005e0 <main+0xc4>)
 800054e:	463b      	mov	r3, r7
 8000550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000554:	e883 0003 	stmia.w	r3, {r0, r1}

  if (DW_WriteAndVerifyEUI(eui) == HAL_OK) {
 8000558:	463b      	mov	r3, r7
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ff91 	bl	8000482 <DW_WriteAndVerifyEUI>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d105      	bne.n	8000572 <main+0x56>
	  DW_ReadReg(DW_REG_EUI, current_eui, 8);
 8000566:	2208      	movs	r2, #8
 8000568:	491e      	ldr	r1, [pc, #120]	@ (80005e4 <main+0xc8>)
 800056a:	2001      	movs	r0, #1
 800056c:	f7ff fdee 	bl	800014c <DW_ReadReg>
 8000570:	e02d      	b.n	80005ce <main+0xb2>
  } else {


      /* Debug output */

      DW_ReadReg(DW_REG_EUI, current_eui, 8);
 8000572:	2208      	movs	r2, #8
 8000574:	491b      	ldr	r1, [pc, #108]	@ (80005e4 <main+0xc8>)
 8000576:	2001      	movs	r0, #1
 8000578:	f7ff fde8 	bl	800014c <DW_ReadReg>

      for (int i = 0; i < 8; i++) printf("%02X ", eui[i]);
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	e00a      	b.n	8000598 <main+0x7c>
 8000582:	463a      	mov	r2, r7
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4619      	mov	r1, r3
 800058c:	4816      	ldr	r0, [pc, #88]	@ (80005e8 <main+0xcc>)
 800058e:	f001 ffaf 	bl	80024f0 <iprintf>
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	3301      	adds	r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2b07      	cmp	r3, #7
 800059c:	ddf1      	ble.n	8000582 <main+0x66>
      printf("\nActual:   ");
 800059e:	4813      	ldr	r0, [pc, #76]	@ (80005ec <main+0xd0>)
 80005a0:	f001 ffa6 	bl	80024f0 <iprintf>
      for (int i = 0; i < 8; i++) printf("%02X ", current_eui[i]);
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	e00a      	b.n	80005c0 <main+0xa4>
 80005aa:	4a0e      	ldr	r2, [pc, #56]	@ (80005e4 <main+0xc8>)
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	4413      	add	r3, r2
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	4619      	mov	r1, r3
 80005b4:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <main+0xcc>)
 80005b6:	f001 ff9b 	bl	80024f0 <iprintf>
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	3301      	adds	r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	2b07      	cmp	r3, #7
 80005c4:	ddf1      	ble.n	80005aa <main+0x8e>
      printf("\n");
 80005c6:	200a      	movs	r0, #10
 80005c8:	f001 ffa4 	bl	8002514 <putchar>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	e7fd      	b.n	80005ce <main+0xb2>
 80005d2:	bf00      	nop
 80005d4:	200000dc 	.word	0x200000dc
 80005d8:	200000e0 	.word	0x200000e0
 80005dc:	200000e4 	.word	0x200000e4
 80005e0:	08003f0c 	.word	0x08003f0c
 80005e4:	2000014c 	.word	0x2000014c
 80005e8:	08003ef8 	.word	0x08003ef8
 80005ec:	08003f00 	.word	0x08003f00

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b090      	sub	sp, #64	@ 0x40
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	2228      	movs	r2, #40	@ 0x28
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 ffd3 	bl	80025aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000612:	2301      	movs	r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000616:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800061c:	2300      	movs	r3, #0
 800061e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0318 	add.w	r3, r7, #24
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fd2b 	bl	8001080 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000630:	f000 f8ca 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f000 ff99 	bl	8001584 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000658:	f000 f8b6 	bl	80007c8 <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3740      	adds	r7, #64	@ 0x40
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000668:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <MX_SPI1_Init+0x64>)
 800066a:	4a18      	ldr	r2, [pc, #96]	@ (80006cc <MX_SPI1_Init+0x68>)
 800066c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800066e:	4b16      	ldr	r3, [pc, #88]	@ (80006c8 <MX_SPI1_Init+0x64>)
 8000670:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000674:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000676:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <MX_SPI1_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800067c:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <MX_SPI1_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_SPI1_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_SPI1_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_SPI1_Init+0x64>)
 8000690:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000694:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000696:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_SPI1_Init+0x64>)
 8000698:	2210      	movs	r2, #16
 800069a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800069c:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <MX_SPI1_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006a2:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_SPI1_Init+0x64>)
 80006b0:	220a      	movs	r2, #10
 80006b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <MX_SPI1_Init+0x64>)
 80006b6:	f001 f8c3 	bl	8001840 <HAL_SPI_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006c0:	f000 f882 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000084 	.word	0x20000084
 80006cc:	40013000 	.word	0x40013000

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e4:	4b34      	ldr	r3, [pc, #208]	@ (80007b8 <MX_GPIO_Init+0xe8>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a33      	ldr	r2, [pc, #204]	@ (80007b8 <MX_GPIO_Init+0xe8>)
 80006ea:	f043 0320 	orr.w	r3, r3, #32
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b31      	ldr	r3, [pc, #196]	@ (80007b8 <MX_GPIO_Init+0xe8>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0320 	and.w	r3, r3, #32
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b2e      	ldr	r3, [pc, #184]	@ (80007b8 <MX_GPIO_Init+0xe8>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a2d      	ldr	r2, [pc, #180]	@ (80007b8 <MX_GPIO_Init+0xe8>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b2b      	ldr	r3, [pc, #172]	@ (80007b8 <MX_GPIO_Init+0xe8>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000714:	4b28      	ldr	r3, [pc, #160]	@ (80007b8 <MX_GPIO_Init+0xe8>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a27      	ldr	r2, [pc, #156]	@ (80007b8 <MX_GPIO_Init+0xe8>)
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b25      	ldr	r3, [pc, #148]	@ (80007b8 <MX_GPIO_Init+0xe8>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0308 	and.w	r3, r3, #8
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICS_GPIO_Port, SPICS_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2110      	movs	r1, #16
 8000730:	4822      	ldr	r0, [pc, #136]	@ (80007bc <MX_GPIO_Init+0xec>)
 8000732:	f000 fc8d 	bl	8001050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WAKEUP_GPIO_Port, WAKEUP_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800073c:	4820      	ldr	r0, [pc, #128]	@ (80007c0 <MX_GPIO_Init+0xf0>)
 800073e:	f000 fc87 	bl	8001050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPICS_Pin */
  GPIO_InitStruct.Pin = SPICS_Pin;
 8000742:	2310      	movs	r3, #16
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2302      	movs	r3, #2
 8000750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPICS_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	4619      	mov	r1, r3
 8000758:	4818      	ldr	r0, [pc, #96]	@ (80007bc <MX_GPIO_Init+0xec>)
 800075a:	f000 faf5 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPIRQ_Pin */
  GPIO_InitStruct.Pin = SPIRQ_Pin;
 800075e:	2301      	movs	r3, #1
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_GPIO_Init+0xf4>)
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRQ_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4619      	mov	r1, r3
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <MX_GPIO_Init+0xf0>)
 8000772:	f000 fae9 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RSTN_Pin EXTON_Pin */
  GPIO_InitStruct.Pin = RSTN_Pin|EXTON_Pin;
 8000776:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4619      	mov	r1, r3
 800078a:	480d      	ldr	r0, [pc, #52]	@ (80007c0 <MX_GPIO_Init+0xf0>)
 800078c:	f000 fadc 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8000790:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2302      	movs	r3, #2
 80007a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_GPIO_Init+0xf0>)
 80007aa:	f000 facd 	bl	8000d48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ae:	bf00      	nop
 80007b0:	3720      	adds	r7, #32
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010800 	.word	0x40010800
 80007c0:	40010c00 	.word	0x40010c00
 80007c4:	10110000 	.word	0x10110000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <HAL_MspInit+0x5c>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a14      	ldr	r2, [pc, #80]	@ (8000830 <HAL_MspInit+0x5c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <HAL_MspInit+0x5c>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <HAL_MspInit+0x5c>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000830 <HAL_MspInit+0x5c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <HAL_MspInit+0x5c>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800080a:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <HAL_MspInit+0x60>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	4a04      	ldr	r2, [pc, #16]	@ (8000834 <HAL_MspInit+0x60>)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	40021000 	.word	0x40021000
 8000834:	40010000 	.word	0x40010000

08000838 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a1b      	ldr	r2, [pc, #108]	@ (80008c0 <HAL_SPI_MspInit+0x88>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d12f      	bne.n	80008b8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000858:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <HAL_SPI_MspInit+0x8c>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a19      	ldr	r2, [pc, #100]	@ (80008c4 <HAL_SPI_MspInit+0x8c>)
 800085e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <HAL_SPI_MspInit+0x8c>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <HAL_SPI_MspInit+0x8c>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a13      	ldr	r2, [pc, #76]	@ (80008c4 <HAL_SPI_MspInit+0x8c>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <HAL_SPI_MspInit+0x8c>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPISCK_Pin|SPIMOSI_Pin;
 8000888:	23a0      	movs	r3, #160	@ 0xa0
 800088a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4619      	mov	r1, r3
 800089a:	480b      	ldr	r0, [pc, #44]	@ (80008c8 <HAL_SPI_MspInit+0x90>)
 800089c:	f000 fa54 	bl	8000d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPIMISO_Pin;
 80008a0:	2340      	movs	r3, #64	@ 0x40
 80008a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPIMISO_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <HAL_SPI_MspInit+0x90>)
 80008b4:	f000 fa48 	bl	8000d48 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80008b8:	bf00      	nop
 80008ba:	3720      	adds	r7, #32
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40013000 	.word	0x40013000
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40010800 	.word	0x40010800

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <NMI_Handler+0x4>

080008d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <MemManage_Handler+0x4>

080008e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091c:	f000 f914 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	e00a      	b.n	800094c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000936:	f3af 8000 	nop.w
 800093a:	4601      	mov	r1, r0
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	60ba      	str	r2, [r7, #8]
 8000942:	b2ca      	uxtb	r2, r1
 8000944:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	3301      	adds	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	429a      	cmp	r2, r3
 8000952:	dbf0      	blt.n	8000936 <_read+0x12>
  }

  return len;
 8000954:	687b      	ldr	r3, [r7, #4]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	e009      	b.n	8000984 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	1c5a      	adds	r2, r3, #1
 8000974:	60ba      	str	r2, [r7, #8]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	3301      	adds	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	429a      	cmp	r2, r3
 800098a:	dbf1      	blt.n	8000970 <_write+0x12>
  }
  return len;
 800098c:	687b      	ldr	r3, [r7, #4]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <_close>:

int _close(int file)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009bc:	605a      	str	r2, [r3, #4]
  return 0;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr

080009ca <_isatty>:

int _isatty(int file)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr

080009de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009de:	b480      	push	{r7}
 80009e0:	b085      	sub	sp, #20
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009ea:	2300      	movs	r3, #0
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
	...

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	@ (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	@ (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f001 fe0e 	bl	8002648 <__errno>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20005000 	.word	0x20005000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	20000154 	.word	0x20000154
 8000a60:	200002a8 	.word	0x200002a8

08000a64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a70:	f7ff fff8 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a74:	480b      	ldr	r0, [pc, #44]	@ (8000aa4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a76:	490c      	ldr	r1, [pc, #48]	@ (8000aa8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a78:	4a0c      	ldr	r2, [pc, #48]	@ (8000aac <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a09      	ldr	r2, [pc, #36]	@ (8000ab0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a8c:	4c09      	ldr	r4, [pc, #36]	@ (8000ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f001 fddb 	bl	8002654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a9e:	f7ff fd3d 	bl	800051c <main>
  bx lr
 8000aa2:	4770      	bx	lr
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000aac:	08004148 	.word	0x08004148
  ldr r2, =_sbss
 8000ab0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ab4:	200002a8 	.word	0x200002a8

08000ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC1_2_IRQHandler>
	...

08000abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <HAL_Init+0x28>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	@ (8000ae4 <HAL_Init+0x28>)
 8000ac6:	f043 0310 	orr.w	r3, r3, #16
 8000aca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f907 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	200f      	movs	r0, #15
 8000ad4:	f000 f808 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff fe7c 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40022000 	.word	0x40022000

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af0:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <HAL_InitTick+0x54>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <HAL_InitTick+0x58>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f911 	bl	8000d2e <HAL_SYSTICK_Config>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00e      	b.n	8000b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d80a      	bhi.n	8000b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f000 f8e7 	bl	8000cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b28:	4a06      	ldr	r2, [pc, #24]	@ (8000b44 <HAL_InitTick+0x5c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <HAL_IncTick+0x1c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <HAL_IncTick+0x20>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a03      	ldr	r2, [pc, #12]	@ (8000b68 <HAL_IncTick+0x20>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000158 	.word	0x20000158

08000b6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b02      	ldr	r3, [pc, #8]	@ (8000b7c <HAL_GetTick+0x10>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	20000158 	.word	0x20000158

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	@ (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	@ (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	@ (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	@ 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	4313      	orrs	r3, r2
         );
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	@ 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff90 	bl	8000be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff49 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d08:	f7ff ff5e 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff90 	bl	8000c38 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5f 	bl	8000be4 <__NVIC_SetPriority>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffb0 	bl	8000c9c <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b08b      	sub	sp, #44	@ 0x2c
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5a:	e169      	b.n	8001030 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	69fa      	ldr	r2, [r7, #28]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	f040 8158 	bne.w	800102a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	4a9a      	ldr	r2, [pc, #616]	@ (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d05e      	beq.n	8000e42 <HAL_GPIO_Init+0xfa>
 8000d84:	4a98      	ldr	r2, [pc, #608]	@ (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d875      	bhi.n	8000e76 <HAL_GPIO_Init+0x12e>
 8000d8a:	4a98      	ldr	r2, [pc, #608]	@ (8000fec <HAL_GPIO_Init+0x2a4>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d058      	beq.n	8000e42 <HAL_GPIO_Init+0xfa>
 8000d90:	4a96      	ldr	r2, [pc, #600]	@ (8000fec <HAL_GPIO_Init+0x2a4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d86f      	bhi.n	8000e76 <HAL_GPIO_Init+0x12e>
 8000d96:	4a96      	ldr	r2, [pc, #600]	@ (8000ff0 <HAL_GPIO_Init+0x2a8>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d052      	beq.n	8000e42 <HAL_GPIO_Init+0xfa>
 8000d9c:	4a94      	ldr	r2, [pc, #592]	@ (8000ff0 <HAL_GPIO_Init+0x2a8>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d869      	bhi.n	8000e76 <HAL_GPIO_Init+0x12e>
 8000da2:	4a94      	ldr	r2, [pc, #592]	@ (8000ff4 <HAL_GPIO_Init+0x2ac>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d04c      	beq.n	8000e42 <HAL_GPIO_Init+0xfa>
 8000da8:	4a92      	ldr	r2, [pc, #584]	@ (8000ff4 <HAL_GPIO_Init+0x2ac>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d863      	bhi.n	8000e76 <HAL_GPIO_Init+0x12e>
 8000dae:	4a92      	ldr	r2, [pc, #584]	@ (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d046      	beq.n	8000e42 <HAL_GPIO_Init+0xfa>
 8000db4:	4a90      	ldr	r2, [pc, #576]	@ (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d85d      	bhi.n	8000e76 <HAL_GPIO_Init+0x12e>
 8000dba:	2b12      	cmp	r3, #18
 8000dbc:	d82a      	bhi.n	8000e14 <HAL_GPIO_Init+0xcc>
 8000dbe:	2b12      	cmp	r3, #18
 8000dc0:	d859      	bhi.n	8000e76 <HAL_GPIO_Init+0x12e>
 8000dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc8 <HAL_GPIO_Init+0x80>)
 8000dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc8:	08000e43 	.word	0x08000e43
 8000dcc:	08000e1d 	.word	0x08000e1d
 8000dd0:	08000e2f 	.word	0x08000e2f
 8000dd4:	08000e71 	.word	0x08000e71
 8000dd8:	08000e77 	.word	0x08000e77
 8000ddc:	08000e77 	.word	0x08000e77
 8000de0:	08000e77 	.word	0x08000e77
 8000de4:	08000e77 	.word	0x08000e77
 8000de8:	08000e77 	.word	0x08000e77
 8000dec:	08000e77 	.word	0x08000e77
 8000df0:	08000e77 	.word	0x08000e77
 8000df4:	08000e77 	.word	0x08000e77
 8000df8:	08000e77 	.word	0x08000e77
 8000dfc:	08000e77 	.word	0x08000e77
 8000e00:	08000e77 	.word	0x08000e77
 8000e04:	08000e77 	.word	0x08000e77
 8000e08:	08000e77 	.word	0x08000e77
 8000e0c:	08000e25 	.word	0x08000e25
 8000e10:	08000e39 	.word	0x08000e39
 8000e14:	4a79      	ldr	r2, [pc, #484]	@ (8000ffc <HAL_GPIO_Init+0x2b4>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d013      	beq.n	8000e42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e1a:	e02c      	b.n	8000e76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	623b      	str	r3, [r7, #32]
          break;
 8000e22:	e029      	b.n	8000e78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	623b      	str	r3, [r7, #32]
          break;
 8000e2c:	e024      	b.n	8000e78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	3308      	adds	r3, #8
 8000e34:	623b      	str	r3, [r7, #32]
          break;
 8000e36:	e01f      	b.n	8000e78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	330c      	adds	r3, #12
 8000e3e:	623b      	str	r3, [r7, #32]
          break;
 8000e40:	e01a      	b.n	8000e78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d102      	bne.n	8000e50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	623b      	str	r3, [r7, #32]
          break;
 8000e4e:	e013      	b.n	8000e78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d105      	bne.n	8000e64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	611a      	str	r2, [r3, #16]
          break;
 8000e62:	e009      	b.n	8000e78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e64:	2308      	movs	r3, #8
 8000e66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69fa      	ldr	r2, [r7, #28]
 8000e6c:	615a      	str	r2, [r3, #20]
          break;
 8000e6e:	e003      	b.n	8000e78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
          break;
 8000e74:	e000      	b.n	8000e78 <HAL_GPIO_Init+0x130>
          break;
 8000e76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	2bff      	cmp	r3, #255	@ 0xff
 8000e7c:	d801      	bhi.n	8000e82 <HAL_GPIO_Init+0x13a>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	e001      	b.n	8000e86 <HAL_GPIO_Init+0x13e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3304      	adds	r3, #4
 8000e86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	2bff      	cmp	r3, #255	@ 0xff
 8000e8c:	d802      	bhi.n	8000e94 <HAL_GPIO_Init+0x14c>
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	e002      	b.n	8000e9a <HAL_GPIO_Init+0x152>
 8000e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e96:	3b08      	subs	r3, #8
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	401a      	ands	r2, r3
 8000eac:	6a39      	ldr	r1, [r7, #32]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 80b1 	beq.w	800102a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ec8:	4b4d      	ldr	r3, [pc, #308]	@ (8001000 <HAL_GPIO_Init+0x2b8>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a4c      	ldr	r2, [pc, #304]	@ (8001000 <HAL_GPIO_Init+0x2b8>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b4a      	ldr	r3, [pc, #296]	@ (8001000 <HAL_GPIO_Init+0x2b8>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ee0:	4a48      	ldr	r2, [pc, #288]	@ (8001004 <HAL_GPIO_Init+0x2bc>)
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee4:	089b      	lsrs	r3, r3, #2
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	220f      	movs	r2, #15
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	4013      	ands	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a40      	ldr	r2, [pc, #256]	@ (8001008 <HAL_GPIO_Init+0x2c0>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d013      	beq.n	8000f34 <HAL_GPIO_Init+0x1ec>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800100c <HAL_GPIO_Init+0x2c4>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d00d      	beq.n	8000f30 <HAL_GPIO_Init+0x1e8>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a3e      	ldr	r2, [pc, #248]	@ (8001010 <HAL_GPIO_Init+0x2c8>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d007      	beq.n	8000f2c <HAL_GPIO_Init+0x1e4>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a3d      	ldr	r2, [pc, #244]	@ (8001014 <HAL_GPIO_Init+0x2cc>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d101      	bne.n	8000f28 <HAL_GPIO_Init+0x1e0>
 8000f24:	2303      	movs	r3, #3
 8000f26:	e006      	b.n	8000f36 <HAL_GPIO_Init+0x1ee>
 8000f28:	2304      	movs	r3, #4
 8000f2a:	e004      	b.n	8000f36 <HAL_GPIO_Init+0x1ee>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e002      	b.n	8000f36 <HAL_GPIO_Init+0x1ee>
 8000f30:	2301      	movs	r3, #1
 8000f32:	e000      	b.n	8000f36 <HAL_GPIO_Init+0x1ee>
 8000f34:	2300      	movs	r3, #0
 8000f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f38:	f002 0203 	and.w	r2, r2, #3
 8000f3c:	0092      	lsls	r2, r2, #2
 8000f3e:	4093      	lsls	r3, r2
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f46:	492f      	ldr	r1, [pc, #188]	@ (8001004 <HAL_GPIO_Init+0x2bc>)
 8000f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d006      	beq.n	8000f6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f60:	4b2d      	ldr	r3, [pc, #180]	@ (8001018 <HAL_GPIO_Init+0x2d0>)
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	492c      	ldr	r1, [pc, #176]	@ (8001018 <HAL_GPIO_Init+0x2d0>)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	608b      	str	r3, [r1, #8]
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001018 <HAL_GPIO_Init+0x2d0>)
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	4928      	ldr	r1, [pc, #160]	@ (8001018 <HAL_GPIO_Init+0x2d0>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d006      	beq.n	8000f96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f88:	4b23      	ldr	r3, [pc, #140]	@ (8001018 <HAL_GPIO_Init+0x2d0>)
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	4922      	ldr	r1, [pc, #136]	@ (8001018 <HAL_GPIO_Init+0x2d0>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	60cb      	str	r3, [r1, #12]
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f96:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <HAL_GPIO_Init+0x2d0>)
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	491e      	ldr	r1, [pc, #120]	@ (8001018 <HAL_GPIO_Init+0x2d0>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d006      	beq.n	8000fbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fb0:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <HAL_GPIO_Init+0x2d0>)
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	4918      	ldr	r1, [pc, #96]	@ (8001018 <HAL_GPIO_Init+0x2d0>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
 8000fbc:	e006      	b.n	8000fcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fbe:	4b16      	ldr	r3, [pc, #88]	@ (8001018 <HAL_GPIO_Init+0x2d0>)
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	4914      	ldr	r1, [pc, #80]	@ (8001018 <HAL_GPIO_Init+0x2d0>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d021      	beq.n	800101c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <HAL_GPIO_Init+0x2d0>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	490e      	ldr	r1, [pc, #56]	@ (8001018 <HAL_GPIO_Init+0x2d0>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	600b      	str	r3, [r1, #0]
 8000fe4:	e021      	b.n	800102a <HAL_GPIO_Init+0x2e2>
 8000fe6:	bf00      	nop
 8000fe8:	10320000 	.word	0x10320000
 8000fec:	10310000 	.word	0x10310000
 8000ff0:	10220000 	.word	0x10220000
 8000ff4:	10210000 	.word	0x10210000
 8000ff8:	10120000 	.word	0x10120000
 8000ffc:	10110000 	.word	0x10110000
 8001000:	40021000 	.word	0x40021000
 8001004:	40010000 	.word	0x40010000
 8001008:	40010800 	.word	0x40010800
 800100c:	40010c00 	.word	0x40010c00
 8001010:	40011000 	.word	0x40011000
 8001014:	40011400 	.word	0x40011400
 8001018:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <HAL_GPIO_Init+0x304>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	43db      	mvns	r3, r3
 8001024:	4909      	ldr	r1, [pc, #36]	@ (800104c <HAL_GPIO_Init+0x304>)
 8001026:	4013      	ands	r3, r2
 8001028:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800102a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102c:	3301      	adds	r3, #1
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001036:	fa22 f303 	lsr.w	r3, r2, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	f47f ae8e 	bne.w	8000d5c <HAL_GPIO_Init+0x14>
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	372c      	adds	r7, #44	@ 0x2c
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	40010400 	.word	0x40010400

08001050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
 800105c:	4613      	mov	r3, r2
 800105e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001060:	787b      	ldrb	r3, [r7, #1]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800106c:	e003      	b.n	8001076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	041a      	lsls	r2, r3, #16
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	611a      	str	r2, [r3, #16]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e272      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8087 	beq.w	80011ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010a0:	4b92      	ldr	r3, [pc, #584]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 030c 	and.w	r3, r3, #12
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d00c      	beq.n	80010c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010ac:	4b8f      	ldr	r3, [pc, #572]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d112      	bne.n	80010de <HAL_RCC_OscConfig+0x5e>
 80010b8:	4b8c      	ldr	r3, [pc, #560]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010c4:	d10b      	bne.n	80010de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c6:	4b89      	ldr	r3, [pc, #548]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d06c      	beq.n	80011ac <HAL_RCC_OscConfig+0x12c>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d168      	bne.n	80011ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e24c      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x76>
 80010e8:	4b80      	ldr	r3, [pc, #512]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a7f      	ldr	r2, [pc, #508]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	e02e      	b.n	8001154 <HAL_RCC_OscConfig+0xd4>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x98>
 80010fe:	4b7b      	ldr	r3, [pc, #492]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a7a      	ldr	r2, [pc, #488]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	4b78      	ldr	r3, [pc, #480]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a77      	ldr	r2, [pc, #476]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001110:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e01d      	b.n	8001154 <HAL_RCC_OscConfig+0xd4>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001120:	d10c      	bne.n	800113c <HAL_RCC_OscConfig+0xbc>
 8001122:	4b72      	ldr	r3, [pc, #456]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a71      	ldr	r2, [pc, #452]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b6f      	ldr	r3, [pc, #444]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a6e      	ldr	r2, [pc, #440]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e00b      	b.n	8001154 <HAL_RCC_OscConfig+0xd4>
 800113c:	4b6b      	ldr	r3, [pc, #428]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a6a      	ldr	r2, [pc, #424]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b68      	ldr	r3, [pc, #416]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a67      	ldr	r2, [pc, #412]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 800114e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001152:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d013      	beq.n	8001184 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fd06 	bl	8000b6c <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fd02 	bl	8000b6c <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	@ 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e200      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4b5d      	ldr	r3, [pc, #372]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0xe4>
 8001182:	e014      	b.n	80011ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fcf2 	bl	8000b6c <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fcee 	bl	8000b6c <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	@ 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e1ec      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119e:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x10c>
 80011aa:	e000      	b.n	80011ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d063      	beq.n	8001282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ba:	4b4c      	ldr	r3, [pc, #304]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011c6:	4b49      	ldr	r3, [pc, #292]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d11c      	bne.n	800120c <HAL_RCC_OscConfig+0x18c>
 80011d2:	4b46      	ldr	r3, [pc, #280]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d116      	bne.n	800120c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011de:	4b43      	ldr	r3, [pc, #268]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x176>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d001      	beq.n	80011f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e1c0      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	4b3d      	ldr	r3, [pc, #244]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	4939      	ldr	r1, [pc, #228]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120a:	e03a      	b.n	8001282 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d020      	beq.n	8001256 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001214:	4b36      	ldr	r3, [pc, #216]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121a:	f7ff fca7 	bl	8000b6c <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001222:	f7ff fca3 	bl	8000b6c <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e1a1      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	4b2d      	ldr	r3, [pc, #180]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001240:	4b2a      	ldr	r3, [pc, #168]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4927      	ldr	r1, [pc, #156]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
 8001254:	e015      	b.n	8001282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001256:	4b26      	ldr	r3, [pc, #152]	@ (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fc86 	bl	8000b6c <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001264:	f7ff fc82 	bl	8000b6c <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e180      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001276:	4b1d      	ldr	r3, [pc, #116]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d03a      	beq.n	8001304 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d019      	beq.n	80012ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001296:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129c:	f7ff fc66 	bl	8000b6c <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff fc62 	bl	8000b6c <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e160      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b6:	4b0d      	ldr	r3, [pc, #52]	@ (80012ec <HAL_RCC_OscConfig+0x26c>)
 80012b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f000 fa9e 	bl	8001804 <RCC_Delay>
 80012c8:	e01c      	b.n	8001304 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_RCC_OscConfig+0x274>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d0:	f7ff fc4c 	bl	8000b6c <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d6:	e00f      	b.n	80012f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d8:	f7ff fc48 	bl	8000b6c <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d908      	bls.n	80012f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e146      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
 80012ea:	bf00      	nop
 80012ec:	40021000 	.word	0x40021000
 80012f0:	42420000 	.word	0x42420000
 80012f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f8:	4b92      	ldr	r3, [pc, #584]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1e9      	bne.n	80012d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80a6 	beq.w	800145e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001316:	4b8b      	ldr	r3, [pc, #556]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10d      	bne.n	800133e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b88      	ldr	r3, [pc, #544]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a87      	ldr	r2, [pc, #540]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b85      	ldr	r3, [pc, #532]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800133a:	2301      	movs	r3, #1
 800133c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133e:	4b82      	ldr	r3, [pc, #520]	@ (8001548 <HAL_RCC_OscConfig+0x4c8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001346:	2b00      	cmp	r3, #0
 8001348:	d118      	bne.n	800137c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134a:	4b7f      	ldr	r3, [pc, #508]	@ (8001548 <HAL_RCC_OscConfig+0x4c8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a7e      	ldr	r2, [pc, #504]	@ (8001548 <HAL_RCC_OscConfig+0x4c8>)
 8001350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001356:	f7ff fc09 	bl	8000b6c <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135e:	f7ff fc05 	bl	8000b6c <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b64      	cmp	r3, #100	@ 0x64
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e103      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001370:	4b75      	ldr	r3, [pc, #468]	@ (8001548 <HAL_RCC_OscConfig+0x4c8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d106      	bne.n	8001392 <HAL_RCC_OscConfig+0x312>
 8001384:	4b6f      	ldr	r3, [pc, #444]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4a6e      	ldr	r2, [pc, #440]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6213      	str	r3, [r2, #32]
 8001390:	e02d      	b.n	80013ee <HAL_RCC_OscConfig+0x36e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x334>
 800139a:	4b6a      	ldr	r3, [pc, #424]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	4a69      	ldr	r2, [pc, #420]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	f023 0301 	bic.w	r3, r3, #1
 80013a4:	6213      	str	r3, [r2, #32]
 80013a6:	4b67      	ldr	r3, [pc, #412]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4a66      	ldr	r2, [pc, #408]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	f023 0304 	bic.w	r3, r3, #4
 80013b0:	6213      	str	r3, [r2, #32]
 80013b2:	e01c      	b.n	80013ee <HAL_RCC_OscConfig+0x36e>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	d10c      	bne.n	80013d6 <HAL_RCC_OscConfig+0x356>
 80013bc:	4b61      	ldr	r3, [pc, #388]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4a60      	ldr	r2, [pc, #384]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6213      	str	r3, [r2, #32]
 80013c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	4a5d      	ldr	r2, [pc, #372]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6213      	str	r3, [r2, #32]
 80013d4:	e00b      	b.n	80013ee <HAL_RCC_OscConfig+0x36e>
 80013d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4a5a      	ldr	r2, [pc, #360]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	f023 0301 	bic.w	r3, r3, #1
 80013e0:	6213      	str	r3, [r2, #32]
 80013e2:	4b58      	ldr	r3, [pc, #352]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	4a57      	ldr	r2, [pc, #348]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	f023 0304 	bic.w	r3, r3, #4
 80013ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d015      	beq.n	8001422 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fbb9 	bl	8000b6c <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fc:	e00a      	b.n	8001414 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fe:	f7ff fbb5 	bl	8000b6c <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800140c:	4293      	cmp	r3, r2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e0b1      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001414:	4b4b      	ldr	r3, [pc, #300]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0ee      	beq.n	80013fe <HAL_RCC_OscConfig+0x37e>
 8001420:	e014      	b.n	800144c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff fba3 	bl	8000b6c <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001428:	e00a      	b.n	8001440 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142a:	f7ff fb9f 	bl	8000b6c <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001438:	4293      	cmp	r3, r2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e09b      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001440:	4b40      	ldr	r3, [pc, #256]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1ee      	bne.n	800142a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d105      	bne.n	800145e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001452:	4b3c      	ldr	r3, [pc, #240]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4a3b      	ldr	r2, [pc, #236]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800145c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 8087 	beq.w	8001576 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001468:	4b36      	ldr	r3, [pc, #216]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 030c 	and.w	r3, r3, #12
 8001470:	2b08      	cmp	r3, #8
 8001472:	d061      	beq.n	8001538 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d146      	bne.n	800150a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147c:	4b33      	ldr	r3, [pc, #204]	@ (800154c <HAL_RCC_OscConfig+0x4cc>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7ff fb73 	bl	8000b6c <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148a:	f7ff fb6f 	bl	8000b6c <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e06d      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149c:	4b29      	ldr	r3, [pc, #164]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1f0      	bne.n	800148a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b0:	d108      	bne.n	80014c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014b2:	4b24      	ldr	r3, [pc, #144]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	4921      	ldr	r1, [pc, #132]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a19      	ldr	r1, [r3, #32]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d4:	430b      	orrs	r3, r1
 80014d6:	491b      	ldr	r1, [pc, #108]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <HAL_RCC_OscConfig+0x4cc>)
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e2:	f7ff fb43 	bl	8000b6c <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ea:	f7ff fb3f 	bl	8000b6c <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e03d      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014fc:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x46a>
 8001508:	e035      	b.n	8001576 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <HAL_RCC_OscConfig+0x4cc>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fb2c 	bl	8000b6c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff fb28 	bl	8000b6c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e026      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x498>
 8001536:	e01e      	b.n	8001576 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d107      	bne.n	8001550 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e019      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
 8001544:	40021000 	.word	0x40021000
 8001548:	40007000 	.word	0x40007000
 800154c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001550:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <HAL_RCC_OscConfig+0x500>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	429a      	cmp	r2, r3
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156e:	429a      	cmp	r2, r3
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40021000 	.word	0x40021000

08001584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0d0      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001598:	4b6a      	ldr	r3, [pc, #424]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d910      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b67      	ldr	r3, [pc, #412]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 0207 	bic.w	r2, r3, #7
 80015ae:	4965      	ldr	r1, [pc, #404]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b63      	ldr	r3, [pc, #396]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0b8      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e0:	4b59      	ldr	r3, [pc, #356]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4a58      	ldr	r2, [pc, #352]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f8:	4b53      	ldr	r3, [pc, #332]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a52      	ldr	r2, [pc, #328]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001602:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001604:	4b50      	ldr	r3, [pc, #320]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	494d      	ldr	r1, [pc, #308]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	4313      	orrs	r3, r2
 8001614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d040      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4b47      	ldr	r3, [pc, #284]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d115      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e07f      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001642:	4b41      	ldr	r3, [pc, #260]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e073      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001652:	4b3d      	ldr	r3, [pc, #244]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e06b      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001662:	4b39      	ldr	r3, [pc, #228]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f023 0203 	bic.w	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4936      	ldr	r1, [pc, #216]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001674:	f7ff fa7a 	bl	8000b6c <HAL_GetTick>
 8001678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167a:	e00a      	b.n	8001692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167c:	f7ff fa76 	bl	8000b6c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e053      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	4b2d      	ldr	r3, [pc, #180]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 020c 	and.w	r2, r3, #12
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d1eb      	bne.n	800167c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016a4:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d210      	bcs.n	80016d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 0207 	bic.w	r2, r3, #7
 80016ba:	4922      	ldr	r1, [pc, #136]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e032      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e0:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4916      	ldr	r1, [pc, #88]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d009      	beq.n	8001712 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016fe:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	490e      	ldr	r1, [pc, #56]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001712:	f000 f821 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 8001716:	4602      	mov	r2, r0
 8001718:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	490a      	ldr	r1, [pc, #40]	@ (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001724:	5ccb      	ldrb	r3, [r1, r3]
 8001726:	fa22 f303 	lsr.w	r3, r2, r3
 800172a:	4a09      	ldr	r2, [pc, #36]	@ (8001750 <HAL_RCC_ClockConfig+0x1cc>)
 800172c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_RCC_ClockConfig+0x1d0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f9d8 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40022000 	.word	0x40022000
 8001748:	40021000 	.word	0x40021000
 800174c:	080040e8 	.word	0x080040e8
 8001750:	20000000 	.word	0x20000000
 8001754:	20000004 	.word	0x20000004

08001758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001772:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x94>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b04      	cmp	r3, #4
 8001780:	d002      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x30>
 8001782:	2b08      	cmp	r3, #8
 8001784:	d003      	beq.n	800178e <HAL_RCC_GetSysClockFreq+0x36>
 8001786:	e027      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001788:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800178a:	613b      	str	r3, [r7, #16]
      break;
 800178c:	e027      	b.n	80017de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	0c9b      	lsrs	r3, r3, #18
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	4a17      	ldr	r2, [pc, #92]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001798:	5cd3      	ldrb	r3, [r2, r3]
 800179a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d010      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x94>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	0c5b      	lsrs	r3, r3, #17
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	4a11      	ldr	r2, [pc, #68]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a0d      	ldr	r2, [pc, #52]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ba:	fb03 f202 	mul.w	r2, r3, r2
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e004      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a0c      	ldr	r2, [pc, #48]	@ (80017fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80017cc:	fb02 f303 	mul.w	r3, r2, r3
 80017d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	613b      	str	r3, [r7, #16]
      break;
 80017d6:	e002      	b.n	80017de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017d8:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <HAL_RCC_GetSysClockFreq+0xa8>)
 80017da:	613b      	str	r3, [r7, #16]
      break;
 80017dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017de:	693b      	ldr	r3, [r7, #16]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	371c      	adds	r7, #28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000
 80017f0:	00f42400 	.word	0x00f42400
 80017f4:	080040f8 	.word	0x080040f8
 80017f8:	08004108 	.word	0x08004108
 80017fc:	003d0900 	.word	0x003d0900
 8001800:	007a1200 	.word	0x007a1200

08001804 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800180c:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <RCC_Delay+0x34>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <RCC_Delay+0x38>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0a5b      	lsrs	r3, r3, #9
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	fb02 f303 	mul.w	r3, r2, r3
 800181e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001820:	bf00      	nop
  }
  while (Delay --);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1e5a      	subs	r2, r3, #1
 8001826:	60fa      	str	r2, [r7, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f9      	bne.n	8001820 <RCC_Delay+0x1c>
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	20000000 	.word	0x20000000
 800183c:	10624dd3 	.word	0x10624dd3

08001840 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e076      	b.n	8001940 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	2b00      	cmp	r3, #0
 8001858:	d108      	bne.n	800186c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001862:	d009      	beq.n	8001878 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
 800186a:	e005      	b.n	8001878 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d106      	bne.n	8001898 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7fe ffd0 	bl	8000838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2202      	movs	r2, #2
 800189c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018fc:	ea42 0103 	orr.w	r1, r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001904:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	0c1a      	lsrs	r2, r3, #16
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f002 0204 	and.w	r2, r2, #4
 800191e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	69da      	ldr	r2, [r3, #28]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800192e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001958:	f7ff f908 	bl	8000b6c <HAL_GetTick>
 800195c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b01      	cmp	r3, #1
 800196c:	d001      	beq.n	8001972 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800196e:	2302      	movs	r3, #2
 8001970:	e12a      	b.n	8001bc8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <HAL_SPI_Transmit+0x36>
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e122      	b.n	8001bc8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_SPI_Transmit+0x48>
 800198c:	2302      	movs	r3, #2
 800198e:	e11b      	b.n	8001bc8 <HAL_SPI_Transmit+0x280>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2203      	movs	r2, #3
 800199c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	88fa      	ldrh	r2, [r7, #6]
 80019b0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	88fa      	ldrh	r2, [r7, #6]
 80019b6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019de:	d10f      	bne.n	8001a00 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a0a:	2b40      	cmp	r3, #64	@ 0x40
 8001a0c:	d007      	beq.n	8001a1e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a26:	d152      	bne.n	8001ace <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <HAL_SPI_Transmit+0xee>
 8001a30:	8b7b      	ldrh	r3, [r7, #26]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d145      	bne.n	8001ac2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	1c9a      	adds	r2, r3, #2
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a5a:	e032      	b.n	8001ac2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d112      	bne.n	8001a90 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	881a      	ldrh	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	1c9a      	adds	r2, r3, #2
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001a8e:	e018      	b.n	8001ac2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a90:	f7ff f86c 	bl	8000b6c <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d803      	bhi.n	8001aa8 <HAL_SPI_Transmit+0x160>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa6:	d102      	bne.n	8001aae <HAL_SPI_Transmit+0x166>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e082      	b.n	8001bc8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1c7      	bne.n	8001a5c <HAL_SPI_Transmit+0x114>
 8001acc:	e053      	b.n	8001b76 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <HAL_SPI_Transmit+0x194>
 8001ad6:	8b7b      	ldrh	r3, [r7, #26]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d147      	bne.n	8001b6c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	330c      	adds	r3, #12
 8001ae6:	7812      	ldrb	r2, [r2, #0]
 8001ae8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001b02:	e033      	b.n	8001b6c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d113      	bne.n	8001b3a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	330c      	adds	r3, #12
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001b38:	e018      	b.n	8001b6c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b3a:	f7ff f817 	bl	8000b6c <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d803      	bhi.n	8001b52 <HAL_SPI_Transmit+0x20a>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d102      	bne.n	8001b58 <HAL_SPI_Transmit+0x210>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d109      	bne.n	8001b6c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e02d      	b.n	8001bc8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1c6      	bne.n	8001b04 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	6839      	ldr	r1, [r7, #0]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fbc4 	bl	8002308 <SPI_EndRxTxTransaction>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10a      	bne.n	8001baa <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
  }
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d001      	beq.n	8001bf0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001bec:	2302      	movs	r3, #2
 8001bee:	e104      	b.n	8001dfa <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bf8:	d112      	bne.n	8001c20 <HAL_SPI_Receive+0x50>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10e      	bne.n	8001c20 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2204      	movs	r2, #4
 8001c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001c0a:	88fa      	ldrh	r2, [r7, #6]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	4613      	mov	r3, r2
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 f8f3 	bl	8001e02 <HAL_SPI_TransmitReceive>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	e0ec      	b.n	8001dfa <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c20:	f7fe ffa4 	bl	8000b6c <HAL_GetTick>
 8001c24:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <HAL_SPI_Receive+0x62>
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0e1      	b.n	8001dfa <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_SPI_Receive+0x74>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e0da      	b.n	8001dfa <HAL_SPI_Receive+0x22a>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	88fa      	ldrh	r2, [r7, #6]
 8001c64:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	88fa      	ldrh	r2, [r7, #6]
 8001c6a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c92:	d10f      	bne.n	8001cb4 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ca2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001cb2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cbe:	2b40      	cmp	r3, #64	@ 0x40
 8001cc0:	d007      	beq.n	8001cd2 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d170      	bne.n	8001dbc <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001cda:	e035      	b.n	8001d48 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d115      	bne.n	8001d16 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f103 020c 	add.w	r2, r3, #12
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf6:	7812      	ldrb	r2, [r2, #0]
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d14:	e018      	b.n	8001d48 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d16:	f7fe ff29 	bl	8000b6c <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d803      	bhi.n	8001d2e <HAL_SPI_Receive+0x15e>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2c:	d102      	bne.n	8001d34 <HAL_SPI_Receive+0x164>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e058      	b.n	8001dfa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1c4      	bne.n	8001cdc <HAL_SPI_Receive+0x10c>
 8001d52:	e038      	b.n	8001dc6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d113      	bne.n	8001d8a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d6c:	b292      	uxth	r2, r2
 8001d6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d74:	1c9a      	adds	r2, r3, #2
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d88:	e018      	b.n	8001dbc <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d8a:	f7fe feef 	bl	8000b6c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d803      	bhi.n	8001da2 <HAL_SPI_Receive+0x1d2>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d102      	bne.n	8001da8 <HAL_SPI_Receive+0x1d8>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d109      	bne.n	8001dbc <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e01e      	b.n	8001dfa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1c6      	bne.n	8001d54 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	6839      	ldr	r1, [r7, #0]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 fa4a 	bl	8002264 <SPI_EndRxTransaction>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8001df8:	2300      	movs	r3, #0
  }
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b08a      	sub	sp, #40	@ 0x28
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e10:	2301      	movs	r3, #1
 8001e12:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e14:	f7fe feaa 	bl	8000b6c <HAL_GetTick>
 8001e18:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e20:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e2c:	7ffb      	ldrb	r3, [r7, #31]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d00c      	beq.n	8001e4c <HAL_SPI_TransmitReceive+0x4a>
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e38:	d106      	bne.n	8001e48 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d102      	bne.n	8001e48 <HAL_SPI_TransmitReceive+0x46>
 8001e42:	7ffb      	ldrb	r3, [r7, #31]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d001      	beq.n	8001e4c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e17f      	b.n	800214c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <HAL_SPI_TransmitReceive+0x5c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <HAL_SPI_TransmitReceive+0x5c>
 8001e58:	887b      	ldrh	r3, [r7, #2]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e174      	b.n	800214c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_SPI_TransmitReceive+0x6e>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e16d      	b.n	800214c <HAL_SPI_TransmitReceive+0x34a>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d003      	beq.n	8001e8c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2205      	movs	r2, #5
 8001e88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	887a      	ldrh	r2, [r7, #2]
 8001ea2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	887a      	ldrh	r2, [r7, #2]
 8001eae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ecc:	2b40      	cmp	r3, #64	@ 0x40
 8001ece:	d007      	beq.n	8001ee0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ede:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ee8:	d17e      	bne.n	8001fe8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <HAL_SPI_TransmitReceive+0xf6>
 8001ef2:	8afb      	ldrh	r3, [r7, #22]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d16c      	bne.n	8001fd2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efc:	881a      	ldrh	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f08:	1c9a      	adds	r2, r3, #2
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f1c:	e059      	b.n	8001fd2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d11b      	bne.n	8001f64 <HAL_SPI_TransmitReceive+0x162>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d016      	beq.n	8001f64 <HAL_SPI_TransmitReceive+0x162>
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d113      	bne.n	8001f64 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f40:	881a      	ldrh	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4c:	1c9a      	adds	r2, r3, #2
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d119      	bne.n	8001fa6 <HAL_SPI_TransmitReceive+0x1a4>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d014      	beq.n	8001fa6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f86:	b292      	uxth	r2, r2
 8001f88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f8e:	1c9a      	adds	r2, r3, #2
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001fa6:	f7fe fde1 	bl	8000b6c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d80d      	bhi.n	8001fd2 <HAL_SPI_TransmitReceive+0x1d0>
 8001fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbc:	d009      	beq.n	8001fd2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e0bc      	b.n	800214c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1a0      	bne.n	8001f1e <HAL_SPI_TransmitReceive+0x11c>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d19b      	bne.n	8001f1e <HAL_SPI_TransmitReceive+0x11c>
 8001fe6:	e082      	b.n	80020ee <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <HAL_SPI_TransmitReceive+0x1f4>
 8001ff0:	8afb      	ldrh	r3, [r7, #22]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d171      	bne.n	80020da <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	330c      	adds	r3, #12
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800201c:	e05d      	b.n	80020da <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b02      	cmp	r3, #2
 800202a:	d11c      	bne.n	8002066 <HAL_SPI_TransmitReceive+0x264>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d017      	beq.n	8002066 <HAL_SPI_TransmitReceive+0x264>
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	2b01      	cmp	r3, #1
 800203a:	d114      	bne.n	8002066 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	330c      	adds	r3, #12
 8002046:	7812      	ldrb	r2, [r2, #0]
 8002048:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002058:	b29b      	uxth	r3, r3
 800205a:	3b01      	subs	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d119      	bne.n	80020a8 <HAL_SPI_TransmitReceive+0x2a6>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d014      	beq.n	80020a8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020a4:	2301      	movs	r3, #1
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80020a8:	f7fe fd60 	bl	8000b6c <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d803      	bhi.n	80020c0 <HAL_SPI_TransmitReceive+0x2be>
 80020b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020be:	d102      	bne.n	80020c6 <HAL_SPI_TransmitReceive+0x2c4>
 80020c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e038      	b.n	800214c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d19c      	bne.n	800201e <HAL_SPI_TransmitReceive+0x21c>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d197      	bne.n	800201e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020ee:	6a3a      	ldr	r2, [r7, #32]
 80020f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f908 	bl	8002308 <SPI_EndRxTxTransaction>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e01d      	b.n	800214c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10a      	bne.n	800212e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800214a:	2300      	movs	r3, #0
  }
}
 800214c:	4618      	mov	r0, r3
 800214e:	3728      	adds	r7, #40	@ 0x28
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002164:	f7fe fd02 	bl	8000b6c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	4413      	add	r3, r2
 8002172:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002174:	f7fe fcfa 	bl	8000b6c <HAL_GetTick>
 8002178:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800217a:	4b39      	ldr	r3, [pc, #228]	@ (8002260 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	015b      	lsls	r3, r3, #5
 8002180:	0d1b      	lsrs	r3, r3, #20
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	fb02 f303 	mul.w	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800218a:	e054      	b.n	8002236 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002192:	d050      	beq.n	8002236 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002194:	f7fe fcea 	bl	8000b6c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d902      	bls.n	80021aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d13d      	bne.n	8002226 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80021b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021c2:	d111      	bne.n	80021e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021cc:	d004      	beq.n	80021d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d6:	d107      	bne.n	80021e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021f0:	d10f      	bne.n	8002212 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002210:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e017      	b.n	8002256 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3b01      	subs	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4013      	ands	r3, r2
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	429a      	cmp	r2, r3
 8002244:	bf0c      	ite	eq
 8002246:	2301      	moveq	r3, #1
 8002248:	2300      	movne	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	429a      	cmp	r2, r3
 8002252:	d19b      	bne.n	800218c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000000 	.word	0x20000000

08002264 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002278:	d111      	bne.n	800229e <SPI_EndRxTransaction+0x3a>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002282:	d004      	beq.n	800228e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800228c:	d107      	bne.n	800229e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800229c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022a6:	d117      	bne.n	80022d8 <SPI_EndRxTransaction+0x74>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b0:	d112      	bne.n	80022d8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2200      	movs	r2, #0
 80022ba:	2101      	movs	r1, #1
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f7ff ff49 	bl	8002154 <SPI_WaitFlagStateUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01a      	beq.n	80022fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022cc:	f043 0220 	orr.w	r2, r3, #32
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e013      	b.n	8002300 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2200      	movs	r2, #0
 80022e0:	2180      	movs	r1, #128	@ 0x80
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f7ff ff36 	bl	8002154 <SPI_WaitFlagStateUntilTimeout>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d007      	beq.n	80022fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f2:	f043 0220 	orr.w	r2, r3, #32
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e000      	b.n	8002300 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2201      	movs	r2, #1
 800231c:	2102      	movs	r1, #2
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f7ff ff18 	bl	8002154 <SPI_WaitFlagStateUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d007      	beq.n	800233a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232e:	f043 0220 	orr.w	r2, r3, #32
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e013      	b.n	8002362 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2200      	movs	r2, #0
 8002342:	2180      	movs	r1, #128	@ 0x80
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f7ff ff05 	bl	8002154 <SPI_WaitFlagStateUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e000      	b.n	8002362 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <std>:
 800236c:	2300      	movs	r3, #0
 800236e:	b510      	push	{r4, lr}
 8002370:	4604      	mov	r4, r0
 8002372:	e9c0 3300 	strd	r3, r3, [r0]
 8002376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800237a:	6083      	str	r3, [r0, #8]
 800237c:	8181      	strh	r1, [r0, #12]
 800237e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002380:	81c2      	strh	r2, [r0, #14]
 8002382:	6183      	str	r3, [r0, #24]
 8002384:	4619      	mov	r1, r3
 8002386:	2208      	movs	r2, #8
 8002388:	305c      	adds	r0, #92	@ 0x5c
 800238a:	f000 f90e 	bl	80025aa <memset>
 800238e:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <std+0x58>)
 8002390:	6224      	str	r4, [r4, #32]
 8002392:	6263      	str	r3, [r4, #36]	@ 0x24
 8002394:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <std+0x5c>)
 8002396:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <std+0x60>)
 800239a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800239c:	4b0c      	ldr	r3, [pc, #48]	@ (80023d0 <std+0x64>)
 800239e:	6323      	str	r3, [r4, #48]	@ 0x30
 80023a0:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <std+0x68>)
 80023a2:	429c      	cmp	r4, r3
 80023a4:	d006      	beq.n	80023b4 <std+0x48>
 80023a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80023aa:	4294      	cmp	r4, r2
 80023ac:	d002      	beq.n	80023b4 <std+0x48>
 80023ae:	33d0      	adds	r3, #208	@ 0xd0
 80023b0:	429c      	cmp	r4, r3
 80023b2:	d105      	bne.n	80023c0 <std+0x54>
 80023b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80023b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023bc:	f000 b96e 	b.w	800269c <__retarget_lock_init_recursive>
 80023c0:	bd10      	pop	{r4, pc}
 80023c2:	bf00      	nop
 80023c4:	08002525 	.word	0x08002525
 80023c8:	08002547 	.word	0x08002547
 80023cc:	0800257f 	.word	0x0800257f
 80023d0:	080025a3 	.word	0x080025a3
 80023d4:	2000015c 	.word	0x2000015c

080023d8 <stdio_exit_handler>:
 80023d8:	4a02      	ldr	r2, [pc, #8]	@ (80023e4 <stdio_exit_handler+0xc>)
 80023da:	4903      	ldr	r1, [pc, #12]	@ (80023e8 <stdio_exit_handler+0x10>)
 80023dc:	4803      	ldr	r0, [pc, #12]	@ (80023ec <stdio_exit_handler+0x14>)
 80023de:	f000 b869 	b.w	80024b4 <_fwalk_sglue>
 80023e2:	bf00      	nop
 80023e4:	2000000c 	.word	0x2000000c
 80023e8:	08002f35 	.word	0x08002f35
 80023ec:	2000001c 	.word	0x2000001c

080023f0 <cleanup_stdio>:
 80023f0:	6841      	ldr	r1, [r0, #4]
 80023f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002424 <cleanup_stdio+0x34>)
 80023f4:	b510      	push	{r4, lr}
 80023f6:	4299      	cmp	r1, r3
 80023f8:	4604      	mov	r4, r0
 80023fa:	d001      	beq.n	8002400 <cleanup_stdio+0x10>
 80023fc:	f000 fd9a 	bl	8002f34 <_fflush_r>
 8002400:	68a1      	ldr	r1, [r4, #8]
 8002402:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <cleanup_stdio+0x38>)
 8002404:	4299      	cmp	r1, r3
 8002406:	d002      	beq.n	800240e <cleanup_stdio+0x1e>
 8002408:	4620      	mov	r0, r4
 800240a:	f000 fd93 	bl	8002f34 <_fflush_r>
 800240e:	68e1      	ldr	r1, [r4, #12]
 8002410:	4b06      	ldr	r3, [pc, #24]	@ (800242c <cleanup_stdio+0x3c>)
 8002412:	4299      	cmp	r1, r3
 8002414:	d004      	beq.n	8002420 <cleanup_stdio+0x30>
 8002416:	4620      	mov	r0, r4
 8002418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800241c:	f000 bd8a 	b.w	8002f34 <_fflush_r>
 8002420:	bd10      	pop	{r4, pc}
 8002422:	bf00      	nop
 8002424:	2000015c 	.word	0x2000015c
 8002428:	200001c4 	.word	0x200001c4
 800242c:	2000022c 	.word	0x2000022c

08002430 <global_stdio_init.part.0>:
 8002430:	b510      	push	{r4, lr}
 8002432:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <global_stdio_init.part.0+0x30>)
 8002434:	4c0b      	ldr	r4, [pc, #44]	@ (8002464 <global_stdio_init.part.0+0x34>)
 8002436:	4a0c      	ldr	r2, [pc, #48]	@ (8002468 <global_stdio_init.part.0+0x38>)
 8002438:	4620      	mov	r0, r4
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	2104      	movs	r1, #4
 800243e:	2200      	movs	r2, #0
 8002440:	f7ff ff94 	bl	800236c <std>
 8002444:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002448:	2201      	movs	r2, #1
 800244a:	2109      	movs	r1, #9
 800244c:	f7ff ff8e 	bl	800236c <std>
 8002450:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002454:	2202      	movs	r2, #2
 8002456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800245a:	2112      	movs	r1, #18
 800245c:	f7ff bf86 	b.w	800236c <std>
 8002460:	20000294 	.word	0x20000294
 8002464:	2000015c 	.word	0x2000015c
 8002468:	080023d9 	.word	0x080023d9

0800246c <__sfp_lock_acquire>:
 800246c:	4801      	ldr	r0, [pc, #4]	@ (8002474 <__sfp_lock_acquire+0x8>)
 800246e:	f000 b916 	b.w	800269e <__retarget_lock_acquire_recursive>
 8002472:	bf00      	nop
 8002474:	2000029d 	.word	0x2000029d

08002478 <__sfp_lock_release>:
 8002478:	4801      	ldr	r0, [pc, #4]	@ (8002480 <__sfp_lock_release+0x8>)
 800247a:	f000 b911 	b.w	80026a0 <__retarget_lock_release_recursive>
 800247e:	bf00      	nop
 8002480:	2000029d 	.word	0x2000029d

08002484 <__sinit>:
 8002484:	b510      	push	{r4, lr}
 8002486:	4604      	mov	r4, r0
 8002488:	f7ff fff0 	bl	800246c <__sfp_lock_acquire>
 800248c:	6a23      	ldr	r3, [r4, #32]
 800248e:	b11b      	cbz	r3, 8002498 <__sinit+0x14>
 8002490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002494:	f7ff bff0 	b.w	8002478 <__sfp_lock_release>
 8002498:	4b04      	ldr	r3, [pc, #16]	@ (80024ac <__sinit+0x28>)
 800249a:	6223      	str	r3, [r4, #32]
 800249c:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <__sinit+0x2c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f5      	bne.n	8002490 <__sinit+0xc>
 80024a4:	f7ff ffc4 	bl	8002430 <global_stdio_init.part.0>
 80024a8:	e7f2      	b.n	8002490 <__sinit+0xc>
 80024aa:	bf00      	nop
 80024ac:	080023f1 	.word	0x080023f1
 80024b0:	20000294 	.word	0x20000294

080024b4 <_fwalk_sglue>:
 80024b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024b8:	4607      	mov	r7, r0
 80024ba:	4688      	mov	r8, r1
 80024bc:	4614      	mov	r4, r2
 80024be:	2600      	movs	r6, #0
 80024c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80024c4:	f1b9 0901 	subs.w	r9, r9, #1
 80024c8:	d505      	bpl.n	80024d6 <_fwalk_sglue+0x22>
 80024ca:	6824      	ldr	r4, [r4, #0]
 80024cc:	2c00      	cmp	r4, #0
 80024ce:	d1f7      	bne.n	80024c0 <_fwalk_sglue+0xc>
 80024d0:	4630      	mov	r0, r6
 80024d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024d6:	89ab      	ldrh	r3, [r5, #12]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d907      	bls.n	80024ec <_fwalk_sglue+0x38>
 80024dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024e0:	3301      	adds	r3, #1
 80024e2:	d003      	beq.n	80024ec <_fwalk_sglue+0x38>
 80024e4:	4629      	mov	r1, r5
 80024e6:	4638      	mov	r0, r7
 80024e8:	47c0      	blx	r8
 80024ea:	4306      	orrs	r6, r0
 80024ec:	3568      	adds	r5, #104	@ 0x68
 80024ee:	e7e9      	b.n	80024c4 <_fwalk_sglue+0x10>

080024f0 <iprintf>:
 80024f0:	b40f      	push	{r0, r1, r2, r3}
 80024f2:	b507      	push	{r0, r1, r2, lr}
 80024f4:	4906      	ldr	r1, [pc, #24]	@ (8002510 <iprintf+0x20>)
 80024f6:	ab04      	add	r3, sp, #16
 80024f8:	6808      	ldr	r0, [r1, #0]
 80024fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80024fe:	6881      	ldr	r1, [r0, #8]
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	f000 f9ed 	bl	80028e0 <_vfiprintf_r>
 8002506:	b003      	add	sp, #12
 8002508:	f85d eb04 	ldr.w	lr, [sp], #4
 800250c:	b004      	add	sp, #16
 800250e:	4770      	bx	lr
 8002510:	20000018 	.word	0x20000018

08002514 <putchar>:
 8002514:	4b02      	ldr	r3, [pc, #8]	@ (8002520 <putchar+0xc>)
 8002516:	4601      	mov	r1, r0
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	6882      	ldr	r2, [r0, #8]
 800251c:	f000 bd32 	b.w	8002f84 <_putc_r>
 8002520:	20000018 	.word	0x20000018

08002524 <__sread>:
 8002524:	b510      	push	{r4, lr}
 8002526:	460c      	mov	r4, r1
 8002528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800252c:	f000 f868 	bl	8002600 <_read_r>
 8002530:	2800      	cmp	r0, #0
 8002532:	bfab      	itete	ge
 8002534:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002536:	89a3      	ldrhlt	r3, [r4, #12]
 8002538:	181b      	addge	r3, r3, r0
 800253a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800253e:	bfac      	ite	ge
 8002540:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002542:	81a3      	strhlt	r3, [r4, #12]
 8002544:	bd10      	pop	{r4, pc}

08002546 <__swrite>:
 8002546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800254a:	461f      	mov	r7, r3
 800254c:	898b      	ldrh	r3, [r1, #12]
 800254e:	4605      	mov	r5, r0
 8002550:	05db      	lsls	r3, r3, #23
 8002552:	460c      	mov	r4, r1
 8002554:	4616      	mov	r6, r2
 8002556:	d505      	bpl.n	8002564 <__swrite+0x1e>
 8002558:	2302      	movs	r3, #2
 800255a:	2200      	movs	r2, #0
 800255c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002560:	f000 f83c 	bl	80025dc <_lseek_r>
 8002564:	89a3      	ldrh	r3, [r4, #12]
 8002566:	4632      	mov	r2, r6
 8002568:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800256c:	81a3      	strh	r3, [r4, #12]
 800256e:	4628      	mov	r0, r5
 8002570:	463b      	mov	r3, r7
 8002572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800257a:	f000 b853 	b.w	8002624 <_write_r>

0800257e <__sseek>:
 800257e:	b510      	push	{r4, lr}
 8002580:	460c      	mov	r4, r1
 8002582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002586:	f000 f829 	bl	80025dc <_lseek_r>
 800258a:	1c43      	adds	r3, r0, #1
 800258c:	89a3      	ldrh	r3, [r4, #12]
 800258e:	bf15      	itete	ne
 8002590:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002592:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002596:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800259a:	81a3      	strheq	r3, [r4, #12]
 800259c:	bf18      	it	ne
 800259e:	81a3      	strhne	r3, [r4, #12]
 80025a0:	bd10      	pop	{r4, pc}

080025a2 <__sclose>:
 80025a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025a6:	f000 b809 	b.w	80025bc <_close_r>

080025aa <memset>:
 80025aa:	4603      	mov	r3, r0
 80025ac:	4402      	add	r2, r0
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d100      	bne.n	80025b4 <memset+0xa>
 80025b2:	4770      	bx	lr
 80025b4:	f803 1b01 	strb.w	r1, [r3], #1
 80025b8:	e7f9      	b.n	80025ae <memset+0x4>
	...

080025bc <_close_r>:
 80025bc:	b538      	push	{r3, r4, r5, lr}
 80025be:	2300      	movs	r3, #0
 80025c0:	4d05      	ldr	r5, [pc, #20]	@ (80025d8 <_close_r+0x1c>)
 80025c2:	4604      	mov	r4, r0
 80025c4:	4608      	mov	r0, r1
 80025c6:	602b      	str	r3, [r5, #0]
 80025c8:	f7fe f9e5 	bl	8000996 <_close>
 80025cc:	1c43      	adds	r3, r0, #1
 80025ce:	d102      	bne.n	80025d6 <_close_r+0x1a>
 80025d0:	682b      	ldr	r3, [r5, #0]
 80025d2:	b103      	cbz	r3, 80025d6 <_close_r+0x1a>
 80025d4:	6023      	str	r3, [r4, #0]
 80025d6:	bd38      	pop	{r3, r4, r5, pc}
 80025d8:	20000298 	.word	0x20000298

080025dc <_lseek_r>:
 80025dc:	b538      	push	{r3, r4, r5, lr}
 80025de:	4604      	mov	r4, r0
 80025e0:	4608      	mov	r0, r1
 80025e2:	4611      	mov	r1, r2
 80025e4:	2200      	movs	r2, #0
 80025e6:	4d05      	ldr	r5, [pc, #20]	@ (80025fc <_lseek_r+0x20>)
 80025e8:	602a      	str	r2, [r5, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	f7fe f9f7 	bl	80009de <_lseek>
 80025f0:	1c43      	adds	r3, r0, #1
 80025f2:	d102      	bne.n	80025fa <_lseek_r+0x1e>
 80025f4:	682b      	ldr	r3, [r5, #0]
 80025f6:	b103      	cbz	r3, 80025fa <_lseek_r+0x1e>
 80025f8:	6023      	str	r3, [r4, #0]
 80025fa:	bd38      	pop	{r3, r4, r5, pc}
 80025fc:	20000298 	.word	0x20000298

08002600 <_read_r>:
 8002600:	b538      	push	{r3, r4, r5, lr}
 8002602:	4604      	mov	r4, r0
 8002604:	4608      	mov	r0, r1
 8002606:	4611      	mov	r1, r2
 8002608:	2200      	movs	r2, #0
 800260a:	4d05      	ldr	r5, [pc, #20]	@ (8002620 <_read_r+0x20>)
 800260c:	602a      	str	r2, [r5, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	f7fe f988 	bl	8000924 <_read>
 8002614:	1c43      	adds	r3, r0, #1
 8002616:	d102      	bne.n	800261e <_read_r+0x1e>
 8002618:	682b      	ldr	r3, [r5, #0]
 800261a:	b103      	cbz	r3, 800261e <_read_r+0x1e>
 800261c:	6023      	str	r3, [r4, #0]
 800261e:	bd38      	pop	{r3, r4, r5, pc}
 8002620:	20000298 	.word	0x20000298

08002624 <_write_r>:
 8002624:	b538      	push	{r3, r4, r5, lr}
 8002626:	4604      	mov	r4, r0
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	2200      	movs	r2, #0
 800262e:	4d05      	ldr	r5, [pc, #20]	@ (8002644 <_write_r+0x20>)
 8002630:	602a      	str	r2, [r5, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	f7fe f993 	bl	800095e <_write>
 8002638:	1c43      	adds	r3, r0, #1
 800263a:	d102      	bne.n	8002642 <_write_r+0x1e>
 800263c:	682b      	ldr	r3, [r5, #0]
 800263e:	b103      	cbz	r3, 8002642 <_write_r+0x1e>
 8002640:	6023      	str	r3, [r4, #0]
 8002642:	bd38      	pop	{r3, r4, r5, pc}
 8002644:	20000298 	.word	0x20000298

08002648 <__errno>:
 8002648:	4b01      	ldr	r3, [pc, #4]	@ (8002650 <__errno+0x8>)
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000018 	.word	0x20000018

08002654 <__libc_init_array>:
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	2600      	movs	r6, #0
 8002658:	4d0c      	ldr	r5, [pc, #48]	@ (800268c <__libc_init_array+0x38>)
 800265a:	4c0d      	ldr	r4, [pc, #52]	@ (8002690 <__libc_init_array+0x3c>)
 800265c:	1b64      	subs	r4, r4, r5
 800265e:	10a4      	asrs	r4, r4, #2
 8002660:	42a6      	cmp	r6, r4
 8002662:	d109      	bne.n	8002678 <__libc_init_array+0x24>
 8002664:	f000 fdf8 	bl	8003258 <_init>
 8002668:	2600      	movs	r6, #0
 800266a:	4d0a      	ldr	r5, [pc, #40]	@ (8002694 <__libc_init_array+0x40>)
 800266c:	4c0a      	ldr	r4, [pc, #40]	@ (8002698 <__libc_init_array+0x44>)
 800266e:	1b64      	subs	r4, r4, r5
 8002670:	10a4      	asrs	r4, r4, #2
 8002672:	42a6      	cmp	r6, r4
 8002674:	d105      	bne.n	8002682 <__libc_init_array+0x2e>
 8002676:	bd70      	pop	{r4, r5, r6, pc}
 8002678:	f855 3b04 	ldr.w	r3, [r5], #4
 800267c:	4798      	blx	r3
 800267e:	3601      	adds	r6, #1
 8002680:	e7ee      	b.n	8002660 <__libc_init_array+0xc>
 8002682:	f855 3b04 	ldr.w	r3, [r5], #4
 8002686:	4798      	blx	r3
 8002688:	3601      	adds	r6, #1
 800268a:	e7f2      	b.n	8002672 <__libc_init_array+0x1e>
 800268c:	08004140 	.word	0x08004140
 8002690:	08004140 	.word	0x08004140
 8002694:	08004140 	.word	0x08004140
 8002698:	08004144 	.word	0x08004144

0800269c <__retarget_lock_init_recursive>:
 800269c:	4770      	bx	lr

0800269e <__retarget_lock_acquire_recursive>:
 800269e:	4770      	bx	lr

080026a0 <__retarget_lock_release_recursive>:
 80026a0:	4770      	bx	lr
	...

080026a4 <_free_r>:
 80026a4:	b538      	push	{r3, r4, r5, lr}
 80026a6:	4605      	mov	r5, r0
 80026a8:	2900      	cmp	r1, #0
 80026aa:	d040      	beq.n	800272e <_free_r+0x8a>
 80026ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026b0:	1f0c      	subs	r4, r1, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bfb8      	it	lt
 80026b6:	18e4      	addlt	r4, r4, r3
 80026b8:	f000 f8de 	bl	8002878 <__malloc_lock>
 80026bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002730 <_free_r+0x8c>)
 80026be:	6813      	ldr	r3, [r2, #0]
 80026c0:	b933      	cbnz	r3, 80026d0 <_free_r+0x2c>
 80026c2:	6063      	str	r3, [r4, #4]
 80026c4:	6014      	str	r4, [r2, #0]
 80026c6:	4628      	mov	r0, r5
 80026c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026cc:	f000 b8da 	b.w	8002884 <__malloc_unlock>
 80026d0:	42a3      	cmp	r3, r4
 80026d2:	d908      	bls.n	80026e6 <_free_r+0x42>
 80026d4:	6820      	ldr	r0, [r4, #0]
 80026d6:	1821      	adds	r1, r4, r0
 80026d8:	428b      	cmp	r3, r1
 80026da:	bf01      	itttt	eq
 80026dc:	6819      	ldreq	r1, [r3, #0]
 80026de:	685b      	ldreq	r3, [r3, #4]
 80026e0:	1809      	addeq	r1, r1, r0
 80026e2:	6021      	streq	r1, [r4, #0]
 80026e4:	e7ed      	b.n	80026c2 <_free_r+0x1e>
 80026e6:	461a      	mov	r2, r3
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	b10b      	cbz	r3, 80026f0 <_free_r+0x4c>
 80026ec:	42a3      	cmp	r3, r4
 80026ee:	d9fa      	bls.n	80026e6 <_free_r+0x42>
 80026f0:	6811      	ldr	r1, [r2, #0]
 80026f2:	1850      	adds	r0, r2, r1
 80026f4:	42a0      	cmp	r0, r4
 80026f6:	d10b      	bne.n	8002710 <_free_r+0x6c>
 80026f8:	6820      	ldr	r0, [r4, #0]
 80026fa:	4401      	add	r1, r0
 80026fc:	1850      	adds	r0, r2, r1
 80026fe:	4283      	cmp	r3, r0
 8002700:	6011      	str	r1, [r2, #0]
 8002702:	d1e0      	bne.n	80026c6 <_free_r+0x22>
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4408      	add	r0, r1
 800270a:	6010      	str	r0, [r2, #0]
 800270c:	6053      	str	r3, [r2, #4]
 800270e:	e7da      	b.n	80026c6 <_free_r+0x22>
 8002710:	d902      	bls.n	8002718 <_free_r+0x74>
 8002712:	230c      	movs	r3, #12
 8002714:	602b      	str	r3, [r5, #0]
 8002716:	e7d6      	b.n	80026c6 <_free_r+0x22>
 8002718:	6820      	ldr	r0, [r4, #0]
 800271a:	1821      	adds	r1, r4, r0
 800271c:	428b      	cmp	r3, r1
 800271e:	bf01      	itttt	eq
 8002720:	6819      	ldreq	r1, [r3, #0]
 8002722:	685b      	ldreq	r3, [r3, #4]
 8002724:	1809      	addeq	r1, r1, r0
 8002726:	6021      	streq	r1, [r4, #0]
 8002728:	6063      	str	r3, [r4, #4]
 800272a:	6054      	str	r4, [r2, #4]
 800272c:	e7cb      	b.n	80026c6 <_free_r+0x22>
 800272e:	bd38      	pop	{r3, r4, r5, pc}
 8002730:	200002a4 	.word	0x200002a4

08002734 <sbrk_aligned>:
 8002734:	b570      	push	{r4, r5, r6, lr}
 8002736:	4e0f      	ldr	r6, [pc, #60]	@ (8002774 <sbrk_aligned+0x40>)
 8002738:	460c      	mov	r4, r1
 800273a:	6831      	ldr	r1, [r6, #0]
 800273c:	4605      	mov	r5, r0
 800273e:	b911      	cbnz	r1, 8002746 <sbrk_aligned+0x12>
 8002740:	f000 fce8 	bl	8003114 <_sbrk_r>
 8002744:	6030      	str	r0, [r6, #0]
 8002746:	4621      	mov	r1, r4
 8002748:	4628      	mov	r0, r5
 800274a:	f000 fce3 	bl	8003114 <_sbrk_r>
 800274e:	1c43      	adds	r3, r0, #1
 8002750:	d103      	bne.n	800275a <sbrk_aligned+0x26>
 8002752:	f04f 34ff 	mov.w	r4, #4294967295
 8002756:	4620      	mov	r0, r4
 8002758:	bd70      	pop	{r4, r5, r6, pc}
 800275a:	1cc4      	adds	r4, r0, #3
 800275c:	f024 0403 	bic.w	r4, r4, #3
 8002760:	42a0      	cmp	r0, r4
 8002762:	d0f8      	beq.n	8002756 <sbrk_aligned+0x22>
 8002764:	1a21      	subs	r1, r4, r0
 8002766:	4628      	mov	r0, r5
 8002768:	f000 fcd4 	bl	8003114 <_sbrk_r>
 800276c:	3001      	adds	r0, #1
 800276e:	d1f2      	bne.n	8002756 <sbrk_aligned+0x22>
 8002770:	e7ef      	b.n	8002752 <sbrk_aligned+0x1e>
 8002772:	bf00      	nop
 8002774:	200002a0 	.word	0x200002a0

08002778 <_malloc_r>:
 8002778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800277c:	1ccd      	adds	r5, r1, #3
 800277e:	f025 0503 	bic.w	r5, r5, #3
 8002782:	3508      	adds	r5, #8
 8002784:	2d0c      	cmp	r5, #12
 8002786:	bf38      	it	cc
 8002788:	250c      	movcc	r5, #12
 800278a:	2d00      	cmp	r5, #0
 800278c:	4606      	mov	r6, r0
 800278e:	db01      	blt.n	8002794 <_malloc_r+0x1c>
 8002790:	42a9      	cmp	r1, r5
 8002792:	d904      	bls.n	800279e <_malloc_r+0x26>
 8002794:	230c      	movs	r3, #12
 8002796:	6033      	str	r3, [r6, #0]
 8002798:	2000      	movs	r0, #0
 800279a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800279e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002874 <_malloc_r+0xfc>
 80027a2:	f000 f869 	bl	8002878 <__malloc_lock>
 80027a6:	f8d8 3000 	ldr.w	r3, [r8]
 80027aa:	461c      	mov	r4, r3
 80027ac:	bb44      	cbnz	r4, 8002800 <_malloc_r+0x88>
 80027ae:	4629      	mov	r1, r5
 80027b0:	4630      	mov	r0, r6
 80027b2:	f7ff ffbf 	bl	8002734 <sbrk_aligned>
 80027b6:	1c43      	adds	r3, r0, #1
 80027b8:	4604      	mov	r4, r0
 80027ba:	d158      	bne.n	800286e <_malloc_r+0xf6>
 80027bc:	f8d8 4000 	ldr.w	r4, [r8]
 80027c0:	4627      	mov	r7, r4
 80027c2:	2f00      	cmp	r7, #0
 80027c4:	d143      	bne.n	800284e <_malloc_r+0xd6>
 80027c6:	2c00      	cmp	r4, #0
 80027c8:	d04b      	beq.n	8002862 <_malloc_r+0xea>
 80027ca:	6823      	ldr	r3, [r4, #0]
 80027cc:	4639      	mov	r1, r7
 80027ce:	4630      	mov	r0, r6
 80027d0:	eb04 0903 	add.w	r9, r4, r3
 80027d4:	f000 fc9e 	bl	8003114 <_sbrk_r>
 80027d8:	4581      	cmp	r9, r0
 80027da:	d142      	bne.n	8002862 <_malloc_r+0xea>
 80027dc:	6821      	ldr	r1, [r4, #0]
 80027de:	4630      	mov	r0, r6
 80027e0:	1a6d      	subs	r5, r5, r1
 80027e2:	4629      	mov	r1, r5
 80027e4:	f7ff ffa6 	bl	8002734 <sbrk_aligned>
 80027e8:	3001      	adds	r0, #1
 80027ea:	d03a      	beq.n	8002862 <_malloc_r+0xea>
 80027ec:	6823      	ldr	r3, [r4, #0]
 80027ee:	442b      	add	r3, r5
 80027f0:	6023      	str	r3, [r4, #0]
 80027f2:	f8d8 3000 	ldr.w	r3, [r8]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	bb62      	cbnz	r2, 8002854 <_malloc_r+0xdc>
 80027fa:	f8c8 7000 	str.w	r7, [r8]
 80027fe:	e00f      	b.n	8002820 <_malloc_r+0xa8>
 8002800:	6822      	ldr	r2, [r4, #0]
 8002802:	1b52      	subs	r2, r2, r5
 8002804:	d420      	bmi.n	8002848 <_malloc_r+0xd0>
 8002806:	2a0b      	cmp	r2, #11
 8002808:	d917      	bls.n	800283a <_malloc_r+0xc2>
 800280a:	1961      	adds	r1, r4, r5
 800280c:	42a3      	cmp	r3, r4
 800280e:	6025      	str	r5, [r4, #0]
 8002810:	bf18      	it	ne
 8002812:	6059      	strne	r1, [r3, #4]
 8002814:	6863      	ldr	r3, [r4, #4]
 8002816:	bf08      	it	eq
 8002818:	f8c8 1000 	streq.w	r1, [r8]
 800281c:	5162      	str	r2, [r4, r5]
 800281e:	604b      	str	r3, [r1, #4]
 8002820:	4630      	mov	r0, r6
 8002822:	f000 f82f 	bl	8002884 <__malloc_unlock>
 8002826:	f104 000b 	add.w	r0, r4, #11
 800282a:	1d23      	adds	r3, r4, #4
 800282c:	f020 0007 	bic.w	r0, r0, #7
 8002830:	1ac2      	subs	r2, r0, r3
 8002832:	bf1c      	itt	ne
 8002834:	1a1b      	subne	r3, r3, r0
 8002836:	50a3      	strne	r3, [r4, r2]
 8002838:	e7af      	b.n	800279a <_malloc_r+0x22>
 800283a:	6862      	ldr	r2, [r4, #4]
 800283c:	42a3      	cmp	r3, r4
 800283e:	bf0c      	ite	eq
 8002840:	f8c8 2000 	streq.w	r2, [r8]
 8002844:	605a      	strne	r2, [r3, #4]
 8002846:	e7eb      	b.n	8002820 <_malloc_r+0xa8>
 8002848:	4623      	mov	r3, r4
 800284a:	6864      	ldr	r4, [r4, #4]
 800284c:	e7ae      	b.n	80027ac <_malloc_r+0x34>
 800284e:	463c      	mov	r4, r7
 8002850:	687f      	ldr	r7, [r7, #4]
 8002852:	e7b6      	b.n	80027c2 <_malloc_r+0x4a>
 8002854:	461a      	mov	r2, r3
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	42a3      	cmp	r3, r4
 800285a:	d1fb      	bne.n	8002854 <_malloc_r+0xdc>
 800285c:	2300      	movs	r3, #0
 800285e:	6053      	str	r3, [r2, #4]
 8002860:	e7de      	b.n	8002820 <_malloc_r+0xa8>
 8002862:	230c      	movs	r3, #12
 8002864:	4630      	mov	r0, r6
 8002866:	6033      	str	r3, [r6, #0]
 8002868:	f000 f80c 	bl	8002884 <__malloc_unlock>
 800286c:	e794      	b.n	8002798 <_malloc_r+0x20>
 800286e:	6005      	str	r5, [r0, #0]
 8002870:	e7d6      	b.n	8002820 <_malloc_r+0xa8>
 8002872:	bf00      	nop
 8002874:	200002a4 	.word	0x200002a4

08002878 <__malloc_lock>:
 8002878:	4801      	ldr	r0, [pc, #4]	@ (8002880 <__malloc_lock+0x8>)
 800287a:	f7ff bf10 	b.w	800269e <__retarget_lock_acquire_recursive>
 800287e:	bf00      	nop
 8002880:	2000029c 	.word	0x2000029c

08002884 <__malloc_unlock>:
 8002884:	4801      	ldr	r0, [pc, #4]	@ (800288c <__malloc_unlock+0x8>)
 8002886:	f7ff bf0b 	b.w	80026a0 <__retarget_lock_release_recursive>
 800288a:	bf00      	nop
 800288c:	2000029c 	.word	0x2000029c

08002890 <__sfputc_r>:
 8002890:	6893      	ldr	r3, [r2, #8]
 8002892:	b410      	push	{r4}
 8002894:	3b01      	subs	r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	6093      	str	r3, [r2, #8]
 800289a:	da07      	bge.n	80028ac <__sfputc_r+0x1c>
 800289c:	6994      	ldr	r4, [r2, #24]
 800289e:	42a3      	cmp	r3, r4
 80028a0:	db01      	blt.n	80028a6 <__sfputc_r+0x16>
 80028a2:	290a      	cmp	r1, #10
 80028a4:	d102      	bne.n	80028ac <__sfputc_r+0x1c>
 80028a6:	bc10      	pop	{r4}
 80028a8:	f000 bba0 	b.w	8002fec <__swbuf_r>
 80028ac:	6813      	ldr	r3, [r2, #0]
 80028ae:	1c58      	adds	r0, r3, #1
 80028b0:	6010      	str	r0, [r2, #0]
 80028b2:	7019      	strb	r1, [r3, #0]
 80028b4:	4608      	mov	r0, r1
 80028b6:	bc10      	pop	{r4}
 80028b8:	4770      	bx	lr

080028ba <__sfputs_r>:
 80028ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028bc:	4606      	mov	r6, r0
 80028be:	460f      	mov	r7, r1
 80028c0:	4614      	mov	r4, r2
 80028c2:	18d5      	adds	r5, r2, r3
 80028c4:	42ac      	cmp	r4, r5
 80028c6:	d101      	bne.n	80028cc <__sfputs_r+0x12>
 80028c8:	2000      	movs	r0, #0
 80028ca:	e007      	b.n	80028dc <__sfputs_r+0x22>
 80028cc:	463a      	mov	r2, r7
 80028ce:	4630      	mov	r0, r6
 80028d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028d4:	f7ff ffdc 	bl	8002890 <__sfputc_r>
 80028d8:	1c43      	adds	r3, r0, #1
 80028da:	d1f3      	bne.n	80028c4 <__sfputs_r+0xa>
 80028dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080028e0 <_vfiprintf_r>:
 80028e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e4:	460d      	mov	r5, r1
 80028e6:	4614      	mov	r4, r2
 80028e8:	4698      	mov	r8, r3
 80028ea:	4606      	mov	r6, r0
 80028ec:	b09d      	sub	sp, #116	@ 0x74
 80028ee:	b118      	cbz	r0, 80028f8 <_vfiprintf_r+0x18>
 80028f0:	6a03      	ldr	r3, [r0, #32]
 80028f2:	b90b      	cbnz	r3, 80028f8 <_vfiprintf_r+0x18>
 80028f4:	f7ff fdc6 	bl	8002484 <__sinit>
 80028f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80028fa:	07d9      	lsls	r1, r3, #31
 80028fc:	d405      	bmi.n	800290a <_vfiprintf_r+0x2a>
 80028fe:	89ab      	ldrh	r3, [r5, #12]
 8002900:	059a      	lsls	r2, r3, #22
 8002902:	d402      	bmi.n	800290a <_vfiprintf_r+0x2a>
 8002904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002906:	f7ff feca 	bl	800269e <__retarget_lock_acquire_recursive>
 800290a:	89ab      	ldrh	r3, [r5, #12]
 800290c:	071b      	lsls	r3, r3, #28
 800290e:	d501      	bpl.n	8002914 <_vfiprintf_r+0x34>
 8002910:	692b      	ldr	r3, [r5, #16]
 8002912:	b99b      	cbnz	r3, 800293c <_vfiprintf_r+0x5c>
 8002914:	4629      	mov	r1, r5
 8002916:	4630      	mov	r0, r6
 8002918:	f000 fba6 	bl	8003068 <__swsetup_r>
 800291c:	b170      	cbz	r0, 800293c <_vfiprintf_r+0x5c>
 800291e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002920:	07dc      	lsls	r4, r3, #31
 8002922:	d504      	bpl.n	800292e <_vfiprintf_r+0x4e>
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	b01d      	add	sp, #116	@ 0x74
 800292a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800292e:	89ab      	ldrh	r3, [r5, #12]
 8002930:	0598      	lsls	r0, r3, #22
 8002932:	d4f7      	bmi.n	8002924 <_vfiprintf_r+0x44>
 8002934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002936:	f7ff feb3 	bl	80026a0 <__retarget_lock_release_recursive>
 800293a:	e7f3      	b.n	8002924 <_vfiprintf_r+0x44>
 800293c:	2300      	movs	r3, #0
 800293e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002940:	2320      	movs	r3, #32
 8002942:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002946:	2330      	movs	r3, #48	@ 0x30
 8002948:	f04f 0901 	mov.w	r9, #1
 800294c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002950:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002afc <_vfiprintf_r+0x21c>
 8002954:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002958:	4623      	mov	r3, r4
 800295a:	469a      	mov	sl, r3
 800295c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002960:	b10a      	cbz	r2, 8002966 <_vfiprintf_r+0x86>
 8002962:	2a25      	cmp	r2, #37	@ 0x25
 8002964:	d1f9      	bne.n	800295a <_vfiprintf_r+0x7a>
 8002966:	ebba 0b04 	subs.w	fp, sl, r4
 800296a:	d00b      	beq.n	8002984 <_vfiprintf_r+0xa4>
 800296c:	465b      	mov	r3, fp
 800296e:	4622      	mov	r2, r4
 8002970:	4629      	mov	r1, r5
 8002972:	4630      	mov	r0, r6
 8002974:	f7ff ffa1 	bl	80028ba <__sfputs_r>
 8002978:	3001      	adds	r0, #1
 800297a:	f000 80a7 	beq.w	8002acc <_vfiprintf_r+0x1ec>
 800297e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002980:	445a      	add	r2, fp
 8002982:	9209      	str	r2, [sp, #36]	@ 0x24
 8002984:	f89a 3000 	ldrb.w	r3, [sl]
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 809f 	beq.w	8002acc <_vfiprintf_r+0x1ec>
 800298e:	2300      	movs	r3, #0
 8002990:	f04f 32ff 	mov.w	r2, #4294967295
 8002994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002998:	f10a 0a01 	add.w	sl, sl, #1
 800299c:	9304      	str	r3, [sp, #16]
 800299e:	9307      	str	r3, [sp, #28]
 80029a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80029a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80029a6:	4654      	mov	r4, sl
 80029a8:	2205      	movs	r2, #5
 80029aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029ae:	4853      	ldr	r0, [pc, #332]	@ (8002afc <_vfiprintf_r+0x21c>)
 80029b0:	f000 fbc0 	bl	8003134 <memchr>
 80029b4:	9a04      	ldr	r2, [sp, #16]
 80029b6:	b9d8      	cbnz	r0, 80029f0 <_vfiprintf_r+0x110>
 80029b8:	06d1      	lsls	r1, r2, #27
 80029ba:	bf44      	itt	mi
 80029bc:	2320      	movmi	r3, #32
 80029be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80029c2:	0713      	lsls	r3, r2, #28
 80029c4:	bf44      	itt	mi
 80029c6:	232b      	movmi	r3, #43	@ 0x2b
 80029c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80029cc:	f89a 3000 	ldrb.w	r3, [sl]
 80029d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80029d2:	d015      	beq.n	8002a00 <_vfiprintf_r+0x120>
 80029d4:	4654      	mov	r4, sl
 80029d6:	2000      	movs	r0, #0
 80029d8:	f04f 0c0a 	mov.w	ip, #10
 80029dc:	9a07      	ldr	r2, [sp, #28]
 80029de:	4621      	mov	r1, r4
 80029e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029e4:	3b30      	subs	r3, #48	@ 0x30
 80029e6:	2b09      	cmp	r3, #9
 80029e8:	d94b      	bls.n	8002a82 <_vfiprintf_r+0x1a2>
 80029ea:	b1b0      	cbz	r0, 8002a1a <_vfiprintf_r+0x13a>
 80029ec:	9207      	str	r2, [sp, #28]
 80029ee:	e014      	b.n	8002a1a <_vfiprintf_r+0x13a>
 80029f0:	eba0 0308 	sub.w	r3, r0, r8
 80029f4:	fa09 f303 	lsl.w	r3, r9, r3
 80029f8:	4313      	orrs	r3, r2
 80029fa:	46a2      	mov	sl, r4
 80029fc:	9304      	str	r3, [sp, #16]
 80029fe:	e7d2      	b.n	80029a6 <_vfiprintf_r+0xc6>
 8002a00:	9b03      	ldr	r3, [sp, #12]
 8002a02:	1d19      	adds	r1, r3, #4
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	9103      	str	r1, [sp, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bfbb      	ittet	lt
 8002a0c:	425b      	neglt	r3, r3
 8002a0e:	f042 0202 	orrlt.w	r2, r2, #2
 8002a12:	9307      	strge	r3, [sp, #28]
 8002a14:	9307      	strlt	r3, [sp, #28]
 8002a16:	bfb8      	it	lt
 8002a18:	9204      	strlt	r2, [sp, #16]
 8002a1a:	7823      	ldrb	r3, [r4, #0]
 8002a1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a1e:	d10a      	bne.n	8002a36 <_vfiprintf_r+0x156>
 8002a20:	7863      	ldrb	r3, [r4, #1]
 8002a22:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a24:	d132      	bne.n	8002a8c <_vfiprintf_r+0x1ac>
 8002a26:	9b03      	ldr	r3, [sp, #12]
 8002a28:	3402      	adds	r4, #2
 8002a2a:	1d1a      	adds	r2, r3, #4
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	9203      	str	r2, [sp, #12]
 8002a30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002a34:	9305      	str	r3, [sp, #20]
 8002a36:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002b00 <_vfiprintf_r+0x220>
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	4650      	mov	r0, sl
 8002a3e:	7821      	ldrb	r1, [r4, #0]
 8002a40:	f000 fb78 	bl	8003134 <memchr>
 8002a44:	b138      	cbz	r0, 8002a56 <_vfiprintf_r+0x176>
 8002a46:	2240      	movs	r2, #64	@ 0x40
 8002a48:	9b04      	ldr	r3, [sp, #16]
 8002a4a:	eba0 000a 	sub.w	r0, r0, sl
 8002a4e:	4082      	lsls	r2, r0
 8002a50:	4313      	orrs	r3, r2
 8002a52:	3401      	adds	r4, #1
 8002a54:	9304      	str	r3, [sp, #16]
 8002a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a5a:	2206      	movs	r2, #6
 8002a5c:	4829      	ldr	r0, [pc, #164]	@ (8002b04 <_vfiprintf_r+0x224>)
 8002a5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002a62:	f000 fb67 	bl	8003134 <memchr>
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d03f      	beq.n	8002aea <_vfiprintf_r+0x20a>
 8002a6a:	4b27      	ldr	r3, [pc, #156]	@ (8002b08 <_vfiprintf_r+0x228>)
 8002a6c:	bb1b      	cbnz	r3, 8002ab6 <_vfiprintf_r+0x1d6>
 8002a6e:	9b03      	ldr	r3, [sp, #12]
 8002a70:	3307      	adds	r3, #7
 8002a72:	f023 0307 	bic.w	r3, r3, #7
 8002a76:	3308      	adds	r3, #8
 8002a78:	9303      	str	r3, [sp, #12]
 8002a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a7c:	443b      	add	r3, r7
 8002a7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a80:	e76a      	b.n	8002958 <_vfiprintf_r+0x78>
 8002a82:	460c      	mov	r4, r1
 8002a84:	2001      	movs	r0, #1
 8002a86:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a8a:	e7a8      	b.n	80029de <_vfiprintf_r+0xfe>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f04f 0c0a 	mov.w	ip, #10
 8002a92:	4619      	mov	r1, r3
 8002a94:	3401      	adds	r4, #1
 8002a96:	9305      	str	r3, [sp, #20]
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a9e:	3a30      	subs	r2, #48	@ 0x30
 8002aa0:	2a09      	cmp	r2, #9
 8002aa2:	d903      	bls.n	8002aac <_vfiprintf_r+0x1cc>
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0c6      	beq.n	8002a36 <_vfiprintf_r+0x156>
 8002aa8:	9105      	str	r1, [sp, #20]
 8002aaa:	e7c4      	b.n	8002a36 <_vfiprintf_r+0x156>
 8002aac:	4604      	mov	r4, r0
 8002aae:	2301      	movs	r3, #1
 8002ab0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ab4:	e7f0      	b.n	8002a98 <_vfiprintf_r+0x1b8>
 8002ab6:	ab03      	add	r3, sp, #12
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	462a      	mov	r2, r5
 8002abc:	4630      	mov	r0, r6
 8002abe:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <_vfiprintf_r+0x22c>)
 8002ac0:	a904      	add	r1, sp, #16
 8002ac2:	f3af 8000 	nop.w
 8002ac6:	4607      	mov	r7, r0
 8002ac8:	1c78      	adds	r0, r7, #1
 8002aca:	d1d6      	bne.n	8002a7a <_vfiprintf_r+0x19a>
 8002acc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ace:	07d9      	lsls	r1, r3, #31
 8002ad0:	d405      	bmi.n	8002ade <_vfiprintf_r+0x1fe>
 8002ad2:	89ab      	ldrh	r3, [r5, #12]
 8002ad4:	059a      	lsls	r2, r3, #22
 8002ad6:	d402      	bmi.n	8002ade <_vfiprintf_r+0x1fe>
 8002ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002ada:	f7ff fde1 	bl	80026a0 <__retarget_lock_release_recursive>
 8002ade:	89ab      	ldrh	r3, [r5, #12]
 8002ae0:	065b      	lsls	r3, r3, #25
 8002ae2:	f53f af1f 	bmi.w	8002924 <_vfiprintf_r+0x44>
 8002ae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ae8:	e71e      	b.n	8002928 <_vfiprintf_r+0x48>
 8002aea:	ab03      	add	r3, sp, #12
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	462a      	mov	r2, r5
 8002af0:	4630      	mov	r0, r6
 8002af2:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <_vfiprintf_r+0x22c>)
 8002af4:	a904      	add	r1, sp, #16
 8002af6:	f000 f87d 	bl	8002bf4 <_printf_i>
 8002afa:	e7e4      	b.n	8002ac6 <_vfiprintf_r+0x1e6>
 8002afc:	0800410a 	.word	0x0800410a
 8002b00:	08004110 	.word	0x08004110
 8002b04:	08004114 	.word	0x08004114
 8002b08:	00000000 	.word	0x00000000
 8002b0c:	080028bb 	.word	0x080028bb

08002b10 <_printf_common>:
 8002b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b14:	4616      	mov	r6, r2
 8002b16:	4698      	mov	r8, r3
 8002b18:	688a      	ldr	r2, [r1, #8]
 8002b1a:	690b      	ldr	r3, [r1, #16]
 8002b1c:	4607      	mov	r7, r0
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	bfb8      	it	lt
 8002b22:	4613      	movlt	r3, r2
 8002b24:	6033      	str	r3, [r6, #0]
 8002b26:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002b2a:	460c      	mov	r4, r1
 8002b2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002b30:	b10a      	cbz	r2, 8002b36 <_printf_common+0x26>
 8002b32:	3301      	adds	r3, #1
 8002b34:	6033      	str	r3, [r6, #0]
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	0699      	lsls	r1, r3, #26
 8002b3a:	bf42      	ittt	mi
 8002b3c:	6833      	ldrmi	r3, [r6, #0]
 8002b3e:	3302      	addmi	r3, #2
 8002b40:	6033      	strmi	r3, [r6, #0]
 8002b42:	6825      	ldr	r5, [r4, #0]
 8002b44:	f015 0506 	ands.w	r5, r5, #6
 8002b48:	d106      	bne.n	8002b58 <_printf_common+0x48>
 8002b4a:	f104 0a19 	add.w	sl, r4, #25
 8002b4e:	68e3      	ldr	r3, [r4, #12]
 8002b50:	6832      	ldr	r2, [r6, #0]
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	42ab      	cmp	r3, r5
 8002b56:	dc2b      	bgt.n	8002bb0 <_printf_common+0xa0>
 8002b58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002b5c:	6822      	ldr	r2, [r4, #0]
 8002b5e:	3b00      	subs	r3, #0
 8002b60:	bf18      	it	ne
 8002b62:	2301      	movne	r3, #1
 8002b64:	0692      	lsls	r2, r2, #26
 8002b66:	d430      	bmi.n	8002bca <_printf_common+0xba>
 8002b68:	4641      	mov	r1, r8
 8002b6a:	4638      	mov	r0, r7
 8002b6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002b70:	47c8      	blx	r9
 8002b72:	3001      	adds	r0, #1
 8002b74:	d023      	beq.n	8002bbe <_printf_common+0xae>
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	6922      	ldr	r2, [r4, #16]
 8002b7a:	f003 0306 	and.w	r3, r3, #6
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	bf14      	ite	ne
 8002b82:	2500      	movne	r5, #0
 8002b84:	6833      	ldreq	r3, [r6, #0]
 8002b86:	f04f 0600 	mov.w	r6, #0
 8002b8a:	bf08      	it	eq
 8002b8c:	68e5      	ldreq	r5, [r4, #12]
 8002b8e:	f104 041a 	add.w	r4, r4, #26
 8002b92:	bf08      	it	eq
 8002b94:	1aed      	subeq	r5, r5, r3
 8002b96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002b9a:	bf08      	it	eq
 8002b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	bfc4      	itt	gt
 8002ba4:	1a9b      	subgt	r3, r3, r2
 8002ba6:	18ed      	addgt	r5, r5, r3
 8002ba8:	42b5      	cmp	r5, r6
 8002baa:	d11a      	bne.n	8002be2 <_printf_common+0xd2>
 8002bac:	2000      	movs	r0, #0
 8002bae:	e008      	b.n	8002bc2 <_printf_common+0xb2>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	4652      	mov	r2, sl
 8002bb4:	4641      	mov	r1, r8
 8002bb6:	4638      	mov	r0, r7
 8002bb8:	47c8      	blx	r9
 8002bba:	3001      	adds	r0, #1
 8002bbc:	d103      	bne.n	8002bc6 <_printf_common+0xb6>
 8002bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bc6:	3501      	adds	r5, #1
 8002bc8:	e7c1      	b.n	8002b4e <_printf_common+0x3e>
 8002bca:	2030      	movs	r0, #48	@ 0x30
 8002bcc:	18e1      	adds	r1, r4, r3
 8002bce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002bd8:	4422      	add	r2, r4
 8002bda:	3302      	adds	r3, #2
 8002bdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002be0:	e7c2      	b.n	8002b68 <_printf_common+0x58>
 8002be2:	2301      	movs	r3, #1
 8002be4:	4622      	mov	r2, r4
 8002be6:	4641      	mov	r1, r8
 8002be8:	4638      	mov	r0, r7
 8002bea:	47c8      	blx	r9
 8002bec:	3001      	adds	r0, #1
 8002bee:	d0e6      	beq.n	8002bbe <_printf_common+0xae>
 8002bf0:	3601      	adds	r6, #1
 8002bf2:	e7d9      	b.n	8002ba8 <_printf_common+0x98>

08002bf4 <_printf_i>:
 8002bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bf8:	7e0f      	ldrb	r7, [r1, #24]
 8002bfa:	4691      	mov	r9, r2
 8002bfc:	2f78      	cmp	r7, #120	@ 0x78
 8002bfe:	4680      	mov	r8, r0
 8002c00:	460c      	mov	r4, r1
 8002c02:	469a      	mov	sl, r3
 8002c04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002c06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002c0a:	d807      	bhi.n	8002c1c <_printf_i+0x28>
 8002c0c:	2f62      	cmp	r7, #98	@ 0x62
 8002c0e:	d80a      	bhi.n	8002c26 <_printf_i+0x32>
 8002c10:	2f00      	cmp	r7, #0
 8002c12:	f000 80d3 	beq.w	8002dbc <_printf_i+0x1c8>
 8002c16:	2f58      	cmp	r7, #88	@ 0x58
 8002c18:	f000 80ba 	beq.w	8002d90 <_printf_i+0x19c>
 8002c1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002c24:	e03a      	b.n	8002c9c <_printf_i+0xa8>
 8002c26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002c2a:	2b15      	cmp	r3, #21
 8002c2c:	d8f6      	bhi.n	8002c1c <_printf_i+0x28>
 8002c2e:	a101      	add	r1, pc, #4	@ (adr r1, 8002c34 <_printf_i+0x40>)
 8002c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c34:	08002c8d 	.word	0x08002c8d
 8002c38:	08002ca1 	.word	0x08002ca1
 8002c3c:	08002c1d 	.word	0x08002c1d
 8002c40:	08002c1d 	.word	0x08002c1d
 8002c44:	08002c1d 	.word	0x08002c1d
 8002c48:	08002c1d 	.word	0x08002c1d
 8002c4c:	08002ca1 	.word	0x08002ca1
 8002c50:	08002c1d 	.word	0x08002c1d
 8002c54:	08002c1d 	.word	0x08002c1d
 8002c58:	08002c1d 	.word	0x08002c1d
 8002c5c:	08002c1d 	.word	0x08002c1d
 8002c60:	08002da3 	.word	0x08002da3
 8002c64:	08002ccb 	.word	0x08002ccb
 8002c68:	08002d5d 	.word	0x08002d5d
 8002c6c:	08002c1d 	.word	0x08002c1d
 8002c70:	08002c1d 	.word	0x08002c1d
 8002c74:	08002dc5 	.word	0x08002dc5
 8002c78:	08002c1d 	.word	0x08002c1d
 8002c7c:	08002ccb 	.word	0x08002ccb
 8002c80:	08002c1d 	.word	0x08002c1d
 8002c84:	08002c1d 	.word	0x08002c1d
 8002c88:	08002d65 	.word	0x08002d65
 8002c8c:	6833      	ldr	r3, [r6, #0]
 8002c8e:	1d1a      	adds	r2, r3, #4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6032      	str	r2, [r6, #0]
 8002c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e09e      	b.n	8002dde <_printf_i+0x1ea>
 8002ca0:	6833      	ldr	r3, [r6, #0]
 8002ca2:	6820      	ldr	r0, [r4, #0]
 8002ca4:	1d19      	adds	r1, r3, #4
 8002ca6:	6031      	str	r1, [r6, #0]
 8002ca8:	0606      	lsls	r6, r0, #24
 8002caa:	d501      	bpl.n	8002cb0 <_printf_i+0xbc>
 8002cac:	681d      	ldr	r5, [r3, #0]
 8002cae:	e003      	b.n	8002cb8 <_printf_i+0xc4>
 8002cb0:	0645      	lsls	r5, r0, #25
 8002cb2:	d5fb      	bpl.n	8002cac <_printf_i+0xb8>
 8002cb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002cb8:	2d00      	cmp	r5, #0
 8002cba:	da03      	bge.n	8002cc4 <_printf_i+0xd0>
 8002cbc:	232d      	movs	r3, #45	@ 0x2d
 8002cbe:	426d      	negs	r5, r5
 8002cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002cc4:	230a      	movs	r3, #10
 8002cc6:	4859      	ldr	r0, [pc, #356]	@ (8002e2c <_printf_i+0x238>)
 8002cc8:	e011      	b.n	8002cee <_printf_i+0xfa>
 8002cca:	6821      	ldr	r1, [r4, #0]
 8002ccc:	6833      	ldr	r3, [r6, #0]
 8002cce:	0608      	lsls	r0, r1, #24
 8002cd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8002cd4:	d402      	bmi.n	8002cdc <_printf_i+0xe8>
 8002cd6:	0649      	lsls	r1, r1, #25
 8002cd8:	bf48      	it	mi
 8002cda:	b2ad      	uxthmi	r5, r5
 8002cdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8002cde:	6033      	str	r3, [r6, #0]
 8002ce0:	bf14      	ite	ne
 8002ce2:	230a      	movne	r3, #10
 8002ce4:	2308      	moveq	r3, #8
 8002ce6:	4851      	ldr	r0, [pc, #324]	@ (8002e2c <_printf_i+0x238>)
 8002ce8:	2100      	movs	r1, #0
 8002cea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002cee:	6866      	ldr	r6, [r4, #4]
 8002cf0:	2e00      	cmp	r6, #0
 8002cf2:	bfa8      	it	ge
 8002cf4:	6821      	ldrge	r1, [r4, #0]
 8002cf6:	60a6      	str	r6, [r4, #8]
 8002cf8:	bfa4      	itt	ge
 8002cfa:	f021 0104 	bicge.w	r1, r1, #4
 8002cfe:	6021      	strge	r1, [r4, #0]
 8002d00:	b90d      	cbnz	r5, 8002d06 <_printf_i+0x112>
 8002d02:	2e00      	cmp	r6, #0
 8002d04:	d04b      	beq.n	8002d9e <_printf_i+0x1aa>
 8002d06:	4616      	mov	r6, r2
 8002d08:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d0c:	fb03 5711 	mls	r7, r3, r1, r5
 8002d10:	5dc7      	ldrb	r7, [r0, r7]
 8002d12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d16:	462f      	mov	r7, r5
 8002d18:	42bb      	cmp	r3, r7
 8002d1a:	460d      	mov	r5, r1
 8002d1c:	d9f4      	bls.n	8002d08 <_printf_i+0x114>
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d10b      	bne.n	8002d3a <_printf_i+0x146>
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	07df      	lsls	r7, r3, #31
 8002d26:	d508      	bpl.n	8002d3a <_printf_i+0x146>
 8002d28:	6923      	ldr	r3, [r4, #16]
 8002d2a:	6861      	ldr	r1, [r4, #4]
 8002d2c:	4299      	cmp	r1, r3
 8002d2e:	bfde      	ittt	le
 8002d30:	2330      	movle	r3, #48	@ 0x30
 8002d32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d3a:	1b92      	subs	r2, r2, r6
 8002d3c:	6122      	str	r2, [r4, #16]
 8002d3e:	464b      	mov	r3, r9
 8002d40:	4621      	mov	r1, r4
 8002d42:	4640      	mov	r0, r8
 8002d44:	f8cd a000 	str.w	sl, [sp]
 8002d48:	aa03      	add	r2, sp, #12
 8002d4a:	f7ff fee1 	bl	8002b10 <_printf_common>
 8002d4e:	3001      	adds	r0, #1
 8002d50:	d14a      	bne.n	8002de8 <_printf_i+0x1f4>
 8002d52:	f04f 30ff 	mov.w	r0, #4294967295
 8002d56:	b004      	add	sp, #16
 8002d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d5c:	6823      	ldr	r3, [r4, #0]
 8002d5e:	f043 0320 	orr.w	r3, r3, #32
 8002d62:	6023      	str	r3, [r4, #0]
 8002d64:	2778      	movs	r7, #120	@ 0x78
 8002d66:	4832      	ldr	r0, [pc, #200]	@ (8002e30 <_printf_i+0x23c>)
 8002d68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	6831      	ldr	r1, [r6, #0]
 8002d70:	061f      	lsls	r7, r3, #24
 8002d72:	f851 5b04 	ldr.w	r5, [r1], #4
 8002d76:	d402      	bmi.n	8002d7e <_printf_i+0x18a>
 8002d78:	065f      	lsls	r7, r3, #25
 8002d7a:	bf48      	it	mi
 8002d7c:	b2ad      	uxthmi	r5, r5
 8002d7e:	6031      	str	r1, [r6, #0]
 8002d80:	07d9      	lsls	r1, r3, #31
 8002d82:	bf44      	itt	mi
 8002d84:	f043 0320 	orrmi.w	r3, r3, #32
 8002d88:	6023      	strmi	r3, [r4, #0]
 8002d8a:	b11d      	cbz	r5, 8002d94 <_printf_i+0x1a0>
 8002d8c:	2310      	movs	r3, #16
 8002d8e:	e7ab      	b.n	8002ce8 <_printf_i+0xf4>
 8002d90:	4826      	ldr	r0, [pc, #152]	@ (8002e2c <_printf_i+0x238>)
 8002d92:	e7e9      	b.n	8002d68 <_printf_i+0x174>
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	f023 0320 	bic.w	r3, r3, #32
 8002d9a:	6023      	str	r3, [r4, #0]
 8002d9c:	e7f6      	b.n	8002d8c <_printf_i+0x198>
 8002d9e:	4616      	mov	r6, r2
 8002da0:	e7bd      	b.n	8002d1e <_printf_i+0x12a>
 8002da2:	6833      	ldr	r3, [r6, #0]
 8002da4:	6825      	ldr	r5, [r4, #0]
 8002da6:	1d18      	adds	r0, r3, #4
 8002da8:	6961      	ldr	r1, [r4, #20]
 8002daa:	6030      	str	r0, [r6, #0]
 8002dac:	062e      	lsls	r6, r5, #24
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	d501      	bpl.n	8002db6 <_printf_i+0x1c2>
 8002db2:	6019      	str	r1, [r3, #0]
 8002db4:	e002      	b.n	8002dbc <_printf_i+0x1c8>
 8002db6:	0668      	lsls	r0, r5, #25
 8002db8:	d5fb      	bpl.n	8002db2 <_printf_i+0x1be>
 8002dba:	8019      	strh	r1, [r3, #0]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	4616      	mov	r6, r2
 8002dc0:	6123      	str	r3, [r4, #16]
 8002dc2:	e7bc      	b.n	8002d3e <_printf_i+0x14a>
 8002dc4:	6833      	ldr	r3, [r6, #0]
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	1d1a      	adds	r2, r3, #4
 8002dca:	6032      	str	r2, [r6, #0]
 8002dcc:	681e      	ldr	r6, [r3, #0]
 8002dce:	6862      	ldr	r2, [r4, #4]
 8002dd0:	4630      	mov	r0, r6
 8002dd2:	f000 f9af 	bl	8003134 <memchr>
 8002dd6:	b108      	cbz	r0, 8002ddc <_printf_i+0x1e8>
 8002dd8:	1b80      	subs	r0, r0, r6
 8002dda:	6060      	str	r0, [r4, #4]
 8002ddc:	6863      	ldr	r3, [r4, #4]
 8002dde:	6123      	str	r3, [r4, #16]
 8002de0:	2300      	movs	r3, #0
 8002de2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002de6:	e7aa      	b.n	8002d3e <_printf_i+0x14a>
 8002de8:	4632      	mov	r2, r6
 8002dea:	4649      	mov	r1, r9
 8002dec:	4640      	mov	r0, r8
 8002dee:	6923      	ldr	r3, [r4, #16]
 8002df0:	47d0      	blx	sl
 8002df2:	3001      	adds	r0, #1
 8002df4:	d0ad      	beq.n	8002d52 <_printf_i+0x15e>
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	079b      	lsls	r3, r3, #30
 8002dfa:	d413      	bmi.n	8002e24 <_printf_i+0x230>
 8002dfc:	68e0      	ldr	r0, [r4, #12]
 8002dfe:	9b03      	ldr	r3, [sp, #12]
 8002e00:	4298      	cmp	r0, r3
 8002e02:	bfb8      	it	lt
 8002e04:	4618      	movlt	r0, r3
 8002e06:	e7a6      	b.n	8002d56 <_printf_i+0x162>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	4632      	mov	r2, r6
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	4640      	mov	r0, r8
 8002e10:	47d0      	blx	sl
 8002e12:	3001      	adds	r0, #1
 8002e14:	d09d      	beq.n	8002d52 <_printf_i+0x15e>
 8002e16:	3501      	adds	r5, #1
 8002e18:	68e3      	ldr	r3, [r4, #12]
 8002e1a:	9903      	ldr	r1, [sp, #12]
 8002e1c:	1a5b      	subs	r3, r3, r1
 8002e1e:	42ab      	cmp	r3, r5
 8002e20:	dcf2      	bgt.n	8002e08 <_printf_i+0x214>
 8002e22:	e7eb      	b.n	8002dfc <_printf_i+0x208>
 8002e24:	2500      	movs	r5, #0
 8002e26:	f104 0619 	add.w	r6, r4, #25
 8002e2a:	e7f5      	b.n	8002e18 <_printf_i+0x224>
 8002e2c:	0800411b 	.word	0x0800411b
 8002e30:	0800412c 	.word	0x0800412c

08002e34 <__sflush_r>:
 8002e34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3a:	0716      	lsls	r6, r2, #28
 8002e3c:	4605      	mov	r5, r0
 8002e3e:	460c      	mov	r4, r1
 8002e40:	d454      	bmi.n	8002eec <__sflush_r+0xb8>
 8002e42:	684b      	ldr	r3, [r1, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	dc02      	bgt.n	8002e4e <__sflush_r+0x1a>
 8002e48:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	dd48      	ble.n	8002ee0 <__sflush_r+0xac>
 8002e4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002e50:	2e00      	cmp	r6, #0
 8002e52:	d045      	beq.n	8002ee0 <__sflush_r+0xac>
 8002e54:	2300      	movs	r3, #0
 8002e56:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002e5a:	682f      	ldr	r7, [r5, #0]
 8002e5c:	6a21      	ldr	r1, [r4, #32]
 8002e5e:	602b      	str	r3, [r5, #0]
 8002e60:	d030      	beq.n	8002ec4 <__sflush_r+0x90>
 8002e62:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002e64:	89a3      	ldrh	r3, [r4, #12]
 8002e66:	0759      	lsls	r1, r3, #29
 8002e68:	d505      	bpl.n	8002e76 <__sflush_r+0x42>
 8002e6a:	6863      	ldr	r3, [r4, #4]
 8002e6c:	1ad2      	subs	r2, r2, r3
 8002e6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002e70:	b10b      	cbz	r3, 8002e76 <__sflush_r+0x42>
 8002e72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002e74:	1ad2      	subs	r2, r2, r3
 8002e76:	2300      	movs	r3, #0
 8002e78:	4628      	mov	r0, r5
 8002e7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002e7c:	6a21      	ldr	r1, [r4, #32]
 8002e7e:	47b0      	blx	r6
 8002e80:	1c43      	adds	r3, r0, #1
 8002e82:	89a3      	ldrh	r3, [r4, #12]
 8002e84:	d106      	bne.n	8002e94 <__sflush_r+0x60>
 8002e86:	6829      	ldr	r1, [r5, #0]
 8002e88:	291d      	cmp	r1, #29
 8002e8a:	d82b      	bhi.n	8002ee4 <__sflush_r+0xb0>
 8002e8c:	4a28      	ldr	r2, [pc, #160]	@ (8002f30 <__sflush_r+0xfc>)
 8002e8e:	410a      	asrs	r2, r1
 8002e90:	07d6      	lsls	r6, r2, #31
 8002e92:	d427      	bmi.n	8002ee4 <__sflush_r+0xb0>
 8002e94:	2200      	movs	r2, #0
 8002e96:	6062      	str	r2, [r4, #4]
 8002e98:	6922      	ldr	r2, [r4, #16]
 8002e9a:	04d9      	lsls	r1, r3, #19
 8002e9c:	6022      	str	r2, [r4, #0]
 8002e9e:	d504      	bpl.n	8002eaa <__sflush_r+0x76>
 8002ea0:	1c42      	adds	r2, r0, #1
 8002ea2:	d101      	bne.n	8002ea8 <__sflush_r+0x74>
 8002ea4:	682b      	ldr	r3, [r5, #0]
 8002ea6:	b903      	cbnz	r3, 8002eaa <__sflush_r+0x76>
 8002ea8:	6560      	str	r0, [r4, #84]	@ 0x54
 8002eaa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002eac:	602f      	str	r7, [r5, #0]
 8002eae:	b1b9      	cbz	r1, 8002ee0 <__sflush_r+0xac>
 8002eb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002eb4:	4299      	cmp	r1, r3
 8002eb6:	d002      	beq.n	8002ebe <__sflush_r+0x8a>
 8002eb8:	4628      	mov	r0, r5
 8002eba:	f7ff fbf3 	bl	80026a4 <_free_r>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ec2:	e00d      	b.n	8002ee0 <__sflush_r+0xac>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	4628      	mov	r0, r5
 8002ec8:	47b0      	blx	r6
 8002eca:	4602      	mov	r2, r0
 8002ecc:	1c50      	adds	r0, r2, #1
 8002ece:	d1c9      	bne.n	8002e64 <__sflush_r+0x30>
 8002ed0:	682b      	ldr	r3, [r5, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0c6      	beq.n	8002e64 <__sflush_r+0x30>
 8002ed6:	2b1d      	cmp	r3, #29
 8002ed8:	d001      	beq.n	8002ede <__sflush_r+0xaa>
 8002eda:	2b16      	cmp	r3, #22
 8002edc:	d11d      	bne.n	8002f1a <__sflush_r+0xe6>
 8002ede:	602f      	str	r7, [r5, #0]
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	e021      	b.n	8002f28 <__sflush_r+0xf4>
 8002ee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ee8:	b21b      	sxth	r3, r3
 8002eea:	e01a      	b.n	8002f22 <__sflush_r+0xee>
 8002eec:	690f      	ldr	r7, [r1, #16]
 8002eee:	2f00      	cmp	r7, #0
 8002ef0:	d0f6      	beq.n	8002ee0 <__sflush_r+0xac>
 8002ef2:	0793      	lsls	r3, r2, #30
 8002ef4:	bf18      	it	ne
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	680e      	ldr	r6, [r1, #0]
 8002efa:	bf08      	it	eq
 8002efc:	694b      	ldreq	r3, [r1, #20]
 8002efe:	1bf6      	subs	r6, r6, r7
 8002f00:	600f      	str	r7, [r1, #0]
 8002f02:	608b      	str	r3, [r1, #8]
 8002f04:	2e00      	cmp	r6, #0
 8002f06:	ddeb      	ble.n	8002ee0 <__sflush_r+0xac>
 8002f08:	4633      	mov	r3, r6
 8002f0a:	463a      	mov	r2, r7
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	6a21      	ldr	r1, [r4, #32]
 8002f10:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002f14:	47e0      	blx	ip
 8002f16:	2800      	cmp	r0, #0
 8002f18:	dc07      	bgt.n	8002f2a <__sflush_r+0xf6>
 8002f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f22:	f04f 30ff 	mov.w	r0, #4294967295
 8002f26:	81a3      	strh	r3, [r4, #12]
 8002f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f2a:	4407      	add	r7, r0
 8002f2c:	1a36      	subs	r6, r6, r0
 8002f2e:	e7e9      	b.n	8002f04 <__sflush_r+0xd0>
 8002f30:	dfbffffe 	.word	0xdfbffffe

08002f34 <_fflush_r>:
 8002f34:	b538      	push	{r3, r4, r5, lr}
 8002f36:	690b      	ldr	r3, [r1, #16]
 8002f38:	4605      	mov	r5, r0
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	b913      	cbnz	r3, 8002f44 <_fflush_r+0x10>
 8002f3e:	2500      	movs	r5, #0
 8002f40:	4628      	mov	r0, r5
 8002f42:	bd38      	pop	{r3, r4, r5, pc}
 8002f44:	b118      	cbz	r0, 8002f4e <_fflush_r+0x1a>
 8002f46:	6a03      	ldr	r3, [r0, #32]
 8002f48:	b90b      	cbnz	r3, 8002f4e <_fflush_r+0x1a>
 8002f4a:	f7ff fa9b 	bl	8002484 <__sinit>
 8002f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f3      	beq.n	8002f3e <_fflush_r+0xa>
 8002f56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002f58:	07d0      	lsls	r0, r2, #31
 8002f5a:	d404      	bmi.n	8002f66 <_fflush_r+0x32>
 8002f5c:	0599      	lsls	r1, r3, #22
 8002f5e:	d402      	bmi.n	8002f66 <_fflush_r+0x32>
 8002f60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f62:	f7ff fb9c 	bl	800269e <__retarget_lock_acquire_recursive>
 8002f66:	4628      	mov	r0, r5
 8002f68:	4621      	mov	r1, r4
 8002f6a:	f7ff ff63 	bl	8002e34 <__sflush_r>
 8002f6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f70:	4605      	mov	r5, r0
 8002f72:	07da      	lsls	r2, r3, #31
 8002f74:	d4e4      	bmi.n	8002f40 <_fflush_r+0xc>
 8002f76:	89a3      	ldrh	r3, [r4, #12]
 8002f78:	059b      	lsls	r3, r3, #22
 8002f7a:	d4e1      	bmi.n	8002f40 <_fflush_r+0xc>
 8002f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f7e:	f7ff fb8f 	bl	80026a0 <__retarget_lock_release_recursive>
 8002f82:	e7dd      	b.n	8002f40 <_fflush_r+0xc>

08002f84 <_putc_r>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	460d      	mov	r5, r1
 8002f88:	4614      	mov	r4, r2
 8002f8a:	4606      	mov	r6, r0
 8002f8c:	b118      	cbz	r0, 8002f96 <_putc_r+0x12>
 8002f8e:	6a03      	ldr	r3, [r0, #32]
 8002f90:	b90b      	cbnz	r3, 8002f96 <_putc_r+0x12>
 8002f92:	f7ff fa77 	bl	8002484 <__sinit>
 8002f96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f98:	07d8      	lsls	r0, r3, #31
 8002f9a:	d405      	bmi.n	8002fa8 <_putc_r+0x24>
 8002f9c:	89a3      	ldrh	r3, [r4, #12]
 8002f9e:	0599      	lsls	r1, r3, #22
 8002fa0:	d402      	bmi.n	8002fa8 <_putc_r+0x24>
 8002fa2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fa4:	f7ff fb7b 	bl	800269e <__retarget_lock_acquire_recursive>
 8002fa8:	68a3      	ldr	r3, [r4, #8]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	60a3      	str	r3, [r4, #8]
 8002fb0:	da05      	bge.n	8002fbe <_putc_r+0x3a>
 8002fb2:	69a2      	ldr	r2, [r4, #24]
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	db12      	blt.n	8002fde <_putc_r+0x5a>
 8002fb8:	b2eb      	uxtb	r3, r5
 8002fba:	2b0a      	cmp	r3, #10
 8002fbc:	d00f      	beq.n	8002fde <_putc_r+0x5a>
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	6022      	str	r2, [r4, #0]
 8002fc4:	701d      	strb	r5, [r3, #0]
 8002fc6:	b2ed      	uxtb	r5, r5
 8002fc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002fca:	07da      	lsls	r2, r3, #31
 8002fcc:	d405      	bmi.n	8002fda <_putc_r+0x56>
 8002fce:	89a3      	ldrh	r3, [r4, #12]
 8002fd0:	059b      	lsls	r3, r3, #22
 8002fd2:	d402      	bmi.n	8002fda <_putc_r+0x56>
 8002fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fd6:	f7ff fb63 	bl	80026a0 <__retarget_lock_release_recursive>
 8002fda:	4628      	mov	r0, r5
 8002fdc:	bd70      	pop	{r4, r5, r6, pc}
 8002fde:	4629      	mov	r1, r5
 8002fe0:	4622      	mov	r2, r4
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	f000 f802 	bl	8002fec <__swbuf_r>
 8002fe8:	4605      	mov	r5, r0
 8002fea:	e7ed      	b.n	8002fc8 <_putc_r+0x44>

08002fec <__swbuf_r>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	460e      	mov	r6, r1
 8002ff0:	4614      	mov	r4, r2
 8002ff2:	4605      	mov	r5, r0
 8002ff4:	b118      	cbz	r0, 8002ffe <__swbuf_r+0x12>
 8002ff6:	6a03      	ldr	r3, [r0, #32]
 8002ff8:	b90b      	cbnz	r3, 8002ffe <__swbuf_r+0x12>
 8002ffa:	f7ff fa43 	bl	8002484 <__sinit>
 8002ffe:	69a3      	ldr	r3, [r4, #24]
 8003000:	60a3      	str	r3, [r4, #8]
 8003002:	89a3      	ldrh	r3, [r4, #12]
 8003004:	071a      	lsls	r2, r3, #28
 8003006:	d501      	bpl.n	800300c <__swbuf_r+0x20>
 8003008:	6923      	ldr	r3, [r4, #16]
 800300a:	b943      	cbnz	r3, 800301e <__swbuf_r+0x32>
 800300c:	4621      	mov	r1, r4
 800300e:	4628      	mov	r0, r5
 8003010:	f000 f82a 	bl	8003068 <__swsetup_r>
 8003014:	b118      	cbz	r0, 800301e <__swbuf_r+0x32>
 8003016:	f04f 37ff 	mov.w	r7, #4294967295
 800301a:	4638      	mov	r0, r7
 800301c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	6922      	ldr	r2, [r4, #16]
 8003022:	b2f6      	uxtb	r6, r6
 8003024:	1a98      	subs	r0, r3, r2
 8003026:	6963      	ldr	r3, [r4, #20]
 8003028:	4637      	mov	r7, r6
 800302a:	4283      	cmp	r3, r0
 800302c:	dc05      	bgt.n	800303a <__swbuf_r+0x4e>
 800302e:	4621      	mov	r1, r4
 8003030:	4628      	mov	r0, r5
 8003032:	f7ff ff7f 	bl	8002f34 <_fflush_r>
 8003036:	2800      	cmp	r0, #0
 8003038:	d1ed      	bne.n	8003016 <__swbuf_r+0x2a>
 800303a:	68a3      	ldr	r3, [r4, #8]
 800303c:	3b01      	subs	r3, #1
 800303e:	60a3      	str	r3, [r4, #8]
 8003040:	6823      	ldr	r3, [r4, #0]
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	6022      	str	r2, [r4, #0]
 8003046:	701e      	strb	r6, [r3, #0]
 8003048:	6962      	ldr	r2, [r4, #20]
 800304a:	1c43      	adds	r3, r0, #1
 800304c:	429a      	cmp	r2, r3
 800304e:	d004      	beq.n	800305a <__swbuf_r+0x6e>
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	07db      	lsls	r3, r3, #31
 8003054:	d5e1      	bpl.n	800301a <__swbuf_r+0x2e>
 8003056:	2e0a      	cmp	r6, #10
 8003058:	d1df      	bne.n	800301a <__swbuf_r+0x2e>
 800305a:	4621      	mov	r1, r4
 800305c:	4628      	mov	r0, r5
 800305e:	f7ff ff69 	bl	8002f34 <_fflush_r>
 8003062:	2800      	cmp	r0, #0
 8003064:	d0d9      	beq.n	800301a <__swbuf_r+0x2e>
 8003066:	e7d6      	b.n	8003016 <__swbuf_r+0x2a>

08003068 <__swsetup_r>:
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	4b29      	ldr	r3, [pc, #164]	@ (8003110 <__swsetup_r+0xa8>)
 800306c:	4605      	mov	r5, r0
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	460c      	mov	r4, r1
 8003072:	b118      	cbz	r0, 800307c <__swsetup_r+0x14>
 8003074:	6a03      	ldr	r3, [r0, #32]
 8003076:	b90b      	cbnz	r3, 800307c <__swsetup_r+0x14>
 8003078:	f7ff fa04 	bl	8002484 <__sinit>
 800307c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003080:	0719      	lsls	r1, r3, #28
 8003082:	d422      	bmi.n	80030ca <__swsetup_r+0x62>
 8003084:	06da      	lsls	r2, r3, #27
 8003086:	d407      	bmi.n	8003098 <__swsetup_r+0x30>
 8003088:	2209      	movs	r2, #9
 800308a:	602a      	str	r2, [r5, #0]
 800308c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003090:	f04f 30ff 	mov.w	r0, #4294967295
 8003094:	81a3      	strh	r3, [r4, #12]
 8003096:	e033      	b.n	8003100 <__swsetup_r+0x98>
 8003098:	0758      	lsls	r0, r3, #29
 800309a:	d512      	bpl.n	80030c2 <__swsetup_r+0x5a>
 800309c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800309e:	b141      	cbz	r1, 80030b2 <__swsetup_r+0x4a>
 80030a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80030a4:	4299      	cmp	r1, r3
 80030a6:	d002      	beq.n	80030ae <__swsetup_r+0x46>
 80030a8:	4628      	mov	r0, r5
 80030aa:	f7ff fafb 	bl	80026a4 <_free_r>
 80030ae:	2300      	movs	r3, #0
 80030b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80030b2:	89a3      	ldrh	r3, [r4, #12]
 80030b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80030b8:	81a3      	strh	r3, [r4, #12]
 80030ba:	2300      	movs	r3, #0
 80030bc:	6063      	str	r3, [r4, #4]
 80030be:	6923      	ldr	r3, [r4, #16]
 80030c0:	6023      	str	r3, [r4, #0]
 80030c2:	89a3      	ldrh	r3, [r4, #12]
 80030c4:	f043 0308 	orr.w	r3, r3, #8
 80030c8:	81a3      	strh	r3, [r4, #12]
 80030ca:	6923      	ldr	r3, [r4, #16]
 80030cc:	b94b      	cbnz	r3, 80030e2 <__swsetup_r+0x7a>
 80030ce:	89a3      	ldrh	r3, [r4, #12]
 80030d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80030d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030d8:	d003      	beq.n	80030e2 <__swsetup_r+0x7a>
 80030da:	4621      	mov	r1, r4
 80030dc:	4628      	mov	r0, r5
 80030de:	f000 f85c 	bl	800319a <__smakebuf_r>
 80030e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030e6:	f013 0201 	ands.w	r2, r3, #1
 80030ea:	d00a      	beq.n	8003102 <__swsetup_r+0x9a>
 80030ec:	2200      	movs	r2, #0
 80030ee:	60a2      	str	r2, [r4, #8]
 80030f0:	6962      	ldr	r2, [r4, #20]
 80030f2:	4252      	negs	r2, r2
 80030f4:	61a2      	str	r2, [r4, #24]
 80030f6:	6922      	ldr	r2, [r4, #16]
 80030f8:	b942      	cbnz	r2, 800310c <__swsetup_r+0xa4>
 80030fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80030fe:	d1c5      	bne.n	800308c <__swsetup_r+0x24>
 8003100:	bd38      	pop	{r3, r4, r5, pc}
 8003102:	0799      	lsls	r1, r3, #30
 8003104:	bf58      	it	pl
 8003106:	6962      	ldrpl	r2, [r4, #20]
 8003108:	60a2      	str	r2, [r4, #8]
 800310a:	e7f4      	b.n	80030f6 <__swsetup_r+0x8e>
 800310c:	2000      	movs	r0, #0
 800310e:	e7f7      	b.n	8003100 <__swsetup_r+0x98>
 8003110:	20000018 	.word	0x20000018

08003114 <_sbrk_r>:
 8003114:	b538      	push	{r3, r4, r5, lr}
 8003116:	2300      	movs	r3, #0
 8003118:	4d05      	ldr	r5, [pc, #20]	@ (8003130 <_sbrk_r+0x1c>)
 800311a:	4604      	mov	r4, r0
 800311c:	4608      	mov	r0, r1
 800311e:	602b      	str	r3, [r5, #0]
 8003120:	f7fd fc6a 	bl	80009f8 <_sbrk>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d102      	bne.n	800312e <_sbrk_r+0x1a>
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	b103      	cbz	r3, 800312e <_sbrk_r+0x1a>
 800312c:	6023      	str	r3, [r4, #0]
 800312e:	bd38      	pop	{r3, r4, r5, pc}
 8003130:	20000298 	.word	0x20000298

08003134 <memchr>:
 8003134:	4603      	mov	r3, r0
 8003136:	b510      	push	{r4, lr}
 8003138:	b2c9      	uxtb	r1, r1
 800313a:	4402      	add	r2, r0
 800313c:	4293      	cmp	r3, r2
 800313e:	4618      	mov	r0, r3
 8003140:	d101      	bne.n	8003146 <memchr+0x12>
 8003142:	2000      	movs	r0, #0
 8003144:	e003      	b.n	800314e <memchr+0x1a>
 8003146:	7804      	ldrb	r4, [r0, #0]
 8003148:	3301      	adds	r3, #1
 800314a:	428c      	cmp	r4, r1
 800314c:	d1f6      	bne.n	800313c <memchr+0x8>
 800314e:	bd10      	pop	{r4, pc}

08003150 <__swhatbuf_r>:
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	460c      	mov	r4, r1
 8003154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003158:	4615      	mov	r5, r2
 800315a:	2900      	cmp	r1, #0
 800315c:	461e      	mov	r6, r3
 800315e:	b096      	sub	sp, #88	@ 0x58
 8003160:	da0c      	bge.n	800317c <__swhatbuf_r+0x2c>
 8003162:	89a3      	ldrh	r3, [r4, #12]
 8003164:	2100      	movs	r1, #0
 8003166:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800316a:	bf14      	ite	ne
 800316c:	2340      	movne	r3, #64	@ 0x40
 800316e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003172:	2000      	movs	r0, #0
 8003174:	6031      	str	r1, [r6, #0]
 8003176:	602b      	str	r3, [r5, #0]
 8003178:	b016      	add	sp, #88	@ 0x58
 800317a:	bd70      	pop	{r4, r5, r6, pc}
 800317c:	466a      	mov	r2, sp
 800317e:	f000 f849 	bl	8003214 <_fstat_r>
 8003182:	2800      	cmp	r0, #0
 8003184:	dbed      	blt.n	8003162 <__swhatbuf_r+0x12>
 8003186:	9901      	ldr	r1, [sp, #4]
 8003188:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800318c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003190:	4259      	negs	r1, r3
 8003192:	4159      	adcs	r1, r3
 8003194:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003198:	e7eb      	b.n	8003172 <__swhatbuf_r+0x22>

0800319a <__smakebuf_r>:
 800319a:	898b      	ldrh	r3, [r1, #12]
 800319c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800319e:	079d      	lsls	r5, r3, #30
 80031a0:	4606      	mov	r6, r0
 80031a2:	460c      	mov	r4, r1
 80031a4:	d507      	bpl.n	80031b6 <__smakebuf_r+0x1c>
 80031a6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80031aa:	6023      	str	r3, [r4, #0]
 80031ac:	6123      	str	r3, [r4, #16]
 80031ae:	2301      	movs	r3, #1
 80031b0:	6163      	str	r3, [r4, #20]
 80031b2:	b003      	add	sp, #12
 80031b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031b6:	466a      	mov	r2, sp
 80031b8:	ab01      	add	r3, sp, #4
 80031ba:	f7ff ffc9 	bl	8003150 <__swhatbuf_r>
 80031be:	9f00      	ldr	r7, [sp, #0]
 80031c0:	4605      	mov	r5, r0
 80031c2:	4639      	mov	r1, r7
 80031c4:	4630      	mov	r0, r6
 80031c6:	f7ff fad7 	bl	8002778 <_malloc_r>
 80031ca:	b948      	cbnz	r0, 80031e0 <__smakebuf_r+0x46>
 80031cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031d0:	059a      	lsls	r2, r3, #22
 80031d2:	d4ee      	bmi.n	80031b2 <__smakebuf_r+0x18>
 80031d4:	f023 0303 	bic.w	r3, r3, #3
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	81a3      	strh	r3, [r4, #12]
 80031de:	e7e2      	b.n	80031a6 <__smakebuf_r+0xc>
 80031e0:	89a3      	ldrh	r3, [r4, #12]
 80031e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80031e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031ea:	81a3      	strh	r3, [r4, #12]
 80031ec:	9b01      	ldr	r3, [sp, #4]
 80031ee:	6020      	str	r0, [r4, #0]
 80031f0:	b15b      	cbz	r3, 800320a <__smakebuf_r+0x70>
 80031f2:	4630      	mov	r0, r6
 80031f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031f8:	f000 f81e 	bl	8003238 <_isatty_r>
 80031fc:	b128      	cbz	r0, 800320a <__smakebuf_r+0x70>
 80031fe:	89a3      	ldrh	r3, [r4, #12]
 8003200:	f023 0303 	bic.w	r3, r3, #3
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	81a3      	strh	r3, [r4, #12]
 800320a:	89a3      	ldrh	r3, [r4, #12]
 800320c:	431d      	orrs	r5, r3
 800320e:	81a5      	strh	r5, [r4, #12]
 8003210:	e7cf      	b.n	80031b2 <__smakebuf_r+0x18>
	...

08003214 <_fstat_r>:
 8003214:	b538      	push	{r3, r4, r5, lr}
 8003216:	2300      	movs	r3, #0
 8003218:	4d06      	ldr	r5, [pc, #24]	@ (8003234 <_fstat_r+0x20>)
 800321a:	4604      	mov	r4, r0
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	602b      	str	r3, [r5, #0]
 8003222:	f7fd fbc3 	bl	80009ac <_fstat>
 8003226:	1c43      	adds	r3, r0, #1
 8003228:	d102      	bne.n	8003230 <_fstat_r+0x1c>
 800322a:	682b      	ldr	r3, [r5, #0]
 800322c:	b103      	cbz	r3, 8003230 <_fstat_r+0x1c>
 800322e:	6023      	str	r3, [r4, #0]
 8003230:	bd38      	pop	{r3, r4, r5, pc}
 8003232:	bf00      	nop
 8003234:	20000298 	.word	0x20000298

08003238 <_isatty_r>:
 8003238:	b538      	push	{r3, r4, r5, lr}
 800323a:	2300      	movs	r3, #0
 800323c:	4d05      	ldr	r5, [pc, #20]	@ (8003254 <_isatty_r+0x1c>)
 800323e:	4604      	mov	r4, r0
 8003240:	4608      	mov	r0, r1
 8003242:	602b      	str	r3, [r5, #0]
 8003244:	f7fd fbc1 	bl	80009ca <_isatty>
 8003248:	1c43      	adds	r3, r0, #1
 800324a:	d102      	bne.n	8003252 <_isatty_r+0x1a>
 800324c:	682b      	ldr	r3, [r5, #0]
 800324e:	b103      	cbz	r3, 8003252 <_isatty_r+0x1a>
 8003250:	6023      	str	r3, [r4, #0]
 8003252:	bd38      	pop	{r3, r4, r5, pc}
 8003254:	20000298 	.word	0x20000298

08003258 <_init>:
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325a:	bf00      	nop
 800325c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325e:	bc08      	pop	{r3}
 8003260:	469e      	mov	lr, r3
 8003262:	4770      	bx	lr

08003264 <_fini>:
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	bf00      	nop
 8003268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326a:	bc08      	pop	{r3}
 800326c:	469e      	mov	lr, r3
 800326e:	4770      	bx	lr
